@using System.Web.Optimization;
@model BHI.SalesArchitect.Model.GeospatialISPRequest
@{
    Layout = null;
    var configuration = (BHI.SalesArchitect.Model.ProspectConfiguration)ViewBag.PartnerConfiguration;
    var commAllPlans = ViewBag.commAllPlans;
    var googleAPIkey = configuration != null ? configuration.GoogleAPIKey : String.Empty;
    var googleClientId = configuration != null ? configuration.GoogleClientId : String.Empty;
    var showAllPlans = commAllPlans != null ? (commAllPlans == "TRUE" ? true : false) : (configuration != null ? configuration.ShowAllPlans : true);
    var hoverAllowed = configuration != null ? configuration.IsHoverAllowed : true;
    var sendLotIds = configuration != null ? configuration.SendLotId : false;
    var requestInfoModel = configuration != null ? configuration.RequestInfoModal ?? true : true;
    var lotToBeSelected = ViewBag.lotID != "" ? ViewBag.lotID : "";
    var isMasterPlan = ViewBag.masterPlan;
    var isPdf = ViewBag.isPDF;
    var lotOutlineColor = (configuration != null && !String.IsNullOrEmpty(configuration.LotOutlineColor)) ? configuration.LotOutlineColor : "#0375EE";
    #region Referrer check for kiosk
    var isDownloadEnabled = true;
    var isViewMoreDetailsBtn = true;
    var isHotspotBtn = true;
    Uri referrer = HttpContext.Current.Request.UrlReferrer;
    if (referrer != null)
    {
        string original = referrer.OriginalString.ToLower();
        isDownloadEnabled = isViewMoreDetailsBtn = isHotspotBtn = !original.Contains("kiosk");
    }
    ViewBag.GoogleAnalyticsID = "UA-197865844-1";
    #endregion
}

<!DOCTYPE html>

<html>
<head>
    <title>GeoSpatial ISP</title>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="description" content="">
    <meta id="metaviewport" name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="serverName" content="@System.Environment.MachineName" />
    @Html.Partial("Partials/_googleAnalytics")
    @if (!String.IsNullOrEmpty(googleAPIkey))
    {
        <script src="https://maps.googleapis.com/maps/api/js?key=@googleAPIkey&v=3.51&libraries=geometry,places"></script>
    }
    else if (!String.IsNullOrEmpty(googleClientId))
    {
        <script src="https://maps.googleapis.com/maps/api/js?client=@googleClientId&v=3.51&libraries=geometry,places"></script>
    }
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
    @Scripts.Render("~/bundles/ISP3")
    @Scripts.RenderFormat("<script src='{0}' defer></script>", "~/bundles/ISP3Def")
    @Styles.RenderFormat("<link rel='stylesheet' defer='defer' href='{0}' />", "~/Content/ISP3CssDef")
    @Styles.RenderFormat("<link rel='stylesheet' defer='defer' href='{0}' />", "~/Content/themes/LightGallery/css/DeferredCss")

</head>
<body>
    <div id="loadingmessage">
        <img src='~/Content/images/isp_loader.gif' />
    </div>
    <a style="display:none;" id="dummyAnchor" href="javascript:void(0)"></a>
    <div class="legends" id="legends" style="display:none;">
        <button class="legends-btn" id="legends-btn"><i class="fa fa-angle-down" aria-hidden="true" id="legend-icon"></i><span id="button-text">Lot Status Key</span></button>
        <div id="openLegends" style="display:none">
            <div class="legends_tooltip"><i class="fa fa-caret-up"></i></div>
            <div class="Status_open">
                <a href="#" class="close-refine" id="close-refine-button">×</a>
                <ul class="legends-list" id="lotColorScheme"></ul>
                <div class="buttons">
                    <a href="#" class="action_btn reset" id="resetHomesiteFilter">Clear</a>
                    <a href="#" class="action_btn apply" id="applyHomesiteFilter">Apply</a>
                </div>
            </div>
        </div>

    </div>
    <div id="pointOfInterest">
    </div>
    <div id="map">
    </div>

    @Html.Partial("Partials/_ISPNotAvailable")

    @if (Model.showListings)
    {
        <div id="rightPanel" style="display: block;">
            @Html.Partial("Partials/_rightPanel");
        </div>
    }
    @if (requestInfoModel)
    {
        <div id="request-Info-div" style="display:none;">
            @Html.Partial("Partials/_requestInfo");
        </div>
    }
    <div id="hold-alot-div" style="display:none;">
        @Html.Partial("Partials/_HoldALotRequestGeo", new BHI.SalesArchitect.WebAdmin.Models.HolALotRequest())
    </div>
    <div id="int-media-div" style="display:none;">
        @Html.Partial("Partials/_interactiveMedia")
    </div>
    <div id="external-link-div" style="display:none;">
        @Html.Partial("Partials/_externalLink")
    </div>
    <script>
        var lotToBeSelected = '@lotToBeSelected';
        var isMasterPlanValue = '@isMasterPlan';
        var isMasterPlan = isMasterPlanValue.toUpperCase() == 'TRUE' ? true : false;
        var isPdfValue = '@isPdf';
        var isPdf = isPdfValue.toUpperCase() == 'TRUE' ? true : false;
        var googleAPIKey = '@googleAPIkey';
        var googleClientId = '@googleClientId';
        var isDownloadEnabled = '@(isDownloadEnabled.ToString().ToLower())' == 'true' ? true : false;
        var holdALotVal = '@ViewBag.HoldALot';
        var holdALot = holdALotVal.toUpperCase() == 'TRUE' ? true : false;
        var isIntuiface = false;
        var lotOutlineColor = '@lotOutlineColor';
        if (querystring("isDownloadEnabled").length > 0) {
            isDownloadEnabled = querystring("isDownloadEnabled").length > 0 && (querystring("isDownloadEnabled")[0].toLowerCase() == 'true') ? true : false;
        }
        var isViewMoreDetailsBtn = '@(isViewMoreDetailsBtn.ToString().ToLower())' == 'true' ? true : false;
        if (querystring("isViewMoreDetailsBtn").length > 0) {
            isViewMoreDetailsBtn = querystring("isViewMoreDetailsBtn").length > 0 && (querystring("isViewMoreDetailsBtn")[0].toLowerCase() == 'true') ? true : false;
        }
        if (querystring("intuiface").length > 0) {
            isIntuiface = querystring("intuiface").length > 0 && (querystring("intuiface")[0].toLowerCase() == 'true') ? true : false;
        }
        var isHotspotBtn = '@(isHotspotBtn.ToString().ToLower())' == 'true' ? true : false;
        if (querystring("DisplayHotspotsOnKiosks").length > 0) {
            isHotspotBtn = querystring("DisplayHotspotsOnKiosks").length > 0 && (querystring("DisplayHotspotsOnKiosks")[0].toLowerCase() == 'true') ? true : false;
        }
        var SAGeospatialError = {
            NoJson: 'Geospatial ISP View Unavailable.',
            InvalidGoogleAPIKeyOrClientID :  'Invalid Google API key or Client ID.'
        };
        if (googleAPIKey == "" && googleClientId == "")
        {
            failure(SAGeospatialError.InvalidGoogleAPIKeyOrClientID);
        }else
        {
            var manager = new BHI.SalesArchitectISP3.Manager(@Model.bdxCommunityID, @Html.Raw(Json.Encode(Model.showAmenities)), @Html.Raw(Json.Encode(Model.showListings)), @Json.Encode(showAllPlans), @Json.Encode(hoverAllowed), @Json.Encode(requestInfoModel), @Json.Encode(sendLotIds), @Html.Raw(Json.Encode(Model.allowLegends)), @Html.Raw(Json.Encode(Model.allowPointOfInterests)), @Html.Raw(Json.Encode(Model.allowResize)), @Model.ZoomLevel, @Html.Raw(Json.Encode(Model.openLinkInModal)), lotToBeSelected, isMasterPlan, isPdf, @Html.Raw(Json.Encode(Model.DefaultSatelliteView)), @Model.communityID);
            manager.Initialize(SAGeospatialError.InvalidGoogleAPIKeyOrClientID);
        }
        var holdALotInternalReference = "";
        function setLotholdALot(e) {
            holdALotInternalReference = e.dataset.internalreference;
        }
        var comments = "Hold a Lot Request: " + holdALotInternalReference;
        var holdALotModel = {
                FirstName: document.getElementById('hldfirstName').value,
                LastName: document.getElementById('hldlastName').value,
                EmailAddress: document.getElementById('hldEmailAddress').value,
                PhoneNumber: document.getElementById('hldPhoneNumber').value,
                Comments: comments,
                CommunityID: '@ViewBag.BDXCommunityID',
                partnerID: '@ViewBag.PartnerID',
                Platform: 5,
                HoldaLot: true,
                LotId: holdALotInternalReference,
                BuilderEmail: '@ViewBag.BuilderEmail',
                isMobileLead: false,
                BuilderID: '@ViewBag.BuilderID',
                SiteUrl: window.location.href
            };
        function gm_authFailure() { failure(SAGeospatialError.InvalidGoogleAPIKeyOrClientID); };

        function failure(message) {
            document.getElementById('ispNotAvailable').classList.remove('hide');
            document.getElementById('ispNotAvailable').classList.add('show');
            document.getElementById('apiKeyError').innerText = message;
        }
        function setLotholdALot(e) {
            holdALotInternalReference = e.currentTarget.dataset.internalreference;
        }

        function showLegends() {
            var x = document.getElementById("openLegends");
            if (x.style.display === "none") {
                x.style.display = "block";
                document.getElementById('legend-icon').classList.remove('fa-angle-right');
                document.getElementById('legend-icon').classList.add('fa-angle-down');
            } else {
                x.style.display = "none";
                document.getElementById('legend-icon').classList.remove('fa-angle-down');
                document.getElementById('legend-icon').classList.add('fa-angle-right');
            }
        }
        function querystring(key) {
            var re = new RegExp('(?:\\?|&)' + key + '=(.*?)(?=&|$)', 'gi');
            var r = [],
                m;
            while ((m = re.exec(document.location.search)) != null) r.push(m[1]);
            return r;
        }

        function allChildren(svgElement, action) {
            if (svgElement != null && svgElement.children != null && svgElement.children.length > 0) {
                for (var i = 0; i < svgElement.children.length; i++) {
                    allChildren(svgElement.children[i], action);
                };
            }
            action(svgElement);
        }

        function hihglightLot(internalReference) {
            if (SVGGeospatial) {
                if (internalReference && internalReference !== '') {
                    var svgLot = document.querySelector('#' + internalReference);
                    if (svgLot) {
                        allChildren(svgLot, function (svgElement) {
                            svgElement.style.strokeWidth = 5;
                            svgElement.style.stroke = lotOutlineColor;
                        });
                    }
                }
            }
            else {
                googleMap.data.revertStyle();
                googleMap.data.forEach(function (feature) {
                    if (feature.getProperty('Lot_') !== "" && feature.getProperty('Lot_') !== undefined && feature.getGeometry().getType() === 'Polygon' && feature.getProperty('Lot_') === internalReference) {
                        googleMap.data.overrideStyle(feature, { strokeWeight: 5, strokeColor: lotOutlineColor, strokeOpacity: 1 });
                    }
                });
            }
        }
    </script>
</body>
</html>
@using MvcJqGrid
@using MvcJqGrid.Enums
@using System.Web.Optimization;
@using BHI.SalesArchitect.Core.Enumerations;
@{
    ViewBag.Title = "Communities";
}
@{
    var COMMUNITIES_GRID = "Communities";
    var PROSPECTS_GRID = "Prospects";
}

@*@Html.Partial("GoogleAnalytics")*@
@section header {
    @Scripts.Render("~/bundles/jquery-2.0.3")
    @Scripts.Render("~/bundles/jqueryui-1.10.3")
    @Scripts.Render("~/bundles/jqGrid")
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/sortable")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/bundles/communities")
    @Styles.Render("~/Content/themes/base/css")
    @Styles.Render("~/Content/jqGrid")
    @Styles.Render("~/Content/fineuploader")
    @Scripts.Render("~/bundles/jqueryval")
}
@if (User.IsInRole("LOTSTATUSEDITOR"))
{
    <style>
        .lotStatusEditor {
            display: none !important;
        }
        /*.lotStatusEditorRest {
            display:none;
        }*/
    </style>
}
<style>
    html {
        -ms-content-zooming: none;
        /*-ms-touch-action: pan-x pan-y;*/
        -ms-touch-action: none;
        touch-action: none;
        -ms-scroll-chaining: none;
    }

    .span4 {
        width: 50%;
        min-width: 280px;
    }

    .clearfix {
        position: relative;
    }

    .validationMessage {
        color: red;
        font-weight: bold;
    }

    .feevalidationMessage {
        color: red;
        font-weight: bold;
    }

    .feevalidationMessageNew {
        color: red;
        font-weight: bold;
    }

    .ui-jqgrid-bdiv {
        max-height: 242px !important;
        height: auto;
    }

    .isp-field-validation-error {
        display: block;
        text-align: left;
        color: #bd2929;
    }

    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        /* display: none; <- Crashes Chrome on hover */
        -webkit-appearance: none;
        margin: 0; /* <-- Apparently some margin are still there even though it's hidden */
    }

    .image-upload-alert-msg {
        color: #e32545;
        margin: 5px;
        font-size: 14px;
        text-align: center;
    }

    .edit-multiple-lots-div, .select-all-div, .deselect-all-div {
        border: 1px #ccc dashed;
        text-align: center;
        padding: 0px 0px 0px 2px;
    }

    .deselect-all-div {
        margin: 10px 0px 5px 0px;
    }

        edit-multiple-lots-div a, .delete-all-lots-div a, .select-all-div a, .deselect-all-div a, .well.update-options a {
            text-decoration: none;
        }

    .edit-multiple-lots-div span {
        color: #e32545;
    }

    .well.update-options {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 70px;
        width: 980px;
        border-radius: 0;
        margin-left: -56px !important;
    }

    .delete-all-lots-div span {
        color: #e32545;
        vertical-align: middle;
        padding-left: 5px;
    }

    .delete-all-lots-div {
        border: 1px #ccc dashed;
        text-align: left;
        margin: 5px 0px;
        width: 23%;
        padding-left: 3px;
    }

    .delete-lots-div {
        color: #e32545;
        vertical-align: middle;
        padding-left: 5px;
    }

    .select-all-div span, .deselect-all-div span {
        color: #0088cc;
    }

    .ctrl-text-div {
        font-weight: bold;
        text-align: center;
        margin: 10px 0px 0px 0px;
    }

    #file {
        line-height: 0px;
    }

    .color-selection-delete {
        background: none;
        border: none;
        margin-top: 2px;
        float: right;
    }

        .color-selection-delete:hover, button.color-selection-delete:focus {
            color: red;
            outline: none;
        }

    #lotColorScheme .color-selection {
        background: #f5f5f5;
    }

    #lotColorScheme div.colorpicker-label {
        width: 20%;
        word-break: break-word;
        cursor: move;
    }

    .dw-include {
        /* position: absolute;
        right: 30%;
        top: 2%;
           */
        width: 13% !important;
    }

    .holdLot {
        /*position: absolute;
        right: 11%;
        top: 2%;
            */
        width: 13% !important;
    }

    .del-bt {
        position: absolute;
        right: 0;
        top: 2%;
    }

    .span4-dwlot-del {
        width: 30% !important;
    }

    h5 hot a lot div {
        margin-left: 2%;
        display: inline;
        float: right;
    }

    color-selection-delete {
        position: absolute;
    }

    span4 {
        width: auto !important;
    }

    dw checkbox {
        right: 6%;
    }


    /*text-editor*/
    .fr-toolbar {
        border-top: none;
    }

    .fr-popup {
        border-top: none;
    }

        .fr-popup .fr-input-line {
            padding: 20px 0;
        }

            .fr-popup .fr-input-line input[type=text], .fr-popup .fr-input-line textarea {
                padding: 20px 2px;
            }

                .fr-popup .fr-input-line input + label, .fr-popup .fr-input-line textarea + label {
                    font-size: 15px;
                }

    .fr-box.fr-basic.fr-top .fr-wrapper {
        min-height: 150px;
    }

    .fr-box .fr-counter {
        display: none;
    }

    .fileContainer {
        width: 65%;
        position: relative;
        overflow: hidden;
        direction: ltr;
        display: inline-block;
        padding: 7px 0;
        text-align: center;
        border-bottom: 1px solid #DDD;
        color: #FFF;
        vertical-align: middle;
        border-radius: 3px;
    }

    .btn-succes_image {
        color: #ffffff;
        text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
        background-color: #5bb75b;
        background-image: -moz-linear-gradient(top, #62c462, #51a351);
        background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#62c462), to(#51a351));
        background-image: -webkit-linear-gradient(top, #62c462, #51a351);
        background-image: -o-linear-gradient(top, #62c462, #51a351);
        background-image: linear-gradient(to bottom, #62c462, #51a351);
        background-repeat: repeat-x;
        border-color: #51a351 #51a351 #387038;
        border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);
        font-size: 15px;
    }

    .icon-upload {
        background-position: -144px -24px;
    }

    .fileContainer [type=file] {
        position: absolute;
        right: 0px;
        top: 0px;
        font-family: Arial;
        font-size: 118px;
        margin: 0px;
        padding: 0px;
        cursor: pointer;
        opacity: 0;
    }
    /* Tooltip container */
    .tool-tip {
        position: absolute;
        display: inline-block;
        margin: 5px 0 0 15px;
        color: #0088cc;
    }

        /* Tooltip text */
        .tool-tip .tooltiptext {
            visibility: hidden;
            width: 280px;
            background-color: #eee;
            color: #111;
            text-align: center;
            padding: 5px;
            border-radius: 3px;
            /* Position the tooltip text - see examples below! */
            position: absolute;
            z-index: 1;
            bottom: 110%;
            left: 50%;
            margin-left: -140px;
        }

        /* Show the tooltip text when you mouse over the tooltip container */
        .tool-tip:hover .tooltiptext {
            visibility: visible;
        }

        .tool-tip .tooltiptext::after {
            content: " ";
            position: absolute;
            top: 100%; /* At the bottom of the tooltip */
            left: 50%;
            margin-left: -7px;
            border-width: 7px;
            border-style: solid;
            border-color: #eee transparent transparent transparent;
        }

    .table-header {
        background-color: white !important;
        font-weight: bold;
        border-bottom: 1px solid;
        border-bottom-color: silver;
    }


    input[type=text]::-ms-clear {
        display: none;
        width: 0;
        height: 0;
    }

    #manageCommTitle {
        overflow: hidden;
    }

    .comm-title .form-horizontal .control-label {
        text-align: left !important;
        width: 225px !important;
    }

    .comm-title .controls {
        text-align: left !important;
    }

    .comm-title .form-horizontal .control-group {
        margin-bottom: 10px !important;
    }

    .comm-title label {
        font-size: 12px !important;
    }

    .comm-title input[type="text"] {
        font-size: 12px !important;
        width: 240px;
    }

    .comm-title .row-fluid .span6 {
        width: 56%;
    }

    .comm-title hr {
        margin: 10px 0 !important;
    }

    .comm-title .help-icon:hover #tooltip {
        background-size: 90%;
    }

    .comm-title .help-icon:hover #tooltip1 {
        background-size: 86%;
    }

    .customizedItemDiv {
        min-height: 40px;
        display: flex;
        align-items: center;
        background: #f5f5f5;
    }
</style>
<section>
    <input id="isp" type="hidden" />
    <div class="row"><div class="span12 section-heading"><h1>@ViewData["PartnerName"]</h1></div> </div>
    <div class="row">
        <div class="span6 section-heading">
            <h1>
                @if (Roles.IsUserInRole("BHIADMIN") || Roles.IsUserInRole("PARTNERSUPERADMIN") || Roles.IsUserInRole("PARTNERADMIN"))
                {
                    if (Roles.IsUserInRole("BHIADMIN"))
                    {
                        <button class="btn btn-small btn-success" id="newCommunity-btn" data-target="#addCommunityModal" data-toggle="modal" type="button"><i class="icon-plus icon-white"></i> New Community</button>
                    }
                    if (ViewBag.IspPartnerType != (int)CommonEnumerations.IspPartnerType.FreeGeoSpatial)
                    {
                        <button class="btn btn-small " data-target="#partnerClientKeyModal" data-toggle="modal" type="button">API Key</button>
                    }
                    @*if (ViewBag.IspPartnerType != (int)CommonEnumerations.IspPartnerType.FreeGeoSpatial)
                        {
                            <button class="btn btn-small" data-target="#partnerUpdateFileModal" data-toggle="modal" onclick="return uploadFileButtonClick('LoadUpdateDataSubmit');">Site Plan Data</button>
                        }
                        if (ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVG || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial)
                        {
                            <button class="btn btn-small" data-target="#partnerUpdateMasterPlanModal" data-toggle="modal" onclick="return uploadFileButtonClick('myform');">Upload SVG Master Plan</button>
                        }*@
                }
            </h1>
        </div>
        <div class="span6">
            <div class="page-header-btn-group btn-group pull-right">
                @Html.Action("ManageMenu", "Apps")
            </div>
        </div>
    </div><!-- .row -->
    <div class="row">
        <div class="span12 search-filter-container">
            <div class="community-status-filter-container">
                <label class="community-status-filter-label">Type</label>
                <select class="community-status-filter" id="commTypeFilter" onchange="onCommunityTypeChange(this.value);" style="outline: none; width: 165px;">
                    <option value="0">BDXLive Connected</option>
                    <option value="1">Standalone</option>
                    <option value="2">All</option>
                </select>
                <div class="tool-tip" style="right: -25px;"><img src="/Content/images/help-icon.png" style="width:16px;margin-top: -5px;"><span class="tooltiptext" style="bottom: 150%; margin-left:-145px;">Standalone Communities are not linked to BDXLive data.</span></div>
            </div>
            @if (Roles.IsUserInRole("BHIADMIN"))
            {
                <div class="community-status-filter-container" style="margin-left: 50px;">
                    <label class="community-status-filter-label">Status</label>
                    <select class="community-status-filter" id="commStatusFilter" onchange="onCommunityStatusChange(this.value);" style="outline: none; width: 90px;">
                        <option value="0">Active</option>
                        <option value="1">Inactive</option>
                        <option value="2">All</option>
                    </select>
                    <div class="tool-tip" style="right: -25px;"><img src="/Content/images/help-icon.png" style="width:16px;margin-top: -5px;"><span class="tooltiptext" style="bottom: 150%; margin-left:-145px;">Active/Inactive Community Status from BDXLive.</span></div>
                </div>
            }
            <div class="search">
                <a href="javascript:void(0)" class="clear disable" onclick="clearSearch()" id="clear-search">Clear Search</a>
                <div class="searchbox"><input type="text" placeholder="Search by Community name, builder/brand" size="40" id="searchBox"> <a href="javascript:void(0)" class="icon-search" onclick="searchCommunityGrid()" id="searchButton"></a></div>
            </div>

        </div>

        <div class="span12 table-fixed-head-container">
            <div class="">
                @if (Roles.IsUserInRole("BHIADMIN"))
                {
                    if (ViewBag.showDreamweaver)
                    {
                        @(Html.Grid(COMMUNITIES_GRID)
                                                                                                                                                    .AddColumn(new Column("ID").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("cell.Brand").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Brand").SetWidth(109))
                                                                                                                                                    .AddColumn(new Column("cell.Market").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Market").SetWidth(109))
                                                                                                                                                    .AddColumn(new Column("cell.ISPName").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("ISP Community Label").SetWidth(109))
                                                                                                                                                    .AddColumn(new Column("cell.Name").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Community").SetWidth(109))
                                                                                                                                                    .AddColumn(new Column("cell.LotsCount").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetWidth(58).SetLabel("# of Lots"))
                                                                                                                                                    .AddColumn(ViewBag.IsISPOnly ? new Column("cell.ProspectCount").SetHidden(true) : new Column("cell.ProspectCount").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetWidth(73).SetLabel("# of Prospects"))
                                                                                                                                                    .AddColumn(new Column("cell.Admins").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Community Admin").SetWidth(109))
                                                                                                                                                    .AddColumn(new Column("cell.ISPVersion").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("ISP Version").SetWidth(109))
                                                                                                                                                    .AddColumn(ViewBag.IsISPOnly ? new Column("cell.ActivityState").SetHidden(true) : new Column("cell.ActivityState").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Sales Navigator").SetWidth(109))
                                                                                                                                                    .AddColumn(new Column("Address").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("SiteID").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("MasterPlanID").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("Locked").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("NewIsp").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("BDXId").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("HasGeoJson").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("HasSVG").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("IsGeoSVG").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("IsMasterGeoSVG").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("cell.ID").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("ISP Community ID").SetWidth(115))
                                                                                                                                                    .AddColumn(new Column("cell.Sites").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("ISP Site ID").SetWidth(75).SetCustomFormatter("siteIDFormatter"))
                                                                                                                                                    .AddColumn(new Column("cell.BDXId").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("BDX Community ID").SetWidth(125))
                                                                                                                                                    .AddColumn(new Column("cell.Type").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Type").SetWidth(130))
                                                                                                                                                    .AddColumn(new Column("cell.Status").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Sync Status").SetWidth(130))
                                                                                                                                                    .AddColumn(new Column("cell.DWStatus").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("DW Status").SetWidth(109))
                                                                                                                                                    .AddColumn(new Column("cell.DateDeleted").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Date Deleted").SetWidth(100))
                                                                                                                                                    .AddColumn(new Column("cell.DeletedBy").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Deleted By").SetWidth(130))
                                                                                                                                                    .SetUrl(Url.Action("GetCommunities"))
                                                                                                                                                    .SetAutoWidth(true)
                                                                                                                                                    .SetRowNum(10)
                                                                                                                                                    .SetRowList(new[] { 10, 15, 20, 50 })
                                                                                                                                                    .SetPager("pager")
                                                                                                                                                    .SetRequestType(MvcJqGrid.Enums.RequestType.Post)
                                                                                                                                                    .OnSelectRow("onRowSelected(rowid, status)")
                                                                                                                                                    .OnLoadComplete("CommunitiesLoadCompleted()")
                                                                                                                                                    .SetViewRecords(true)
                                                                                                                                                    .OnSelectRow("onRowSelected(rowid, status)")
                                                                                                                                                    .OnSelectAll("onAllRowSelected(aRowids,status)")
                                                                                                                                                    .SetLoadOnce(false)
                                                                                                                                                    .SetEmptyRecords("No Communities Found")
                                                                                                                                                    .SetShrinkToFit(false)
                        //.OnPaging("onPaging()")
                        //.OnSortCol("onSort()")
                        )
                    }
                    else
                    {
                        @(Html.Grid(COMMUNITIES_GRID)
                                                                                                                                            .AddColumn(new Column("ID").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("cell.Brand").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Brand").SetWidth(125))
                                                                                                                                            .AddColumn(new Column("cell.Market").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Market").SetWidth(125))
                                                                                                                                            .AddColumn(new Column("cell.ISPName").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("ISP Community Label").SetWidth(125))
                                                                                                                                            .AddColumn(new Column("cell.Name").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Community").SetWidth(125))
                                                                                                                                            .AddColumn(new Column("cell.LotsCount").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetWidth(67).SetLabel("# of Lots"))
                                                                                                                                            .AddColumn(ViewBag.IsISPOnly ? new Column("cell.ProspectCount").SetHidden(true) : new Column("cell.ProspectCount").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetWidth(83).SetLabel("# of Prospects"))
                                                                                                                                            .AddColumn(new Column("cell.Admins").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Community Admin").SetWidth(125))
                                                                                                                                            .AddColumn(new Column("cell.ISPVersion").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("ISP Version").SetWidth(125))
                                                                                                                                            .AddColumn(ViewBag.IsISPOnly ? new Column("cell.ActivityState").SetHidden(true) : new Column("cell.ActivityState").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Sales Navigator").SetWidth(125))
                                                                                                                                            .AddColumn(new Column("Address").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("SiteID").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("MasterPlanID").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("Locked").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("NewIsp").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("BDXId").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("HasGeoJson").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("HasSVG").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("IsGeoSVG").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("IsMasterGeoSVG").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("cell.ID").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("ISP Community ID").SetWidth(95))
                                                                                                                                            .AddColumn(new Column("cell.Sites").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("ISP Site ID").SetWidth(75).SetCustomFormatter("siteIDFormatter"))
                                                                                                                                            .AddColumn(new Column("cell.BDXId").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("BDX Community ID").SetWidth(125))
                                                                                                                                            .AddColumn(new Column("cell.Type").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Type").SetWidth(130))
                                                                                                                                            .AddColumn(new Column("cell.Status").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Sync Status").SetWidth(130))
                                                                                                                                            .AddColumn(new Column("cell.DWStatus").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("cell.DateDeleted").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Date Deleted").SetWidth(100))
                                                                                                                                            .AddColumn(new Column("cell.DeletedBy").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Deleted By").SetWidth(130))
                                                                                                                                            .SetUrl(Url.Action("GetCommunities"))
                                                                                                                                            .SetAutoWidth(true)
                                                                                                                                            .SetRowNum(10)
                                                                                                                                            .SetRowList(new[] { 10, 15, 20, 50 })
                                                                                                                                            .SetPager("pager")
                                                                                                                                            .SetRequestType(MvcJqGrid.Enums.RequestType.Post)
                                                                                                                                            .OnSelectRow("onRowSelected(rowid, status)")
                                                                                                                                            .OnLoadComplete("CommunitiesLoadCompleted()")
                                                                                                                                            .SetViewRecords(true)
                                                                                                                                            .OnSelectRow("onRowSelected(rowid, status)")
                                                                                                                                            .OnSelectAll("onAllRowSelected(aRowids,status)")
                                                                                                                                            .SetLoadOnce(false)
                                                                                                                                            .SetEmptyRecords("No Communities Found")
                                                                                                                                            .SetShrinkToFit(false)
                        //.OnPaging("onPaging()")
                        //.OnSortCol("onSort()")
                        )
                    }
                }
                else if (Roles.IsUserInRole("PARTNERSUPERADMIN"))
                {
                    @(Html.Grid(COMMUNITIES_GRID)
                                                                                                                                            .AddColumn(new Column("ID").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("cell.Brand").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Brand").SetWidth(125))
                                                                                                                                            .AddColumn(new Column("cell.Market").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Market").SetWidth(125))
                                                                                                                                            .AddColumn(new Column("cell.ISPName").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("ISP Community Label").SetWidth(125))
                                                                                                                                            .AddColumn(new Column("cell.Name").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Community").SetWidth(125))
                                                                                                                                            .AddColumn(new Column("cell.LotsCount").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetWidth(67).SetLabel("# of Lots"))
                                                                                                                                            .AddColumn(ViewBag.IsISPOnly ? new Column("cell.ProspectCount").SetHidden(true) : new Column("cell.ProspectCount").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetWidth(83).SetLabel("# of Prospects"))
                                                                                                                                            .AddColumn(new Column("cell.Admins").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Community Admin").SetWidth(125))
                                                                                                                                            .AddColumn(new Column("cell.ISPVersion").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("ISP Version").SetWidth(125))
                                                                                                                                            .AddColumn(ViewBag.IsISPOnly ? new Column("cell.ActivityState").SetHidden(true) : new Column("cell.ActivityState").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Sales Navigator").SetWidth(125))
                                                                                                                                            .AddColumn(new Column("Address").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("SiteID").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("MasterPlanID").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("Locked").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("NewIsp").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("BDXId").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("HasGeoJson").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("HasSVG").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("IsGeoSVG").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("IsMasterGeoSVG").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("cell.ID").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("ISP Community ID").SetWidth(95))
                                                                                                                                            .AddColumn(new Column("cell.Sites").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("ISP Site ID").SetWidth(75).SetCustomFormatter("siteIDFormatter"))
                                                                                                                                            .AddColumn(new Column("cell.BDXId").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("BDX Community ID").SetWidth(125))
                                                                                                                                            .AddColumn(new Column("cell.Type").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Type").SetWidth(130))
                                                                                                                                            .AddColumn(new Column("cell.Status").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Sync Status").SetWidth(130))
                                                                                                                                            .AddColumn(new Column("cell.DWStatus").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("cell.DateDeleted").SetHidden(true))
                                                                                                                                            .AddColumn(new Column("cell.DeletedBy").SetHidden(true))
                                                                                                                                            .SetUrl(Url.Action("GetCommunities"))
                                                                                                                                            .SetAutoWidth(true)
                                                                                                                                            .SetRowNum(10)
                                                                                                                                            .SetRowList(new[] { 10, 15, 20, 50 })
                                                                                                                                            .SetPager("pager")
                                                                                                                                            .SetRequestType(MvcJqGrid.Enums.RequestType.Post)
                                                                                                                                            .OnSelectRow("onRowSelected(rowid, status)")
                                                                                                                                            .OnLoadComplete("CommunitiesLoadCompleted()")
                                                                                                                                            .SetViewRecords(true)
                                                                                                                                            .OnSelectRow("onRowSelected(rowid, status)")
                                                                                                                                            .OnSelectAll("onAllRowSelected(aRowids,status)")
                                                                                                                                            .SetLoadOnce(false)
                                                                                                                                            .SetEmptyRecords("No Communities Found")
                                                                                                                                            .SetShrinkToFit(false)
                    //.OnPaging("onPaging()")
                    //.OnSortCol("onSort()")
                    )
                }
                else
                {
                    @(Html.Grid(COMMUNITIES_GRID)
                                                                                                                                                    .AddColumn(new Column("ID").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("cell.Brand").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Brand").SetWidth(146))
                                                                                                                                                    .AddColumn(new Column("cell.Market").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Market").SetWidth(146))
                                                                                                                                                    .AddColumn(new Column("cell.ISPName").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("ISP Community Label").SetWidth(146))
                                                                                                                                                    .AddColumn(new Column("cell.Name").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Community").SetWidth(146))
                                                                                                                                                    .AddColumn(new Column("cell.LotsCount").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetWidth(78).SetLabel("# of Lots"))
                                                                                                                                                    .AddColumn(ViewBag.IsISPOnly ? new Column("cell.ProspectCount").SetHidden(true) : new Column("cell.ProspectCount").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetWidth(97).SetLabel("# of Prospects"))
                                                                                                                                                    .AddColumn(new Column("cell.Admins").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Community Admin").SetWidth(146))
                                                                                                                                                    .AddColumn(new Column("cell.ISPVersion").SetHidden(true))
                                                                                                                                                    .AddColumn(ViewBag.IsISPOnly ? new Column("cell.ActivityState").SetHidden(true) : new Column("cell.ActivityState").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Sales Navigator").SetWidth(146))
                                                                                                                                                    .AddColumn(new Column("Address").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("SiteID").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("MasterPlanID").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("Locked").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("NewIsp").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("BDXId").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("HasGeoJson").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("HasSVG").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("IsGeoSVG").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("IsMasterGeoSVG").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("cell.ID").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("ISP Community ID").SetWidth(95))
                                                                                                                                                    .AddColumn(new Column("cell.Sites").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("ISP Site ID").SetWidth(75).SetCustomFormatter("siteIDFormatter"))
                                                                                                                                                    .AddColumn(new Column("cell.BDXId").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("BDX Community ID").SetWidth(125))
                                                                                                                                                    .AddColumn(new Column("cell.Type").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Type").SetWidth(130))
                                                                                                                                                    .AddColumn(new Column("cell.Status").SetSortable(true).SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Sync Status").SetWidth(130))
                                                                                                                                                    .AddColumn(new Column("cell.DWStatus").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("cell.DateDeleted").SetHidden(true))
                                                                                                                                                    .AddColumn(new Column("cell.DeletedBy").SetHidden(true))
                                                                                                                                                    .SetUrl(Url.Action("GetCommunities"))
                                                                                                                                                    .SetAutoWidth(true)
                                                                                                                                                    .SetRowNum(10)
                                                                                                                                                    .SetRowList(new[] { 10, 15, 20, 50 })
                                                                                                                                                    .SetPager("pager")
                                                                                                                                                    .SetRequestType(MvcJqGrid.Enums.RequestType.Post)
                                                                                                                                                    .OnSelectRow("onRowSelected(rowid, status)")
                                                                                                                                                    .OnLoadComplete("CommunitiesLoadCompleted()")
                                                                                                                                                    .SetViewRecords(true)
                                                                                                                                                    .OnSelectRow("onRowSelected(rowid, status)")
                                                                                                                                                    .OnSelectAll("onAllRowSelected(aRowids,status)")
                                                                                                                                                    .SetLoadOnce(false)
                                                                                                                                                    .SetEmptyRecords("No Communities Found")
                                                                                                                                                    .SetShrinkToFit(false)
                    //.OnPaging("onPaging()")
                    //.OnSortCol("onSort()")
                    )
                }
            </div><!-- .table-scroll-container -->
        </div><!-- .table-fixed-head-container -->
    </div><!-- .row -->
    <div class="row">
        <div class="span12">
            <div class="options-select">
                <div class="row-fluid options-select-head">
                    <div class="span7 options-select-left">
                        <h3>
                            <span class="h-community-name" id="CommunityName"></span><span class="h-builder-name" id="CommunityBuilderBrand"></span>
                            <div id="CommunityAddress"></div>
                        </h3>
                    </div>
                    @if (!ViewBag.IsISPOnly)
                    {
                        <div class="span5 options-select-right">

                            <div class="status-text" id="ActiveCommunity" style="display: none">
                                <div class="label label-success"><i class="icon-ok icon-white"></i></div> <span class="text-success">Active Community</span>
                            </div>
                            <div class="status-text" id="InactiveCommunity" style="display:none">
                                <div class="label label-warning"><i class="icon-exclamation-sign icon-white"></i></div> <span class="text-warning">Inactive Community</span>
                            </div>
                            <div class="status-text" id="UnlockedCommunity" style="display: none">
                                <div class="label label-success"><i class="icon-ok icon-white"></i></div> <span class="text-success">Unlocked Community</span>
                            </div>
                            <div class="status-text" id="LockedCommunity" style="display:none">
                                <div class="label label-warning"><i class="icon-exclamation-sign icon-white"></i></div> <span class="text-warning">Locked Community</span>
                            </div>
                        </div>
                    }
                </div><!-- .options-select-head -->
                <!-- Action Links-->
                <div class="row-fluid">
                    <div class="span3 nav-community-new">
                        <fieldset>
                            <legend>Upload</legend>
                            <ul class="nav-community">
                                @if ((Roles.IsUserInRole("BHIADMIN")) && (ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVG || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.PaidGeoSpatial))
                                {
                                    <li><a href='@String.Format("javascript:showModalWindow('{0}')", "#siteMapModal")'>SVG Site Plan</a></li>
                                }
                                @if ((Roles.IsUserInRole("BHIADMIN") || Roles.IsUserInRole("PARTNERSUPERADMIN") || Roles.IsUserInRole("PARTNERADMIN")))
                                {
                                    if (ViewBag.IspPartnerType != (int)CommonEnumerations.IspPartnerType.FreeGeoSpatial)
                                    {
                                        <li><a href="javascript:void(0)" data-target="#partnerUpdateFileModal" data-toggle="modal" onclick="return uploadFileButtonClick('LoadUpdateDataSubmit');">Site Plan Data</a></li>
                                    }
                                }

                                @if (ViewBag.IspPartnerType != (int)CommonEnumerations.IspPartnerType.SVG)
                                {
                                    if (Roles.IsUserInRole("BHIADMIN"))
                                    {
                                        <li><a href='@String.Format("javascript:showModalWindow('{0}')", "#GeoJsonModal")'>GeoJson Site Plan</a></li>
                                    }
                                }
                            </ul>
                        </fieldset>
                    </div>
                    <div class="span3 nav-community-new">
                        <fieldset>
                            <legend>Master Maps</legend>
                            <ul class="nav-community">
                                @if (Roles.IsUserInRole("BHIADMIN"))
                                {
                                    if (ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVG || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.PaidGeoSpatial)
                                    {
                                        <li><a data-target="#partnerUpdateMasterPlanModal" data-toggle="modal" onclick="return uploadFileButtonClick('myform');">Upload SVG Master Plan</a></li>
                                        <li><a href='@String.Format("javascript:showModalWindow('{0}')", "#associateMasterPlanModal")'>Associate SVG Master Plan</a></li>
                                    }
                                }
                                @if (ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVG || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial)
                                {
                                    <li id="MasterMapPreview" style="display:none"><a href="Javascript:void(0);" id="masterMapPreview">Preview SVG Master Plan</a></li>
                                }
                                @if (ViewBag.IspPartnerType != (int)CommonEnumerations.IspPartnerType.SVG)
                                {
                                    <li id="GeoMasterMapPreview" style="display:none"><a href="Javascript:void(0);" id="geoMasterMapPreview">Preview Geospatial Master Plan</a></li>
                                }
                                @if (ViewBag.IspPartnerType != (int)CommonEnumerations.IspPartnerType.SVG)
                                {
                                    <li id="GlobalCommunityMapPreview" style="display:none"><a href="Javascript:void(0);" id="globalCommunityMapPreview">Preview Global Community Map</a></li>
                                }
                                @if ((ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.PaidGeoSpatial || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial) && Roles.IsUserInRole("BHIADMIN") && ViewBag.PreviewPlugin)
                                {
                                    <li id="PluginMasterMapPreview" style="display:none"><a href="Javascript:void(0);" id="pluginMasterMapPreview">Preview Plugin Master Plan</a></li>
                                }
                            </ul>
                        </fieldset>
                    </div>
                    <div class="span3 nav-community-new">
                        <fieldset>
                            <legend>Preview</legend>
                            <ul class="nav-community">
                                @if (ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVG || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial)
                                {
                                    <li id="OverViewSite" style="display:none"><a href="Javascript:void(0);" id="siteOverView">SVG Site Overview</a></li>
                                    <li id="PreviewSiteMap" style="display:none"><a href="Javascript:void(0);" id="siteMapPreview">SVG Site Plan</a></li>
                                }
                                @if (ViewBag.IspPartnerType != (int)CommonEnumerations.IspPartnerType.SVG)
                                {
                                    <li id="googleMapISPPreview"><a href="Javascript:void(0);" id="googleMapsPreview">GeoSpatial Site Plan</a></li>
                                }
                                @if ((ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVG || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial) && Roles.IsUserInRole("BHIADMIN") && ViewBag.PreviewPlugin)
                                {
                                    <li id="pluginISPPreview" style="display:none"><a href="Javascript:void(0);" id="ispPluginPreview">SVG Plugin</a></li>
                                }
                                @if ((ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.PaidGeoSpatial || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial) && Roles.IsUserInRole("BHIADMIN") && ViewBag.PreviewPlugin)
                                {
                                    <li id="pluginGeospatialPreview" style="display:none"><a href="Javascript:void(0);" id="geospatialPluginPreview">Geospatial Plugin</a></li>
                                }
                            </ul>
                        </fieldset>
                    </div>
                    <div class="span3 nav-community-new">
                        <fieldset>
                            <legend>Actions</legend>
                            <ul class="nav-community">
                               @if (Roles.IsUserInRole("BHIADMIN"))
                                {
                                    <li><a href="javascript:void(0)" onclick="showEditCommunityModal()">Edit Community</a></li>
                                }
                               @if (!Roles.IsUserInRole("PARTNERREADONLY") && !Roles.IsUserInRole("LOTSTATUSEDITOR") && (ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVG || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial) && !ViewBag.IsISPOnly)
                                {
                                    if (Roles.IsUserInRole("BHIADMIN"))
                                    {
                                        <li><a id="ActivevateCommunity" style="display:none" href="Javascript:void(0);">Activate Community</a></li>
                                    }
                                    <li><a id="LockCommunity" style="display:none" href="Javascript:void(0);">Lock Community</a></li>
                                }
                               @if (Roles.IsUserInRole("BHIADMIN") || Roles.IsUserInRole("PARTNERSUPERADMIN") || Roles.IsUserInRole("PARTNERADMIN"))
                                {
                                    if (ViewBag.IspPartnerType != (int)CommonEnumerations.IspPartnerType.FreeGeoSpatial)
                                    {
                                        <li><a href="javascript:void(0)" onclick="ExportlotData()">Export Lot Data</a></li>
                                    }
                                }

                            </ul>
                        </fieldset>
                    </div>
                </div>

                <!-- Tabs Content Start-->
                <ul id="optionsSelectTabs" class="nav nav-tabs">
                    @if (ViewBag.IspPartnerType != (int)CommonEnumerations.IspPartnerType.FreeGeoSpatial)
                    {
                        <li class="active"><a class="tabChange" id="LotsTab" href="#manageLots" data-toggle="tab">Manage Lots</a></li>
                    }
                    @if (!Roles.IsUserInRole("PARTNERREADONLY") && !Roles.IsUserInRole("LOTSTATUSEDITOR"))
                    {
                        if (ViewBag.IspPartnerType != (int)CommonEnumerations.IspPartnerType.FreeGeoSpatial)
                        {
                            <li><a class="tabChange" id="ConfigTab" href="#configuration" data-toggle="tab">ISP Configuration</a></li>
                            <li><a class="tabChange" id="LayersTab" href="#manageLayers" data-toggle="tab">Manage Layers</a></li>
                        }
                        if ((!ViewBag.IsIsp) && (ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVG || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial))
                        {
                            <li><a href="#communityOverview" class="tabChange" id="OverviewTab" data-toggle="tab">Sales Navigator Community Overview</a></li>

                        }
                    }
                    @if ((!ViewBag.IsIsp) && (ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVG || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial))
                    {
                        if (!Roles.IsUserInRole("LOTSTATUSEDITOR"))
                        {
                            <li><a href="#communityDescription" class="tabChange" id="DescriptionTab" data-toggle="tab">Sales Navigator Community Description / PoI</a></li>
                        }
                    }
                    @*<li><a class="tabChange" id="ProspectsTab" href="#viewProspects" data-toggle="tab">Manage Prospects</a></li>*@
                    @if (!Roles.IsUserInRole("PARTNERREADONLY") && !Roles.IsUserInRole("LOTSTATUSEDITOR"))
                    {
                        <li><a class="tabChange" id="commCustomContentTab" href="#manageCommContent" data-toggle="tab">Community Customizable Content</a></li>
                    }
                </ul>
                <div class="tab-content">
                    @*<div class="tab-pane " id="viewProspects">
                            @(Html.Grid(PROSPECTS_GRID)
                                    .AddColumn(new Column("ID").SetHidden(true))
                                    .AddColumn(new Column("Name").SetAlign(MvcJqGrid.Enums.Align.Center).SetLabel("Prospect Name"))
                                    .AddColumn(new Column("LastDateOfVisit").SetAlign(MvcJqGrid.Enums.Align.Center).SetWidth(75).SetLabel("Date of Visit"))
                                    .AddColumn(new Column("NumberOfFavorites").SetAlign(MvcJqGrid.Enums.Align.Center).SetWidth(75).SetLabel("# of Favorites"))
                                    .AddColumn(new Column("EmailAddress").SetAlign(MvcJqGrid.Enums.Align.Center))
                                    .AddColumn(new Column("HomePhone").SetAlign(MvcJqGrid.Enums.Align.Center).SetWidth(90).SetLabel("Home Phone"))
                                    .AddColumn(new Column("MobilePhone").SetAlign(MvcJqGrid.Enums.Align.Center).SetWidth(90).SetLabel("Mobile Phone")).SetRequestType(MvcJqGrid.Enums.RequestType.Post)
                                    .SetAutoWidth(true)
                                                                 .SetSortName("Name")
                                                   .SetSortOrder(SortOrder.Asc)
                                                   .SetRowNum(15)
                                                   .SetRowList(new[] { 10, 15, 20, 50 })
                                                   .SetPager("pager")
                                                   .SetViewRecords(true))
                        </div>*@<!-- #viewProspects -->
                    @if (ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVG || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial)
                    {
                        <div class="outer tab-pane" id="communityDescription">
                            <h5>Points of Interest Categories for Sales Navigator</h5>
                            <div id="pointsOfInterest" data-bind="template: { name: 'pois-template', foreach: pointsAll }">
                            </div>
                            <script type="text/html" id="pois-template">
                                <label class="checkbox">
                                    <input type="checkbox" data-bind="attr: { value: ID }, checked: $root.pointsSelected"><span data-bind="text: Name"></span>
                                </label>
                            </script>
                            <br>
                            <div class="community-description-box" id="binding">
                                <h5> Community Description:</h5>
                                <textarea id="communitydescriptiontext" class="input-block-level" maxlength="2000"></textarea>
                                <span style="color:red">Maximum 2000 characters (</span>
                                <span id="charLeft" style="color:red">2000</span><span style="color:red"> remaining)</span>
                                <div class="span12 well update-options">
                                    <button class="btn btn-primary pull-right" id="communitysave" type="button" onclick="updateDescription();">Save Changes</button>
                                </div>
                            </div>
                        </div><!-- #communityDescription-->
                    }
                    @if (ViewBag.IspPartnerType != (int)CommonEnumerations.IspPartnerType.FreeGeoSpatial)
                    {
                        <div class="outer tab-pane active" id="manageLots">
                            <div class="row-fluid">
                                <div class="span2" id="lotsObjectBinding">
                                    <h5>Lots (<span id="lotCount" data-bind="text: count"></span>)</h5>
                                    <div class="lots-table-scroller">
                                        <table id="lotsTable" class="table table-striped table-hover table-condensed">
                                            <tbody id="lotbody" data-bind="template: { name: 'lotlistings-template', foreach: lots }"></tbody>
                                        </table>
                                        <script type="text/html" id="lotlistings-template">
                                            <tr data-bind="attr: { id: ID }">
                                                <td>
                                                    <span data-bind="text: ExternalReference"></span>
                                                </td>
                                            </tr>
                                        </script>
                                    </div><!-- .lots-table-scroller -->
                                    <div class="ctrl-text-div">
                                        Ctrl-click to select multiple.
                                    </div>
                                    <div class="select-all-div">
                                        <span>

                                            <a href="javascript:void(0);">Select All</a>
                                        </span>
                                    </div>
                                    <div class="deselect-all-div">
                                        <span><a href="javascript:void(0);">Deselect All</a></span>
                                    </div>
                                </div><!-- .span2 -->
                                <div class="span10 lot-selected" id="lotStatusBinding">

                                    @if (Roles.IsUserInRole("BHIADMIN"))
                                    {
                                        <div class="delete-all-lots-div" data-bind="style:{visibility: count()>0 ?'visible':'hidden'}">
                                            <a href="#myModal" role="button" data-toggle="modal" id="delete-lots-info">
                                                <img src="/Content/images/Delete-26.png" style="width: 15px; height: 18px;" /><span> Delete All Lots Info</span>
                                            </a>
                                        </div>
                                    }
                                    @if (ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVG || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial)
                                    {
                                        <div class="lot-img">
                                            <div id="SitemapPreviewUnavailable" style="display:none; text-align:center; padding:160px;font-size:19px;font-family:inherit;">No Preview Available</div>
                                            <iframe style="display:none; width:630px; height:342px;" id="SitemapPreviewAvailable" name="myframe"></iframe>
                                        </div>
                                    }
                                    <div class="edit-multiple-lots-div" data-bind="visible: LotIDs().length>1"><span>Editing multiple lots:</span> Values for these fields will be replaced on <span id="selected-lots-text" data-bind="text: LotIDs().length"></span> selected lots.</div>
                                    <div class="lot-options">
                                        <div class="row-fluid">
                                            <div class="span8 form-inline">
                                                <h5><label data-bind="visible: internalReference() !== undefined"> Lot ID:</label>   <label id="lotId" data-bind="text: internalReference,visible: internalReference() !== undefined"></label></h5>
                                                <div class="control-group">
                                                    <label for="lotExternalReference" data-bind="visible: externalReference() !== undefined">External Reference</label>
                                                    <input type="text" id="externalReference" name="externalReference" maxlength="50" size="25" data-bind="value: externalReference, visible: externalReference() !== undefined" />
                                                </div>
                                                <div class="control-group">
                                                    <label for="lotStatus">Lot Status</label>
                                                    <select id="statusList" data-bind="options: status,
                                                   optionsText: 'Name',
                                                   value:selectedValueId,
                                                   optionsValue: 'ID'"></select>
                                                </div>
                                                <div class="control-group Amenity-checkbox">
                                                    <label for="isamenity">Is this an Amenity?</label>
                                                    <input type="checkbox" data-bind="checked: isAmenity">
                                                </div>
                                                <div class="control-group Amenity-checkbox">
                                                    <label for="lotDisplay" data-bind="visible: displayName() !== undefined">Display Name</label>
                                                    <input type="text" id="displayName" name="displayName" maxlength="50" size="25" data-bind="value: displayName, visible: displayName() !== undefined" />
                                                    <div class="tool-tip" data-bind="visible: displayName() !== undefined">
                                                        What's this?
                                                        <span class="tooltiptext">This will be displayed as Lot/Amenity name in ISP overview and preview pages</span>
                                                    </div>

                                                </div>
                                                <div class="control-group">
                                                    <label for="lotSize" id="size-heading-label">Lot Size</label>
                                                    <input type="text" id="lotSize" name="lotSize" size="25" maxlength="100" data-bind="value: size" />
                                                </div>
                                                <div class="control-group lotStatusEditor">
                                                    <label for="lotPremiumPrice" id="pp-heading-label"> Lot Premium Price</label>
                                                    <input type="text" id="lotPremiumPrice" name="premiumPrice" size="25" maxlength="10" data-bind="value: premiumPrice,event:{keydown:manualValidation.onlyInteger}" />
                                                    <span class="validationMessage" style="display:none">Price must be a valid whole number.</span>
                                                </div>
                                                <div class="control-group lotStatusEditor reservationFee">
                                                    <label for="lotReservationFee"> Reservation Fee</label>
                                                    <input type="text" id="lotReservationFee" name="reservationFee" size="25" maxlength="10" data-bind="value: reservationFee,event:{keydown:manualValidation.onlyIntegerReservation}" />
                                                    <div class="tool-tip" data-bind="visible: reservationFee() !== undefined">
                                                        What's this?
                                                        <span class="tooltiptext">Amount in Dollars (with or without decimal) to charge for Lot Reservation. No Value suppresses the financial transaction on a specific lot when a Payment Platform Account is selected.</span>
                                                    </div>
                                                    <span class="feevalidationMessage" style="display:none">Reservation Fee must be a valid number upto two decimal places.</span>
                                                    <span class="feevalidationMessageNew" style="display:none">Reservation Fee must be greater than $1.</span>
                                                </div>
                                                <div class="control-group">
                                                    <label for="block" id="block-heading-label">Block</label>
                                                    <input type="text" id="lotBlock" name="block" size="25" maxlength="100" data-bind="value: block" />
                                                </div>
                                                <div class="control-group">
                                                    <label for="phase" id="phase-heading-label">Phase</label>
                                                    <input type="text" id="lotPhase" name="phase" size="25" maxlength="100" data-bind="value: phase" />
                                                </div>
                                                <div class="control-group">
                                                    <label for="elevation" id="elevation-heading-label">Elevation</label>
                                                    <input type="text" id="lotElevation" name="elevation" size="25" maxlength="100" data-bind="value: elevation" />
                                                </div>
                                                <div class="control-group">
                                                    <label for="swing" id="swing-heading-label">Swing</label>
                                                    <input type="text" id="lotSwing" name="swing" size="25" maxlength="100" data-bind="value: swing" />
                                                </div>

                                                <div class="control-group">
                                                    <label for="description" data-bind="visible: description() !== undefined ">Description</label>
                                                    <textarea type="text" name="description" id="lotDescription" rows="4" maxlength="250" data-bind="value: description, visible: description() !== undefined "></textarea>
                                                </div>
                                                <div class="control-group">
                                                    <label for="address" data-bind="visible: address() !== undefined " id="address-heading-label">Address</label>
                                                    <textarea id="lotAddress" name="address" rows="3" maxlength="250" data-bind="value: address, visible: address() !== undefined "></textarea>
                                                </div>
                                            </div>

                                            <div class="span10 form-inline section_new lotStatusEditor" style="display:none; border:1px solid #00b0f0; position: relative; padding-top: 20px;">
                                                <button id="isp-add-cta-btn" class="btn btn-primary pull-right" style="position:absolute;right: -95px;top: -2px;outline:none;" data-bind="visible: externalReference() !== undefined">Add CTA</button>
                                                <div class="control-group">
                                                    <label for="contact" style="width:36%;">
                                                        Contact URL <br />
                                                        <span style="font-size:11px;">(If empty, shows Request Info Form)</span>
                                                    </label>
                                                    <input type="text" id="contact" name="contact" data-bind="value: contactLink" size="25" maxlength="500" style="vertical-align: top; width:60%;" />
                                                </div>
                                                <div class="control-group">
                                                    <label for="description" style="width:36%;">Contact Button Text</label>
                                                    <input type="text" name="buttonText" id="buttonText" data-bind="value: buttonText" maxlength="100" style="width:60%;" />
                                                </div>
                                            </div>
                                            <div id="isp-cta-div" data-bind="visible: externalReference() !== undefined">
                                            </div>

                                            <div class="span10 form-inline section_new lotStatusEditor" style="display:none; border:1px solid #00b050;" data-bind="visible: imagePath() !== undefined">
                                                <div class="control-group">
                                                    <label for="image" style="vertical-align:middle;">Hot Spot Image</label>
                                                    <span class="fileContainer btn-succes_image">
                                                        <i class="icon-upload icon-white"></i>
                                                        Hot Spot Image
                                                        <input type="file" id="lotImage" onchange="LotImageUploader()" accept="image/gif,image/jpeg" class="lot_image">
                                                    </span>
                                                    <input type="hidden" id="lotImagePath" data-bind="value: imagePath" />
                                                    <p style=" margin:10px 0 0 0">
                                                        Note: Image size should not be more than 500KB.
                                                    </p>
                                                    <div class="uploaded-image">
                                                        <span class="image_uploaded" style="display:none"><img id="lot-image" src="" /></span>
                                                        <div class="image-details breakAll" id="loader" style="display:none">
                                                            <span class="qq-upload-spinner" id="lot-image-loader" style="display: inline-block;"></span>
                                                            <span id="lot-image-name" class="lot_image_uploaded">  </span>
                                                        </div>
                                                    </div>
                                                    <div class="lotimageremove" style="display:none"> <button id="imgDelete">Delete</button></div>
                                                </div>
                                                <div class="control-group">
                                                    <label for="videoURL">Video URL</label>
                                                    <input type="text" name="videoURL" id="lotVideoURL" data-bind="value: videoURL" maxlength="500" />
                                                </div>
                                            </div>

                                            <div class="span10 form-inline section_new lotStatusEditor" style="display:none; border:1px solid #ffc000;" data-bind="visible: lotDescription() !== undefined">
                                                <div class="control-group">
                                                    <label for="description">Hot Spot Text</label>
                                                    <textarea type="text" name="descriptionEditor" id="descriptionEditor" data-bind="value: lotDescription" rows="2" maxlength="4000" style="height:50px;"></textarea>
                                                </div>
                                            </div>
                                        </div><!-- .row-fluid -->
                                        <br>
                                        <div class="span10 plan-spec">
                                            <ul id="optionsSelectTabs" class="nav nav-tabs">
                                                <li class="active"><a id="plansTab" href="#managePlans" data-toggle="tab">Plans</a></li>
                                                <li><a class="tabChange" id="specsTab" href="#manageSpecs" data-toggle="tab">Specs</a></li>
                                            </ul>
                                            <label style="width:100%;font-size: 12px;" class="multi-hide">Note: Home's plan/spec price will display by default. However, if a <strong>Home+Lot Price</strong> value is entered below, it will override the home's Price for this lot.</label>
                                            <div class="tab-content" style="padding-bottom:0px; border: 1px solid silver;">
                                                <div class="plans-scrollable tab-pane active" id="managePlans">
                                                    <table id="plansTable" class="table table-striped table-hover table-condensed">
                                                        <tr id="table-header-plans" class="hide">
                                                            <td class="table-header"></td>
                                                            <td class="table-header">Plan</td>
                                                            <td class="table-header lotStatusEditor multi-hide">Price</td>
                                                            <td class="table-header lotStatusEditor">Displayed Elevation</td>
                                                            <td class="table-header lotStatusEditor" style="width:60px;">Listing ID</td>
                                                            <td class="table-header lotStatusEditor" style="width:80px;">BDX Plan ID</td>
                                                            <td class="table-header lotStatusEditor delete-listing-header" style="width:40px; display: none;">Delete Listing</td>
                                                        </tr>
                                                        <tbody id="listings" data-bind="template: { name: 'listings-template', foreach: plans }"></tbody>
                                                        <script type="text/html" id="listings-template">
                                                        <tr>
                                                            <td class="td-check"><input type="checkbox" class="listing-checkbox" data-bind="attr: { value: ID }, checked: $root.selectedPlans" onchange="toggleElevationButton(this);"></td>
                                                            <td>
                                                                <span style="cursor:pointer;" class="tooltipBootstr ap" data-toggle="tooltip" data-placement="right"
                                                                      data-bind="text: Name, attr: { title: ToolTip }"></span><br />
                                                                <span>Price from </span><span style="cursor:pointer;" class="tooltipBootstr ap" data-toggle="tooltip" data-placement="right"
                                                                                              data-bind="text: formatCost(BasePrice), attr: { title: formatCost(BasePrice) }"></span>
                                                            </td>
                                                            <td class="lotStatusEditor multi-hide">
                                                                <input type="text" placeholder="Home+Lot Price" maxlength="8" data-bind="value:TotalPrice" />
                                                            </td>
                                                            <td class="lotStatusEditor">
                                                                <input type="button" class="btn btn-primary selectElevation" value="Select Elevation Image" data-bind="attr: { id: 'elevationbutton_' + ID }" />
                                                                <label data-bind="attr:{id: 'elevationImageId_' + ID}" style="width:190px; font-size: 13px;"></label>
                                                                <img data-bind="attr:{id: 'elevationimage_' + ID}" style="width:190px;cursor:pointer;" class="selectElevation" data-image-id="0">
                                                                <label data-bind="attr:{id: 'elevationTitle_' + ID}" style="width:190px;"></label>
                                                            </td>
                                                            <td class="lotStatusEditor" data-bind="text: ID" style="width:60px;"></td>
                                                            <td class="lotStatusEditor" data-bind="text: BDXID" style="width:80px;"></td>
                                                            <td class="td-check delete-listing-td" style="display:none;"><input type="checkbox" class="delete-listing-checkbox" data-bind="attr: { value: ID }"></td>
                                                        </tr>
                                                        </script>
                                                    </table>
                                                </div>
                                                <div class="plans-scrollable tab-pane" id="manageSpecs">
                                                    <table id="specsTable" class="table table-striped table-hover table-condensed">
                                                        <tr id="table-header-spec" class="hide">
                                                            <td class="table-header"></td>
                                                            <td class="table-header">Spec</td>
                                                            <td class="table-header" style="min-width:19%;">Address</td>
                                                            <td class="table-header lotStatusEditor multi-hide" width="130">Price</td>
                                                            <td class="table-header lotStatusEditor">Displayed Elevation</td>
                                                            <td class="table-header lotStatusEditor" style="width:60px;">Listing ID</td>
                                                            <td class="table-header lotStatusEditor" style="width:80px;">BDX Spec ID</td>
                                                            <td class="table-header lotStatusEditor delete-listing-header" style="width:40px; display: none;">Delete Listing</td>
                                                        </tr>
                                                        <tbody id="spec-listings" data-bind="template: { name: 'spec-listings-template', foreach: specs }">
                                                            <tr id="model-home-header">
                                                                <td style="background-color:white;"></td>
                                                                <td colspan="6" style="font-weight:bold; background-color:white;">Model Homes</td>
                                                            </tr>
                                                        </tbody>
                                                        <script type="text/html" id="spec-listings-template">
                                                        <tr>
                                                            <td class="td-check"><input type="checkbox" class="listing-checkbox" data-bind="attr: { value: ID }, checked: $root.selectedPlans" onchange="toggleElevationButton(this);"></td>
                                                            <td>
                                                                <span style="cursor:pointer;" class="tooltipBootstr ap" data-toggle="tooltip" data-placement="right"
                                                                      data-bind="text: Name, attr: { title: ToolTip }"></span><br />
                                                                <span>Price from </span><span style="cursor:pointer;" class="tooltipBootstr ap" data-toggle="tooltip" data-placement="right"
                                                                                              data-bind="text: formatCost(BasePrice), attr: { title: formatCost(BasePrice) }"></span>
                                                            </td>
                                                            <td>
                                                                <span data-bind="text: Address"></span>
                                                            </td>
                                                            <td class="lotStatusEditor multi-hide">
                                                                <input type="text" style="width:90%;" placeholder="Home+Lot Price" maxlength="8" data-bind="value:TotalPrice" />
                                                            </td>
                                                            <td class="lotStatusEditor">
                                                                <input type="button" class="btn btn-primary selectElevation" value="Select Elevation Image" data-bind="attr: { id: 'elevationbutton_' + ID }" />
                                                                <label data-bind="attr:{id: 'elevationImageId_' + ID}" style="width: 190px; font-size: 13px;"></label>
                                                                <img data-bind="attr:{id: 'elevationimage_' + ID}" style="width:190px;cursor:pointer;" class="selectElevation" data-image-id="0">
                                                                <label data-bind="attr:{id: 'elevationTitle_' + ID}" style="width:190px;"></label>
                                                            </td>
                                                            <td class="lotStatusEditor" data-bind="text: ID" style="width:60px;"></td>
                                                            <td class="lotStatusEditor" data-bind="text: BDXID" style="width:80px;"></td>
                                                            <td class="td-check delete-listing-td" style="display:none;"><input type="checkbox" class="delete-listing-checkbox" data-bind="attr: { value: ID }"></td>
                                                        </tr>
                                                        </script>
                                                        <tbody id="model-listings" data-bind="template: { name: 'model-listings-template', foreach: models }">
                                                        </tbody>
                                                        <script type="text/html" id="model-listings-template">
                                                        <tr>
                                                            <td class="td-check"><input type="checkbox" class="listing-checkbox" data-bind="attr: { value: ID }, checked: $root.selectedPlans" onchange="toggleElevationButton(this);"></td>
                                                            <td>
                                                                <span style="cursor:pointer;" class="tooltipBootstr ap" data-toggle="tooltip" data-placement="right"
                                                                      data-bind="text: Name, attr: { title: ToolTip }"></span><br />
                                                                <span>Price from </span><span style="cursor:pointer;" class="tooltipBootstr ap" data-toggle="tooltip" data-placement="right"
                                                                                              data-bind="text: formatCost(BasePrice), attr: { title: formatCost(BasePrice) }"></span>
                                                            </td>
                                                            <td>
                                                                <span data-bind="text: Address"></span>
                                                            </td>
                                                            <td class="lotStatusEditor multi-hide">
                                                                <input type="text" style="width:90%;" placeholder="Home+Lot Price" maxlength="8" data-bind="value:TotalPrice" />
                                                            </td>
                                                            <td class="lotStatusEditor">
                                                                <input type="button" class="btn btn-primary selectElevation" value="Select Elevation Image" data-bind="attr: { id: 'elevationbutton_' + ID }" />
                                                                <label data-bind="attr:{id: 'elevationImageId_' + ID}" style="width: 190px; font-size: 13px;"></label>
                                                                <img data-bind="attr:{id: 'elevationimage_' + ID}" style="width:190px;cursor:pointer;" class="selectElevation" data-image-id="0">
                                                                <label data-bind="attr:{id: 'elevationTitle_' + ID}" style="width:190px;"></label>
                                                            </td>
                                                            <td class="lotStatusEditor" data-bind="text: ID" style="width:60px;"></td>
                                                            <td class="lotStatusEditor" data-bind="text: BDXID" style="width:80px;"></td>
                                                            <td class="td-check delete-listing-td" style="display:none;"><input type="checkbox" class="delete-listing-checkbox" data-bind="attr: { value: ID }"></td>
                                                        </tr>
                                                        </script>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div><!-- .span10 -->
                            </div><!-- .row-fluid -->
                            <div class="row-fluid">
                                <div class="span11 well update-options">
                                    <div class="span2" style="margin-top:6px;" id="lot-delete-bind" data-bind="visible:LotIDs().length>0">
                                        @if (!Roles.IsUserInRole("PARTNERREADONLY") && !Roles.IsUserInRole("LOTSTATUSEDITOR"))
                                        {
                                            <a href="#myModal" role="button" data-toggle="modal" id="delete-selected-lots">
                                                <img src="/Content/images/Delete-26.png" style=" width 15px;
                                             height 18px;" /><span class="delete-lots-div">Delete Lots</span>
                                            </a>
                                        }
                                    </div>
                                    <button class="btn btn-primary pull-right" type="button" onclick="saveLotInfo()">Save Changes</button>

                                    <span class="label pull-right save-result"></span>
                                </div>
                            </div><!-- .row-fluid -->
                        </div><!-- #manageLots -->

                        <div class="outer tab-pane" id="manageLayers">
                            <div class="row-fluid" id="manageLayerDiv" style="display:none;">
                                <!-- table head start-->
                                <div class="flex manage-layers layerhead">
                                    <div class="flex flex-column cell-width">
                                        Lot Number
                                    </div>
                                    <div class="cell-width block-header">
                                        <div class="datacell">Block Layer</div>
                                        <div class="datacell">
                                            <a class="column-all" data-class="column-block">all</a> / <a class="column-none" data-class="column-block">none</a>
                                        </div>
                                    </div>
                                    <div class="cell-width">
                                        <div class="datacell">Footprint</div>
                                        <div class="datacell">
                                            <a class="column-all" data-class="column-footprint">all</a> / <a class="column-none" data-class="column-footprint">none</a>
                                        </div>
                                    </div>
                                    <div class="cell-width">
                                        <div class="datacell">Number</div>
                                        <div class="datacell">
                                            <a class="column-all" data-class="column-lotnumber">all</a> / <a class="column-none" data-class="column-lotnumber">none</a>
                                        </div>
                                    </div>
                                    <div class="cell-width">
                                        <div class="datacell">Plan/Elevation</div>
                                        <div class="datacell">
                                            <a class="column-all" data-class="column-planname">all</a> / <a class="column-none" data-class="column-planname">none</a>
                                        </div>
                                    </div>
                                    <div class="cell-width" style="width:40%;">
                                        All/None
                                    </div>
                                </div>
                                <!-- table head end-->
                                <div id="layer-data-div">

                                </div>
                            </div>
                            <div id="error-nolayers" style="display:none;">
                                No Layers Available to Display
                            </div>
                            <div class="row-fluid" id="save-layers">
                                <div class="span12 well update-options">
                                    <button class="btn btn-primary pull-right" type="button" onclick="saveLayers();">Save Changes</button>
                                </div>
                            </div>
                        </div><!-- #manageLayerss -->

                    }
                    @if (!Roles.IsUserInRole("PARTNERREADONLY") && !Roles.IsUserInRole("LOTSTATUSEDITOR"))
                    {
                        if (ViewBag.IspPartnerType != (int)CommonEnumerations.IspPartnerType.FreeGeoSpatial)
                        {
                            <div class="outer tab-pane" id="configuration">
                                <div class="row-fluid">
                                    <div id="isp-config-span-head">

                                        <h5>
                                            Lot Status Color Scheme
                                            <div style="display:inline;margin-left:72px;">Suppress Price</div>
                                            @if (Roles.IsUserInRole("BHIADMIN") && ViewBag.showDreamweaver)
                                            {
                                                <div id="includeDWDiv" style="display:inline;margin-left:4%;">Include DW</div>}
                                            @if ((Roles.IsUserInRole("BHIADMIN") || Roles.IsUserInRole("PARTNERSUPERADMIN") || Roles.IsUserInRole("PARTNERADMIN")) && (ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVG || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.PaidGeoSpatial) && ViewBag.HoldALotEnabled)
                                            {
                                                <div style="display:inline;margin-left:4%;">Hold a Lot</div>
                                                <div style="display:inline;margin-left:3%;">Hold a Lot Button Text</div>
                                            }
                                        </h5>
                                        <div id="lotColorScheme" style="height: 358px; overflow-y: scroll; resize: vertical;" data-bind="template: { name: 'configuration-template', foreach: communityConfiguration }, sortableList: communityConfiguration">
                                        </div>
                                        <script type="text/html" id="configuration-template">
                                            <!-- ko if: Code.indexOf("SPSTSCLR") !== -1 -->
                                            <div class="color-selection clearfix" data-bind="attr: { id: ID, 'configid': ConfigurationID }" style="cursor:move;min-height: 40px; display: flex; align-items: center;">
                                                <input type="checkbox" style="float: left; margin: 0 0 0 5px;" data-bind="checked: Status,event:{change:changelotStatus.event}" />
                                                <div class="colorpicker-input" style="margin-left: 11px; cursor:pointer;">
                                                    <div></div>
                                                </div>
                                                <input class="colorpicker-text" type="text" data-bind="attr: { id: HiddenId }, value:Value" />
                                                <div class="colorpicker-label">
                                                    <label data-bind="text: Name" style="display:inline; cursor: move;"></label>
                                                    <!-- ko if: partnerID != 0 -->
                                                    <img src="/Content/images/edit-icon.png" width="18" style="margin: -6px 0 0 6px; cursor:pointer;" onclick="EditLotStatusName(this)" />
                                                    <!-- /ko -->
                                                </div>
                                                <input type="checkbox" class="holdLot" style="margin: 0 6px 0 0;" data-bind="checked: SuppressPriceStatus" />
                                                @if (Roles.IsUserInRole("BHIADMIN") && ViewBag.showDreamweaver)
                                                {
                                                    <input id="includeDW" type="checkbox" style="margin: 0" data-bind="checked: IncludeDWStatus,enable: Status" class="dw-include includeDWclass @(Roles.IsUserInRole("BHIADMIN") && (ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVG || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.PaidGeoSpatial) && ViewBag.HoldALotEnabled?"":"dwinclude1")" />
                                                }
                                                @if ((Roles.IsUserInRole("BHIADMIN") || Roles.IsUserInRole("PARTNERSUPERADMIN") || Roles.IsUserInRole("PARTNERADMIN")) && (ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVG || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.PaidGeoSpatial) && ViewBag.HoldALotEnabled)
                                                {
                                                    <input type="checkbox" class="holdLot" style="margin: 0 6px 0 0;" data-bind="checked: HoldALotStatus" />
                                                }
                                                @if ((Roles.IsUserInRole("BHIADMIN") || Roles.IsUserInRole("PARTNERSUPERADMIN") || Roles.IsUserInRole("PARTNERADMIN")) && (ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVG || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.PaidGeoSpatial) && ViewBag.HoldALotEnabled)
                                                {
                                                    <input type="text" class="holdLotText" style="margin: 0 6px 0 0;" onkeydown="selectALlKeyDown(event)" maxlength="50" data-bind="value: HoldALotButtonText, visible: HoldALotStatus() !== false, attr:{placeholder:HoldALotButtonTextPlaceHolder}" /> @*style = "float:right; margin: 7px 6px 3px 0;"*@
                                                }
                                                <!-- ko if: partnerID != 0 -->
                                                <input type="hidden" class="configId" data-bind="attr: { id:ConfigurationID }" />

                                                <button value="Delete" type="button" class="color-selection-delete del-bt" onclick="deleteLotStatusColorScheme(this)"><i class="icon-trash"></i></button>
                                                <!-- /ko -->
                                            </div>
                                            <!-- /ko -->
                                        </script>
                                    </div>


                                </div><!-- .row-fluid -->
                                <div class="row-fluid">
                                    <form action="Javascript:Void(0);">
                                        <fieldset>
                                            <div style="display: flex; justify-content: space-around; margin-top: 30px;">
                                                <div style="display: flex; align-items: center; gap: 15px;">
                                                    <h5>New Lot Status Name:</h5>
                                                    <input type="text" id="newLotStatusText" style="margin:0" placeholder="Type new lot status name…" maxlength="41" />
                                                </div>
                                                <div style="display: flex; align-items: center;gap: 15px;">
                                                    <h5>New Lot Status Color:</h5>
                                                    <div class="color-selection clearfix">
                                                        <div class="colorpicker-input">
                                                            <div></div>
                                                        </div>
                                                        <input class="colorpicker-text" type="text" id="newLotStatusColor" value="#000000" />
                                                    </div>
                                                </div>
                                                <button class="btn btn-primary pull-left" style="height: max-content; width: max-content;" type="button" onclick="newLotStatus()">Add New Lot Status</button>
                                            </div>
                                        </fieldset>
                                    </form>

                                </div>
                                <div class="row-fluid">
                                    <div style="border: 1px solid #e2e2e2; padding: 10px; margin-bottom: 20px;">
                                        <h4 style="margin-top: 0;">General Configuration</h4>
                                        <div style="display:grid; grid-template-columns: repeat(3, 1fr); gap: 30px; padding: 0 10px 0 30px;">
                                            <div>
                                                <div class="span12" id="communityMapLabelDiv" style="clear:both; margin:0;">
                                                    <h5>Community Map Label:</h5>
                                                    <div style="display: flex;position: relative;">
                                                        <label class="checkbox">
                                                            <input type="checkbox" id="commLabelCheckbox" style="margin-top: 9px;" onclick="ToggleCommLabel()" />
                                                        </label>
                                                        <input type="text" id="communityMapLabel" placeholder="" maxlength="200" style="width: 190px" />
                                                        <div class="tool-tip" style="right: 0;"><img src="~/Content/images/help-icon.png" style="width:16px;margin-top: -5px;" /><span class="tooltiptext" style="bottom: 150%; margin-left:-145px;">When checked, the text in this field will override the Community Label.</span></div>
                                                    </div>
                                                </div>
                                                @if (ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVG || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial)
                                                {
                                                    <div class="span12" id="homesiteFilter" style="clear:both; margin:0;">
                                                        <h5>Show Homesite Status Filter</h5>
                                                        <div class="radio-div">
                                                            <input type="radio" name="showHomesiteFilter" value="showFilter" id="showFilter" /><span>Yes</span>
                                                            <input type="radio" name="showHomesiteFilter" value="hideFilter" id="hideFilter" /><span>No</span>
                                                        </div>
                                                    </div>
                                                }
                                                <div class="span12" id="enableUnreleased" style="clear:both; margin:0;">
                                                    <h5>Enable Hover and Click for Unreleased</h5>
                                                    <div class="radio-div">
                                                        <input type="radio" name="enableUnreleasedLot" value="enableClickHover" id="enableClickHover" /><span>Yes</span>
                                                        <input type="radio" name="enableUnreleasedLot" value="disableClickHover" id="disableClickHover" /><span>No</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div>
                                                <div class="span12" id="suppressPricing" style="clear:both; margin:0;">
                                                    <h5>Suppress All Pricing on Geospatial and ISP 2.0 Maps</h5>
                                                    <div>
                                                        <label class="checkbox">
                                                            <input type="checkbox" id="suppressPricingCheckbox" />
                                                            Suppress Pricing
                                                        </label>
                                                    </div>
                                                </div>
                                                @if (Roles.IsUserInRole("BHIADMIN") || Roles.IsUserInRole("PARTNERSUPERADMIN") || Roles.IsUserInRole("PARTNERADMIN"))
                                                {
                                                    if (ViewBag.DisplayAvailablePlans)
                                                    {
                                                        <div class="span12" id="enableCommAvailablePlans" style="clear:both; margin:0;">
                                                            <h5>Display Available Plans in Pop-up <div class="tool-tip" style="margin: 2px 0 0 8px;"><img src="~/Content/images/help-icon.png" style="width:16px;margin-top: -5px;" /><span class="tooltiptext" style="bottom: 150%; margin-left:-145px; font-size: 12px; font-weight: normal;">Show All Plans list in Popup if no Plan is assigned to a Homesite.</span></div></h5>
                                                            <div class="radio-div">
                                                                <input type="radio" name="comm-availablePlans" value="true" id="enableAvailablePlans" /><span>Yes</span>
                                                                <input type="radio" name="comm-availablePlans" value="false" id="disableAvailablePlans" /><span>No</span>
                                                            </div>
                                                            <div style="margin-top: 5px;">
                                                                Hide Assigned Plans: <input type="checkbox" id="hideAllPlansCheckbox" style="margin: 1px 0px 3px 3px;" />
                                                            </div>
                                                        </div>
                                                    }
                                                    if (ViewBag.DisplayAvailableSpecs)
                                                    {
                                                        <div class="span12" style="clear:both; margin:0;">
                                                            <h5>Display Available Specs in Pop-up <div class="tool-tip" style="margin: 2px 0 0 8px;"><img src="~/Content/images/help-icon.png" style="width:16px;margin-top: -5px;" /><span class="tooltiptext" style="bottom: 150%; margin-left:-145px; font-size: 12px; font-weight: normal;">Show All Specs list in Popup if no Spec is assigned to a Homesite.</span></div></h5>
                                                            <div class="radio-div">
                                                                <input type="radio" name="comm-availableSpecs" value="true" id="enableAvailableSpecs" /><span>Yes</span>
                                                                <input type="radio" name="comm-availableSpecs" value="false" id="disableAvailableSpecs" /><span>No</span>
                                                            </div>
                                                            <div style="margin-top: 5px;">
                                                                Hide Assigned Specs: <input type="checkbox" id="hideAllSpecsCheckbox" style="margin: 1px 0px 3px 3px;" />
                                                            </div>
                                                        </div>
                                                    }
                                                }
                                            </div>
                                            <div>
                                                <div class="span12" id="suppressLotStatus" style="clear:both; margin:0;">
                                                    <h5>Suppress Lot Status on Pop-up <div class="tool-tip" style="margin: 2px 0 0 8px;"><img src="~/Content/images/help-icon.png" style="width:16px;margin-top: -5px;" /><span class="tooltiptext" style="bottom: 150%; margin-left:-145px; font-size: 12px; font-weight: normal;">When enabled, this option will suppress the '/ LotStatus' value on the popups.</span></div></h5>
                                                    <div class="radio-div">
                                                        <input type="radio" name="comm-suppressLotStatus" value="true" id="enableSuppressLotStatus" /><span>Yes</span>
                                                        <input type="radio" name="comm-suppressLotStatus" value="false" id="disableSuppressLotStatus" /><span>No</span>
                                                    </div>
                                                </div>
                                                @if (ViewBag.DisplayLotListEnabled)
                                                {
                                                    <div class="span12" id="lotListPlans" style="clear:both; margin:0;">
                                                        <h5>Display Lot List on Plans <div class="tool-tip" style="margin: 2px 0 0 8px;"><img src="~/Content/images/help-icon.png" style="width:16px;margin-top: -5px;" /><span class="tooltiptext" style="bottom: 150%; margin-left:-145px; font-size: 12px; font-weight: normal;">When enabled, this will display all available lots for each plan in the right rail.</span></div></h5>
                                                        <div class="radio-div">
                                                            <input type="radio" name="comm-lotListPlans" value="true" id="enableLotListPlans" /><span>Yes</span>
                                                            <input type="radio" name="comm-lotListPlans" value="false" id="disableLotListPlans" /><span>No</span>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    @if (ViewBag.AddModelHomesBanner || ViewBag.ReplaceKeyIcon || (Roles.IsUserInRole("BHIADMIN") && ViewBag.HoldALotEnabled))
                                    {
                                        <div style="border: 1px solid #e2e2e2; padding: 10px; margin-bottom: 20px;">
                                            <h4 style="margin-top: 0;">Feature Configuration</h4>
                                            <div style="display:grid; grid-template-columns: repeat(3, 1fr); gap: 30px; padding: 0 10px 0 30px;">

                                                @if (ViewBag.AddModelHomesBanner)
                                                {
                                                    <div>
                                                        <div class="span12" id="modelTextDiv" style="clear:both; margin:0;">
                                                            <h5>Model Text (character limit 20):</h5>
                                                            <div>
                                                                <input type="text" id="modelTextTitle" placeholder="" maxlength="20" />
                                                            </div>
                                                        </div>
                                                        <div class="span12" style="clear:both; margin:0;">
                                                            <label style="font-weight:bold; display:contents;">Set background color:</label>
                                                            <div class="color-selection clearfix">
                                                                <div class="colorpicker-input" id="modelTextBgColor" style="cursor:pointer;">
                                                                    <div></div>
                                                                </div>
                                                                <div style="margin-top: 8px; padding-left: 50px; color: #0073e6; cursor: pointer; width:35px;" id="resetModelTextBackgroundColor">Reset</div>
                                                                <input class="colorpicker-text" type="text" id="modelTextBackgroundColor" value="#808080" @*data-bind="value:LotOutlineColor"*@ />
                                                            </div>
                                                        </div>
                                                        <div class="span12" style="clear:both; margin:0;">
                                                            <label style="font-weight:bold; display:contents;">Set font color:</label>
                                                            <div class="color-selection clearfix">
                                                                <div class="colorpicker-input" id="modelTextFontColorSelector" style="cursor:pointer;">
                                                                    <div></div>
                                                                </div>
                                                                <div style="margin-top: 8px; padding-left: 50px; color: #0073e6; cursor: pointer; width:35px;" id="resetModelTextFontColor">Reset</div>
                                                                <input class="colorpicker-text" type="text" id="modelTextFontColor" value="#ffffff" @*data-bind="value:LotOutlineColor"*@ />
                                                            </div>
                                                        </div>
                                                        <div class="span12" style="clear:both; margin:0;">
                                                            <h5>Set Model Homes banner opacity</h5>
                                                            <div>
                                                                <select id="modelTextOpacity" style="width:73px; outline:none;">
                                                                    @for (var i = 0; i <= 100; i += 10)
                                                                    {
                                                                        <option value="@i">@i%</option>
                                                                    }
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                                @if (ViewBag.ReplaceKeyIcon)
                                                {
                                                    <div>
                                                        <div class="span12" style="clear:both; margin:0;">
                                                            <h5>Spec Text (character limit 20):</h5>
                                                            <div>
                                                                <input type="text" id="specTextTitle" placeholder="" maxlength="20" />
                                                            </div>
                                                        </div>
                                                        <div class="span12" style="clear:both; margin:0;">
                                                            <label style="font-weight:bold; display:contents;">Spec Banner Background Color:</label>
                                                            <div class="color-selection clearfix">
                                                                <div class="colorpicker-input" id="specTextBgColor" style="cursor:pointer;">
                                                                    <div></div>
                                                                </div>
                                                                <div style="margin-top: 8px; padding-left: 50px; color: #0073e6; cursor: pointer; width:35px;" id="resetSpecTextBackgroundColor">Reset</div>
                                                                <input class="colorpicker-text" type="text" id="specTextBackgroundColor" value="#808080" @*data-bind="value:LotOutlineColor"*@ />
                                                            </div>
                                                        </div>
                                                        <div class="span12" style="clear:both; margin:0;">
                                                            <label style="font-weight:bold; display:contents;">Spec Banner Font Color:</label>
                                                            <div class="color-selection clearfix">
                                                                <div class="colorpicker-input" id="specTextFontColorSelector" style="cursor:pointer;">
                                                                    <div></div>
                                                                </div>
                                                                <div style="margin-top: 8px; padding-left: 50px; color: #0073e6; cursor: pointer; width:35px;" id="resetSpecTextFontColor">Reset</div>
                                                                <input class="colorpicker-text" type="text" id="specTextFontColor" value="#ffffff" @*data-bind="value:LotOutlineColor"*@ />
                                                            </div>
                                                        </div>
                                                        <div class="span12" style="clear:both; margin:0;">
                                                            <h5>Banner Opacity</h5>
                                                            <div>
                                                                <select id="specTextOpacity" style="width:73px; outline:none;">
                                                                    @for (var i = 0; i <= 100; i += 10)
                                                                    {
                                                                        <option value="@i">@i%</option>
                                                                    }
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                                @if ((Roles.IsUserInRole("BHIADMIN") || Roles.IsUserInRole("PARTNERSUPERADMIN") || Roles.IsUserInRole("PARTNERADMIN")) && ViewBag.HoldALotEnabled)
                                                {                                    
                                                    <div>
                                                        <div class="span12" id="HoldaLot" style="clear:both; margin:0;">
                                                            <h5>Enable hold a lot feature</h5>
                                                            <div>
                                                                <label class="checkbox">
                                                                    <input type="checkbox" id="holdALotCheckbox" onclick="ToggleHoldALot()" />
                                                                    Hold a lot
                                                                </label>

                                                            </div>
                                                        </div>
                                                        <div id="holdAlotDiv">
                                                            @if (Roles.IsUserInRole("BHIADMIN") || Roles.IsUserInRole("PARTNERSUPERADMIN"))
                                                            {
                                                                <div class="row-fluid" id="paymentDIv">
                                                                    <div class="span12">
                                                                        <div class="control-group">
                                                                            <label id="paymentAccountLabel">Payment Platform Account</label>
                                                                            <select onchange="paymentAccountListChanged()" id="paymentAccountList"></select>
                                                                            <div class="tool-tip"><img src="~/Content/images/help-icon.png" style="width:16px;margin-top: -5px;" /><span class="tooltiptext" style="bottom: 150%; margin-left:-145px;">Payment platform account to be used for financial transactions for this community</span></div>

                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            }
                                                            <div id="paymentReservedStatuses">
                                                                <div class="row-fluid">
                                                                    <div class="span12">
                                                                        <div class="control-group">
                                                                            <label>Reservation Pending Lot Status</label>
                                                                            <select id="reservationPendingLotStatus"></select>
                                                                            @*<div class="tool-tip"><img src="~/Content/images/help-icon.png" style="width:16px;margin-top: -5px;" /><span class="tooltiptext" style="bottom: 150%; margin-left:-145px;">Payment platform account to be used for financial transactions for this community</span></div>*@

                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div class="row-fluid">
                                                                    <div class="span12">
                                                                        <div class="control-group">
                                                                            <label>Reserved Lot Status</label>
                                                                            <select id="reservedLotStatus"></select>
                                                                            @*<div class="tool-tip"><img src="~/Content/images/help-icon.png" style="width:16px;margin-top: -5px;" /><span class="tooltiptext" style="bottom: 150%; margin-left:-145px;">Payment platform account to be used for financial transactions for this community</span></div>*@

                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class="row-fluid">
                                                                <div class="span7" style="min-width:auto;">
                                                                    <div class="control-group">
                                                                        <label class="control-label">Email to Receive Requests</label>
                                                                        <div class="controls">
                                                                            <input class="input-block-level" type="text" id="holdALotEmail" />
                                                                            <span id="EmailValidation" style="display:none" class="isp-field-validation-error">Invalid Email Address.</span>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div class="span5" style="min-width:auto;">
                                                                    <div class="control-group">
                                                                        <label class="control-label">Phone Number</label>
                                                                        <div class="controls" style="margin-top: 25px;">
                                                                            <input class="input-block-level" type="text" id="holdALotPhoneNumber" maxlength="10" />
                                                                            <span id="PhoneValidation" style="display:none" class="isp-field-validation-error">Invalid Phone number.</span>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }

                                    @if (ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.PaidGeoSpatial || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial)
                                    {
                                        <div style="border: 1px solid #e2e2e2; padding: 10px; margin-bottom: 20px;">
                                            <h4 style="margin-top: 0;">Geospatial Map Configuration</h4>
                                            <div style="display:grid; grid-template-columns: repeat(3, 1fr); gap: 30px; padding: 0 10px 0 30px;">
                                                <div>
                                                    <div class="span12" style="clear:both; margin:0;">
                                                        <h5>Geospatial Community Default Zoom</h5>
                                                        <div>
                                                            <select id="geospatialDefaultZoom" style="width:70px; outline:none;">
                                                                @for (var i = 0; i < 23; i++)
                                                                {
                                                                    <option value="@i">@i</option>
                                                                }
                                                            </select>
                                                        </div>
                                                    </div>

                                                    <div class="span12" style="clear:both; margin:0;">
                                                        <h5>GeoSpatial Map Default to Satellite View <div class="tool-tip" style="margin: 2px 0 0 8px;"><img src="~/Content/images/help-icon.png" style="width:16px;margin-top: -5px;" /><span class="tooltiptext" style="bottom: 150%; margin-left:-145px; font-size: 12px; font-weight: normal;">When enabled, this will make the GeoSpatial map default to the satellite view.</span></div></h5>
                                                        <div class="radio-div">
                                                            <input type="radio" name="comm-defaultSatView" value="true" id="enableDefaultSatView" /><span>Yes</span>
                                                            <input type="radio" name="comm-defaultSatView" value="false" id="disableDefaultSatView" /><span>No</span>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="checkbox-list">
                                                    <h5>Points of Interest Categories for Geospatial</h5>
                                                    <div id="geospatialPointsOfInterest" data-bind="template: { name: 'geo-pois-template', foreach: geoPointsAll }">
                                                    </div>
                                                    <script type="text/html" id="geo-pois-template">
                                                        <label class="checkbox">
                                                            <input type="checkbox" data-bind="attr: { value: ID }, checked: $root.geoPointsSelected"><span data-bind="text: Name"></span>
                                                        </label>
                                                    </script>
                                                    <br>
                                                </div>

                                            </div>
                                        </div>
                                    }

                                    @if (ViewBag.NHTBuilderNumber != null && ViewBag.NHTBuilderNumber != "")
                                    {
                                        <div style="border: 1px solid #e2e2e2; padding: 10px; margin-bottom: 20px;">
                                            <h4 style="margin-top: 0;">Envision Integration</h4>
                                            <div style="display:grid; grid-template-columns: repeat(3, 1fr); gap: 13px; padding: 0 10px 0 30px;">
                                                <div>
                                                    <div class="span12" style="clear:both; margin:0;">
                                                        <h5>Envision Community Integration Key <div class="tool-tip" style="margin: 2px 0 0 8px;"><img src="~/Content/images/help-icon.png" style="width:16px;margin-top: -5px;" /><span class="tooltiptext" style="bottom: 150%; margin-left:-145px; font-size: 12px; font-weight: normal;">Envision Community Integration Key from Builder.</span></div></h5>
                                                        <input type="text" id="communityIntegrationKey" placeholder="Community Integration Key" maxlength="50" style="width: 190px" />
                                                    </div>
                                                    <div class="span12" style="clear:both; margin:0;">
                                                        <h5>Envision Option Sub-Category Number <div class="tool-tip" style="margin: 2px 0 0 8px;"><img src="~/Content/images/help-icon.png" style="width:16px;margin-top: -5px;" /><span class="tooltiptext" style="bottom: 150%; margin-left:-145px; font-size: 12px; font-weight: normal;">Envision Option Sub-Category Number from Builder for Option Call Out.</span></div></h5>
                                                        <input type="text" id="communitySubCategoryNumber" placeholder="Option Sub-Category Number" maxlength="50" style="width: 190px" />
                                                    </div>
                                                    <div class="span12" style="clear:both; margin:0;">
                                                        <h5>Envision Option Name Contains <div class="tool-tip" style="margin: 2px 0 0 8px;"><img src="~/Content/images/help-icon.png" style="width:16px;margin-top: -5px;" /><span class="tooltiptext" style="bottom: 150%; margin-left:-145px; font-size: 12px; font-weight: normal;">Optional Text for Additional Envision Option Filtering.</span></div></h5>
                                                        <input type="text" id="communityOptionName" placeholder="Option Name Contains" maxlength="50" style="width: 190px" />
                                                    </div>
                                                    <div class="span12" style="clear:both; margin:0;">
                                                        <h5>Show Exterior Color Scheme <div class="tool-tip" style="margin: 2px 0 0 8px;"><img src="~/Content/images/help-icon.png" style="width:16px;margin-top: -5px;" /><span class="tooltiptext" style="bottom: 150%; margin-left:-145px; font-size: 12px; font-weight: normal;">When enabled, the ISP will attempt to match an Envision Exterior Color Option based on a Lot’s External Reference number and display the Option Detail Page in a popup.</span></div></h5>
                                                        <div class="radio-div">
                                                            <input type="radio" name="comm-showColorScheme" value="true" id="enableCommShowColorScheme" /><span>Yes</span>
                                                            <input type="radio" name="comm-showColorScheme" value="false" id="disableCommShowColorScheme" /><span>No</span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>

                                <div class="row-fluid">
                                    <!-- Testing <div id="test46" data-bind="text: ko.toJSON($root)"> </div> -->
                                    <div class="span12 well update-options">
                                        <button class="btn btn-primary pull-right" type="button" onclick="saveConfiguration()">Save Changes</button>
                                        <span class="label pull-right save-result"></span>
                                    </div>
                                </div><!-- .row-fluid -->
                            </div><!-- #configuration -->
                        }
                        if (ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVG || ViewBag.IspPartnerType == (int)CommonEnumerations.IspPartnerType.SVGGeoSpatial)
                        {
                            <div class="outer tab-pane" id="communityOverview">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Sort Order</th>
                                            <th>Community Overview Image</th>
                                            <th>Community Overview Image Description</th>
                                            <th>Set as Welcome Image</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody data-bind="sortable: communityAssets">
                                        <tr>
                                            <td class="item">
                                                <span data-bind="text: $index()+1"></span>
                                            </td>
                                            <td class="item">
                                                <div class="image-options">
                                                    <div class="control-group">
                                                        <div class="controls">
                                                            <img style="width:240px; height:160px;" data-bind="attr:{src: URL}" />
                                                        </div>
                                                        <br />
                                                        <div data-bind="attr: {id: 'fineUploader' + Name}"></div>
                                                    </div>
                                                </div><!-- .image-options -->
                                                <div class="image-upload-alert-msg" data-bind="visible: ShowErrorMessage">Please upload an image</div>
                                            </td>
                                            <td class="item">
                                                <textarea class="input-block-level" rows="11" cols="3" data-bind="value: Description"></textarea>
                                            </td>
                                            <td style="text-align:center">
                                                <input type="checkbox" class="chckbxAll" data-bind="{checked: Preferred,click:$root.changePreference}" />
                                            </td>
                                            <td class="item">
                                                <a href="Javascript:void(0);" data-bind="click: $root.clearAsset ">Delete Asset</a>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                                <a href="#" data-bind="click: addAsset">Add Asset</a>
                                <div class="row-fluid">
                                    <div class="span12 well update-options">
                                        <button class="btn btn-primary pull-right" type="button" onclick="saveOverview();">Save Changes</button>
                                    </div>
                                </div><!-- .row-fluid -->
                            </div><!-- #communityOverview -->
                        }
                    }
                    <div class="outer tab-pane comm-content comm-title" id="manageCommContent">
                        <div class="row-fluid" id="manageCommTitleDiv">
                            @Html.Partial("Partials/_communityTitleSettings")
                        </div>
                        <br />
                        <br />
                        <div class="row-fluid">
                            @Html.Partial("Partials/_customizedContent")
                        </div>
                        <div class="row-fluid" id="save-Comm-Title">
                            <div class="span12 well update-options">
                                <button class="btn btn-primary pull-right" type="button" onclick="saveCommTitle();">Save Changes</button>
                            </div>
                        </div>

                    </div><!-- #manageCommContent -->
                </div><!-- .tab-content -->
            </div><!-- .options-select -->
        </div><!-- .span12-->
    </div><!-- .row -->

</section>
@section modal {
    <div class="modal fade hide" id="addCommunityModal" tabindex="-1" role="dialog"
         aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-header" id="addCommunity-modal-header">
            <button type="button" class="close" id="addCommunity-modal-close" data-dismiss="modal" aria-hidden="true">
                ×
            </button>
            <h3 id="modalLabel">
                Add Community
            </h3>
        </div>
        <div class="modal-body" id="addCommunity-modal-body">
            <div>
                <label class="control-label" for="CommunityName">ISP Community Label</label>
                <input class="input-block-level" id="addCommunityLabel" name="CommunityName" type="text" value="" maxlength="100" required>
            </div>

            <div>
                <label class="control-label" for="BDXLiveId">BDXLIVE Community ID</label>
                <input class="input-block-level" id="addBDXLiveId" name="BDXLiveId" type="number" oninput="limitNumberLength(this)" value="">
            </div>
            <div>Sync Status</div>
            <div class="radio-div">
                <input type="radio" name="addCommunityStatus" value="true" disabled class="isp-radio"><span class="isp-config">Active &nbsp;</span>
                <input type="radio" name="addCommunityStatus" value="false" id="add-community-inactive" checked="checked" disabled class="isp-radio"><span class="isp-config">Inactive</span>
            </div>
            <button type="button" class="btn btn-primary  pull-right" id="addCommunity-btn">Add Community</button>
        </div>
    </div>

    <div class="modal fade hide" id="editCommunityModal" tabindex="-1" role="dialog"
         aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-header" id="editCommunity-modal-header">
            <button type="button" class="close" id="editCommunity-modal-close" data-dismiss="modal" aria-hidden="true">
                ×
            </button>
            <h3 id="modalLabel">
                Edit Community
            </h3>
        </div>
        <div class="modal-body" id="editCommunity-modal-body">
            <div>
                <label class="control-label" for="CommunityName">ISP Community Label</label>
                <input class="input-block-level" id="editCommunityLabel" name="CommunityName" type="text" maxlength="100" value="">
            </div>
            <div>
                <label class="control-label" for="BDXLiveId">BDXLIVE ID</label>
                <input class="input-block-level" id="editBDXLiveId" name="BDXLiveId" type="number" oninput="limitNumberLength(this)" value="" required>
            </div>
            <div>Sync Status</div>
            <div class="radio-div">
                <input type="radio" name="editCommunityStatus" value="true" id="edit-community-active" disabled class="isp-radio"><span class="isp-config">Active &nbsp;</span>
                <input type="radio" name="editCommunityStatus" value="false" id="edit-community-inactive" disabled class="isp-radio"><span class="isp-config">Inactive</span>
            </div>
            <button type="button" class="btn btn-primary pull-right" id="editCommunity-btn">Save</button>
        </div>
    </div>

    <div class="modal fade hide" id="siteMapModal" data-remote-url="@Url.Action("LoadMap", "Admin")" tabindex="-1" role="dialog" aria-labelledby="modalLabel"
         aria-hidden="true">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                ×
            </button>
            <h3 id="modalLabel">
                SVG Site Plan
            </h3>
        </div>
        <div class="modal-body">
        </div>
    </div>
    <div class="modal fade hide" data-remote-url="@Url.Action("AssociateMasterPlan", "Admin")" id="associateMasterPlanModal" tabindex="-1" role="dialog" aria-labelledby="modalLabel"
         aria-hidden="true">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                ×
            </button>
            <h3 id="modalLabel">
                Associate SVG Master Plan
            </h3>
        </div>
        <div class="modal-body">
        </div>
    </div>
    <div class="modal fade hide" id="partnerClientKeyModal" tabindex="-1" role="dialog"
         aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                ×
            </button>
            <h3 id="modalLabel">
                API Key
            </h3>
        </div>
        <div class="modal-body">
            @ViewData["PartnerDataKey"]
        </div>
    </div>
    <div class="modal fade hide" id="partnerUpdateFileModal" tabindex="-1" role="dialog" aria-labelledby="modalLabel"
         aria-hidden="true" data-remote="@Url.Action("LoadUpdateData", "Admin")">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true" id="uploadExcelButton">
                ×
            </button>
            <h3 id="modalLabel">
                Upload Site Plan Data
            </h3>
        </div>
        <div class="modal-body">
        </div>
    </div>
    <div class="modal fade hide" id="partnerUpdateMasterPlanModal" tabindex="-1" role="dialog" aria-labelledby="modalLabel"
         aria-hidden="true" data-remote="@Url.Action("LoadMasterPlanMap", "Admin")">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                ×
            </button>
            <h3 id="modalLabel">
                Upload SVG Master Plan Map
            </h3>
        </div>
        <div class="modal-body">
        </div>
    </div>

    <div class="modal fade" id="lockModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                        &times;
                    </button>
                    <h4 class="modal-title">
                        Are you sure?
                    </h4>
                </div>
                <div class="modal-body">
                    All images will be erased and replaced with community images from BDX Live. Are
                    you sure?
                </div>
                <div class="modal-footer">
                    <a href="Javascript:Void(0);" class="btn" onclick="$('#lockModal').modal('hide');">Close</a>
                    <a href="Javascript:Void(0);" class="btn btn-primary" onclick="LockUnlockCommunity(currentRowId, false);$('#lockModal').modal('hide');">
                        Save Changes
                    </a>
                </div>
            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>
    <div id="myModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">×</span>
            </button>
            <h4 class="modal-title" id="mySmallModalLabel">
                Are you sure you want to delete selected lots?<a class="anchorjs-link" href="#mySmallModalLabel">
                    <span class="anchorjs-icon"></span>
                </a>
            </h4>
        </div>
        <div class="modal-body">
            <div class="row">
                <!-- Indicates a successful or positive action -->
                <div class="span1">
                    <button type="button" class="btn btn-success btn-confirm">
                        OK
                    </button>
                </div>
                <!-- Indicates a dangerous or potentially negative action -->
                <div class="span1">
                    <button type="button" class="btn btn-danger">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade hide" id="GeoJsonModal" data-remote-url="@Url.Action("LoadGeoJson", "Admin")" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
            <h3 id="modalLabel">geoJson Site Plan</h3>
        </div>
        <div class="modal-body"></div>
    </div>
    <div class="modal fade hide" id="SelectElevationModal" data-remote-url="@Url.Action("LoadHomeElevation", "Admin")" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true" style="width: 650px; left: 48%;">
        <div class="selectElevation-modal-body">
        </div>
    </div>
    <div class="modal fade hide" id="communityCustomContentModal" data-remote-url="@Url.Action("EditCustomizedContent", "Admin")" role="dialog" aria-labelledby="modalLabel" aria-hidden="true" style="transform: translateX(-50%)translateY(-50%); margin: 0; width: 800px;">
        <div class="edit-content-modal-body">
        </div>
    </div>
    <div class="modal fade hide" id="editLotStatusNameModal" data-remote-url="@Url.Action("EditLotStatusName", "Admin")" role="dialog" aria-labelledby="modalLabel" aria-hidden="true" style="transform: translateX(-50%)translateY(-50%); margin: 0; width: 600px;">
        <div class="edit-lot-status-name-body">
        </div>
    </div>
    <input type="hidden" id="hdDeleteLots" />
    <input type="hidden" id="hdSelectedCommunity" />
    <!-- /.modal -->
}
@section scripts
{
    <script src="~/Content/ckeditor_4.16.2/ckeditor.js"></script>
    @*<script src="https://www.infolytica.com/ckeditor/ckeditor.js"></script>*@
    @*<script src="https://cdn.ckeditor.com/4.6.2/standard-all/ckeditor.js"></script>*@


<script type="text/jscript">

        function siteIDFormatter(cellvalue) {
            if (cellvalue == "-1") {
                return "";
            } else {
                return cellvalue;
            }
        }

        CKEDITOR.replace('descriptionEditor' ,{ extraPlugins: 'wordcount',
            wordcount: {
                showCharCount: true,
                maxCharCount: 4000,
                countSpacesAsChars: true
            },
            toolbar: [['Source', 'PasteText', 'PasteFromWord', 'Bold', 'Italic', '-', 'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', 'Blockquote', 'Link', 'Unlink', 'Table', 'HorizontalRule', 'SpecialChar']],
            height: 95
	    });

        /* MODELS AND COMMON VARIABLES*/
        CKEDITOR.instances["descriptionEditor"].on('keyup', function () {
            var length= CKEDITOR.instances.sampleInstance.getData().replace(/<[^>]*>|\s/g, '').length;

            if (parseInt($('#lengthText').val()) > 100) {
                alert('exceed');
            }
            else {
                $('#lengthText').removeClass('error');
            }
        });
        var selectedLot;
        var lotsLoaded = false;
        var configLoaded = false;
        var overviewLoaded = false;
        //var prospectsLoaded = false;
        var descriptionLoaded = false;
        var layersLoaded = false;
        var commTitleLoaded = false;
        var currentRowId = -1;
        var getDescription;

    function clearExcludeIds() {
            var isChecked = $('#cb_@COMMUNITIES_GRID').is(":checked");
            if (isSelectAll && isChecked) {
                idsToExclude = [];
            }
        }

        function onPaging() {
            clearExcludeIds();
        }

        function onSort() {
            clearExcludeIds();
        }

        function ExportlotData() {
            var communityID = currentRowId;
            location.href = '@Url.Action("ExportToExcel","Communities")' + '?communityId=' + communityID;
        }

        function searchCommunityGrid() {
            var searchTerm = $('#searchBox').val().trim();
            if (searchTerm != null && searchTerm != "") {
                jQuery("#@(COMMUNITIES_GRID)").jqGrid().setGridParam({ postData: { searchTerm: searchTerm }, page: 1 }).trigger('reloadGrid');
                $('#clear-search').removeClass('disable');
            }
        }

        function clearSearch() {
            if (!$('#clear-search').hasClass('disable')) {
                $('#searchBox').val("");
                jQuery("#@(COMMUNITIES_GRID)").jqGrid().setGridParam({ postData: { searchTerm: null }, page: 1 }).trigger('reloadGrid');
                $('#clear-search').addClass('disable');
            }
        }

        function onCommunityStatusChange(selectedValue) {
            var searchTerm = $('#searchBox').val().trim();
            var commTypeFilterValue = $('#commTypeFilter').val();
            jQuery("#@(COMMUNITIES_GRID)").jqGrid().setGridParam({ postData: { searchTerm: searchTerm, commStatusType: selectedValue, commType: commTypeFilterValue }, page: 1 }).trigger('reloadGrid');
        }

        function onCommunityTypeChange(selectedValue) {
            var searchTerm = $('#searchBox').val().trim();
            var commStatusFilterValue = $('#commStatusFilter').val();
            jQuery("#@(COMMUNITIES_GRID)").jqGrid().setGridParam({ postData: { searchTerm: searchTerm, commStatusType: commStatusFilterValue, commType: selectedValue }, page: 1 }).trigger('reloadGrid');
        }

        $(document).on('keyup', '[name=premiumPrice]', function () {
            var regexPattern = /^\d*[0-9]\d*$/;
            var isValid = regexPattern.test($('[name=premiumPrice]').val());
            if (isValid || $('[name=premiumPrice]').val() == null || typeof ($('[name=premiumPrice]').val()) == "undefined" || $('[name=premiumPrice]').val() == "") {
                $('.validationMessage').css('display', 'none');
            } else {
                $('.validationMessage').css('display', 'block');
            }
        });

        $(document).on('keyup', '[name=reservationFee]', function () {
            var regexPattern = /^[+]?([0-9]+(?:[\.][0-9]{0,2})?|\.[0-9]{0,2})$/;
            var isValid = regexPattern.test($('[name=reservationFee]').val());
            if ((isValid && $('[name=reservationFee]').val() >= 1) || $('[name=reservationFee]').val() == null || typeof ($('[name=reservationFee]').val()) == "undefined" || $('[name=reservationFee]').val() == "") {
                $('.feevalidationMessage').css('display', 'none');
                $('.feevalidationMessageNew').css('display', 'none');
            } else if ($('[name=reservationFee]').val() < 1) {
                $('.feevalidationMessageNew').css('display', 'block');
            } else {
                $('.feevalidationMessage').css('display', 'block');
            }
        });

        var ctaVisibilityCount = 0;
        var deletedCTA = [1,2,3,4];
        $("#isp-add-cta-btn").click(function () {
            var ctaHtml = $.parseHTML('<div class="span10 form-inline section_new_cta lotStatusEditor" style="border:1px solid #00b0f0; position: relative;padding-top: 20px;"><button class="btn btn-primary isp-cta-remove"> X</button><div class="control-group"><label for="contact" style="width:36%;">Call-To-Action URL</label><input class="cta-url" type="text" name="contact" size="25" maxlength="500" style="vertical-align: top; width:60%;" /><span class="cta-url-error" style="color: red;font-size: 11px;margin-left: 37%;display:none;">Enter Call-To-Action URL</span></div><div class="control-group"><label for="description" style="width:36%;">Call-To-Action Button Text</label><input class="cta-text" type="text" name="buttonText" maxlength="100" style="width:60%;" /><span class="cta-text-error" style="color: red;font-size: 11px;margin-left: 37%;display:none;">Enter Call-To-Action Button Text</span></div></div>')[0];
            if (ctaVisibilityCount < 4) {
                ctaVisibilityCount += 1;
                var ctaNumber = deletedCTA.shift();
                ctaHtml.id = "isp-cta-" + ctaNumber;
                var crossBtn = $(ctaHtml).find(".isp-cta-remove")[0];
                crossBtn.id = "isp-cta-remove-" + + ctaNumber;
                var ctaURL = $(ctaHtml).find(".cta-url")[0];
                ctaURL.id = "isp-cta-url-" + + ctaNumber;
                var ctaText = $(ctaHtml).find(".cta-text")[0];
                ctaText.id = "isp-cta-text-" + + ctaNumber;
                document.getElementById("isp-cta-div").appendChild(ctaHtml);

                crossBtn.onclick = function () {
                    var ctaID = this.id.split("isp-cta-remove-")[1];
                    ctaVisibilityCount -= 1;
                    deletedCTA.push(ctaID);
                    deletedCTA.sort();
                    if (ctaVisibilityCount == 4) {
                        $("#isp-add-cta-btn").attr("disabled", true);
                    } else {
                        $("#isp-add-cta-btn").attr("disabled", false);
                    }
                    $(this).parent().remove();
                };
            }
            if (ctaVisibilityCount == 4) {
                $("#isp-add-cta-btn").attr("disabled", true);
            } else {
                $("#isp-add-cta-btn").attr("disabled", false);
            }
        });

        function showModalWindow(modalSelector)
        {
            var modalReference = $(modalSelector);
            var contentSelector = modalReference.find(".modal-body");
            var remoteURL = modalReference.attr("data-remote-url");

            //jquery ajax code
            $.ajax({
                url: remoteURL,
                type: "get",
                success: function (data, textStatus, xhr) {
                    contentSelector.html(data);
                    modalReference.modal("show");
                    //uploadFileButtonClick();
                },
                error: function (xhr, textStatus, errorThrown) {

                },
                cache: false
            });
            // uploadFileButtonClick();
        }

        function showElevationWindow(modalSelector, listingId, lotId, imageId) {

            var modalReference = $(modalSelector);
            var contentSelector = modalReference.find(".selectElevation-modal-body");
            var remoteURL = modalReference.attr("data-remote-url");

            //jquery ajax code
            $.ajax({
                url: remoteURL,
                type: "get",
                data: { ListingId: listingId, LotId: lotId, SelectedImageId: imageId },
                success: function (data, textStatus, xhr) {
                    contentSelector.html(data);
                    modalReference.modal("show");
                },
                error: function (xhr, textStatus, errorThrown) {

                },
                cache: false
            });
        }

        function UpdateMasterPlanName(masterplanId, masterplanName, element) {
            var remoteURL = "@Url.Action("UpdateAssociateMasterPlan", "Admin")";
            //jquery ajax code
            $.ajax({
                url: remoteURL,
                data: { masterplanId: masterplanId, masterPlanName: masterplanName },
                type: "get",
                success: function (data, textStatus, xhr) {
                    $(element).html('');
                    data.forEach(function (e) {
                        if (e.MapData == "selected") {
                            $(element).append("<option value=\"" + e.ID + "\" selected='selected'>" + e.Name + "</option>")
                        }
                        else {
                            $(element).append("<option value=\"" + e.ID + "\">" + e.Name + "</option>")
                        }
                    });
                    $('#masterPlanID').attr('disabled', false);
                    $('#plan-update').attr('disabled', false);
                    $('#changemasterplanname').css('display', 'none');
                },
                error: function (xhr, textStatus, errorThrown) {

                }
            });
        }

        var viewConfiguration =
        {
            CommunityID: ko.observable(-1),
            communityConfiguration: ko.observableArray(),
            partnerSettings: ko.observableArray(),
            pointsAll: ko.observableArray([]),
            pointsSelected: ko.observableArray([]),
            geoPointsAll: ko.observableArray([]),
            geoPointsSelected: ko.observableArray([])
        };
        var overview = {};
        var uploader;
        var pointsOfInterest;

        var Lot = function (block, size, id, phase, elevation, swing, description, address, lotState, listings, premiumPrice, imagePath, contactLink, lotDescription,buttonText,isAmenity,displayName,externalReference,videoURL,reservationFee) {
            this.Block = block;
            this.Size = size;
            this.Phase = phase;
            this.Description = description;
            this.Address = address;
            this.Elevation = elevation;
            this.Swing = swing;
            this.LotState = lotState;
            this.Listings = listings;
            this.ID = id;
            this.PremiumPrice = premiumPrice;
            this.imagePath = imagePath;
            this.contactLink = contactLink;
            this.lotDescription = lotDescription;
            this.buttonText = buttonText;
            this.isAmenity = isAmenity;
            this.displayName = displayName;
            this.externalReference = externalReference;
            this.VideoURL = videoURL;
            this.Reservationfee = reservationFee;
        };
        var batchLot = function () {
            this.LotIDs = ko.observableArray([]);
            this.Size = "";
            this.Block = "";
            this.Phase = "";
            this.Elevation = "";
            this.Swing = "";
            this.CommunityID = -1,
            this.Listings = [];
            this.LotState = {};
            this.isAmenity = "";
            this.premiumPrice = -1;
            this.reservationFee = -1;
            this.ContactLink = "";
            this.ButtonText = "";
            this.DetailListings = [];
            this.DeletedListings = [];

            this.addPlansToBatch = function (plan) {
                this.Listings.push(plan);
            }
            this.addLotsToBatch = function (lotID) {
                this.LotIDs.push(lotID);
            }
            this.populateFromLot = function (lot) {
                this.Size = lot.Size();
                this.Block = lot.Block();
                this.Phase = lot.Phase();
                this.LotState = lot.LotState;
                this.CommunityID = currentRowId;
                this.Listings = viewStatusObject.selectedPlans();
                this.Elevation = lot.Elevation();
                this.Swing = lot.Swing();
                this.isAmenity = lot.isAmenity();
                this.premiumPrice = lot.PremiumPrice();
                this.reservationFee = lot.Reservationfee();
                this.ContactLink = lot.contactLink();
                this.ButtonText = lot.buttonText();
                this.DetailListings = lot.Listings;
                var deletedList = [];
                $('.delete-listing-checkbox:checked').each(function () {
                    deletedList.push(this.value);
                });
                this.DeletedListings = deletedList;
            }

            this.reset = function () {
                this.Size = "";
                this.Block = "";
                this.Phase = "";
                this.Elevation = "";
                this.Swing = "";
                this.LotState = {};
                this.Listings = [];
                this.LotIDs.removeAll();
                this.isAmenity = "";
                this.premiumPrice = -1;
                this.reservationFee = -1;
                this.ContactLink = "";
                this.ButtonText = "";
                this.DetailListings = [];
                this.DeletedListings = [];
                $(".multi-hide").show();
                $("#managePlans").width("130%");
                $("#manageSpecs").width("130%");
                $(".delete-listing-header").hide();
                $(".delete-listing-td").hide();
            }
        };

        var viewStatus = function () {
            var self = this;
            self.selectedPlans = ko.observableArray();

            self.plans = ko.observableArray();
            self.status = ko.observable([]);
            self.paymentAccountArray = ko.observable([]);
            self.specs = ko.observableArray();
            self.models = ko.observableArray();

            self.plansTemp = [];
            self.statusTemp = [];
            self.specsTemp = [];
            self.modelTemp = [];

            self.selectedValueId = ko.observable(-1);
            self.selectedValue = ko.observable("");


            self.internalReference = ko.observable("");
            self.block = ko.observable("");
            self.size = ko.observable("");
            self.id = ko.observable(-1);
            self.phase = ko.observable("");
            self.elevation = ko.observable("");
            self.swing = ko.observable("");
            self.description = ko.observable("");
            self.address = ko.observable("");
            self.premiumPrice = ko.observable();
            self.reservationFee = ko.observable();
            self.newIsp = ko.observable(false);
            self.contactLink = ko.observable("");
            self.lotDescription = ko.observable("");
            self.videoURL = ko.observable("");
            self.imagePath = ko.observable("");
            self.buttonText = ko.observable("");
            self.isAmenity = ko.observable("");
            self.displayName = ko.observable("");
            self.externalReference = ko.observable("");
            self.AddStatusesAndPlans = function (plans, status) {
                self.plansTemp = plans;
                status.splice(0, 0, { ID: 0, Name: "Select Lot Status" });
                //status.push({ ID: 0, Name: "Select Lot Status" });
                self.statusTemp = status;
            };
            self.AddPaymentAccountInformation = function (paymentAccountArray) {
                $('#paymentAccountList option').remove();
                if (paymentAccountArray == null || typeof (paymentAccountArray) === "undefined" || paymentAccountArray.length <= 0) {
                    $('#paymentDIv').css('display', 'none');
                    $('#paymentReservedStatuses').css('display', 'none');
                } else {
                    var paymentReservedStatuses = false;
                    paymentAccountArray.splice(0, 0, { ID: 0, Name: "None" });
                    $.each(paymentAccountArray, function (key, value) {
                        if (value.Selected) {
                            $('#paymentAccountList')
                                .append($("<option selected></option>")
                                    .attr("value", value.ID)
                                    .text(value.Name));
                            paymentReservedStatuses = true;
                        } else {
                            $('#paymentAccountList')
                                .append($("<option></option>")
                                    .attr("value", value.ID)
                                    .text(value.Name));
                        }

                    });
                    if (paymentReservedStatuses) {
                        $('#paymentReservedStatuses').css('display', 'block');
                    } else {
                        $('#paymentReservedStatuses').css('display', 'none');
                    }
                }
            };
            self.AddReservedAndPendingLotStatusInformation = function (status, holdALotConfig) {
                console.log(status);
                $('#reservationPendingLotStatus option').remove();
                $('#reservedLotStatus option').remove();
                if (status == null || typeof (status) === "undefined" || status.length <= 0) {
                    $('#paymentReservedStatuses').css('display', 'none');
                } else {
                    status.splice(0, 0, { ID: 0, Name: "None" });
                    $.each(status, function (key, value) {
                        if (value.ID == holdALotConfig.holdALotPendingReservationStatus) {
                            $('#reservationPendingLotStatus')
                                .append($("<option selected></option>")
                                    .attr("value", value.ID)
                                    .text(value.Name));
                        } else {
                            $('#reservationPendingLotStatus')
                                .append($("<option></option>")
                                    .attr("value", value.ID)
                                    .text(value.Name));
                        }
                        if (value.ID == holdALotConfig.holdALotReservedStatus) {
                            $('#reservedLotStatus')
                                .append($("<option selected></option>")
                                    .attr("value", value.ID)
                                    .text(value.Name));
                        } else {
                            $('#reservedLotStatus')
                                .append($("<option></option>")
                                    .attr("value", value.ID)
                                    .text(value.Name));
                        }
                    });
                }
            };
            self.AddPlans = function (plans) {
                if (typeof (plans) != "undefined" && plans != null && plans.length > 0) {
                    for (var i = 0; i < plans.length; i++) {
                        if (plans[i] != null && typeof (plans[i]) != "undefined") {
                            var priceVal = parseInt(plans[i].TotalPrice);
                            if (plans[i].TotalPrice == 0 || plans[i].TotalPrice == "0" || isNaN(parseInt(plans[i].TotalPrice))) {
                                plans[i].TotalPrice = "";
                            } else {
                                plans[i].TotalPrice = parseInt(plans[i].TotalPrice);
                            }
                        }
                    }
                    self.plansTemp = plans;
                };
            }
            self.AddSpecs = function (specs) {
                if (typeof (specs) != "undefined" && specs != null && specs.length > 0) {
                    for (var i = 0; i < specs.length; i++) {
                        if (specs[i] != null && typeof (specs[i]) != "undefined") {
                            var priceVal = parseInt(specs[i].TotalPrice);
                            if (specs[i].TotalPrice == 0 || specs[i].TotalPrice == "0" || isNaN(parseInt(specs[i].TotalPrice))) {
                                specs[i].TotalPrice = "";
                            } else {
                                specs[i].TotalPrice = parseInt(specs[i].TotalPrice);
                            }
                        }
                    }
                    self.specsTemp = specs;
                };
            }
            self.AddModels = function (model) {
                if (typeof (model) != "undefined" && model != null && model.length > 0) {
                    for (var i = 0; i < model.length; i++) {
                        if (model[i] != null && typeof (model[i]) != "undefined") {
                            var priceVal = parseInt(model[i].TotalPrice);
                            if (model[i].TotalPrice == 0 || model[i].TotalPrice == "0" || isNaN(parseInt(model[i].TotalPrice))) {
                                model[i].TotalPrice = "";
                            } else {
                                model[i].TotalPrice = parseInt(model[i].TotalPrice);
                            }
                        }
                    }
                    self.modelTemp = model;
                };
            }
            self.AddLotInfo = function (block, size, id, phase, elevation, swing, description, address, internalReference, premiumPrice, newIsp, imagePath, contactLink, lotDescription, buttonText, isAmenity,displayName,externalReference,videoURL,reservationFee) {
                self.internalReference(internalReference);
                self.block(block);
                self.size(size);
                self.id(id);
                self.phase(phase);
                self.elevation(elevation);
                self.swing(swing);
                self.description(description);
                self.address(address);
                self.plans(self.plansTemp);
                self.status(self.statusTemp);
                self.premiumPrice(premiumPrice);
                self.reservationFee(reservationFee);
                self.newIsp(newIsp);
                self.contactLink(contactLink);
                self.imagePath(imagePath);
                self.lotDescription(lotDescription);
                self.buttonText(buttonText);
                self.isAmenity(isAmenity);
                self.displayName(displayName);
                self.externalReference(externalReference);
                self.specs(self.specsTemp);
                self.models(self.modelTemp);
                self.videoURL(videoURL);
            };
            self.AddSelectedPlan = function (value) {
                self.selectedPlans.push(value);
            };
            self.AddSelectedValues = function (selectedValueId) {
                var position = getLotState(self.status(), selectedValueId);
                if (position == self.status().length) {
                    self.selectedValue(self.status()[0]);
                    self.selectedValueId(0);
                } else {
                    self.selectedValue(self.status()[position]);
                    self.selectedValueId(selectedValueId);
                }
            };
            self.AddSelectedPaymentAccountValues = function (selectedValueId) {
                var position = getLotState(self.paymentAccountArray, selectedValueId);
                if (position == self.paymentAccountArray.length) {
                    self.selectedValue(self.paymentAccountArray[0]);
                    self.selectedValueId(0);
                } else {
                    self.selectedValue(self.paymentAccountArray[position]);
                    self.selectedValueId(selectedValueId);
                }
            };
            self.clearAll = function () {
                self.selectedPlans.removeAll();
                self.plans.removeAll();
                self.specs.removeAll();
                self.models.removeAll();
                self.status([]);
                self.paymentAccountArray([]);
                self.selectedValueId(-1);
                self.selectedValue("");
                self.internalReference("");
                self.block("");
                self.size("");
                self.id(-1);
                self.phase("");
                self.elevation("");
                self.swing("");
                self.description("");
                self.address("");
                self.contactLink("");
                self.imagePath("");
                self.lotDescription("");
                self.buttonText("");
                self.isAmenity("");
                self.displayName("");
                self.externalReference("");
                self.videoURL("");
                self.reservationFee("");
            };

            self.clear = function () {
                self.selectedValueId(-1);
                self.selectedValue("");
                self.internalReference("");
                self.block("");
                self.size("");
                self.id(-1);
                self.phase("");
                self.elevation("");
                self.swing("");
                self.description("");
                self.address("");
                self.selectedPlans.removeAll();
                self.contactLink("");
                self.imagePath("");
                self.lotDescription("");
                self.buttonText("");
                self.isAmenity("");
                self.displayName("");
                self.externalReference("");
                self.videoURL("");
                self.reservationFee("");
                $('*[id*=elevationbutton_]').each(function () {
                    $(this).show();
                    $(this).prop('disabled', true);
                });
                $('*[id*=elevationimage_]').each(function () {
                    $(this).hide();
                });
                $('*[id*=elevationTitle_]').each(function () {
                    $(this).hide();
                });
                $('*[id*=elevationImageId_]').each(function () {
                    $(this).hide();
                });
            };
            self.ReturnLotObject = function () {
                var position = getLotState(self.status(), self.selectedValueId());
                var listings = [];
                $.each(self.selectedPlans(), function (intIndex, planId) {
                    if (planId != 0) {
                        var match = ko.utils.arrayFirst(self.plans(), function (item) {
                            return planId === item.ID.toString();
                        });
                        if (match == null || typeof (match) == "undefined") {
                            match = ko.utils.arrayFirst(self.specs(), function (item) {
                                return planId === item.ID.toString();
                            });
                        }
                        if (match == null || typeof (match) == "undefined") {
                            match = ko.utils.arrayFirst(self.models(), function (item) {
                                return planId === item.ID.toString();
                            });
                        }
                        if (match != null && typeof (match) != "undefined") {
                            var priceVal = parseInt(match.TotalPrice);
                            if (match.TotalPrice == 0 || match.TotalPrice == "0" || isNaN(parseInt(priceVal))) {
                                match.TotalPrice = "";
                            }
                            var selectedImageId = $("#elevationimage_" + match.ID).attr('data-image-id');
                            var listing = { ID: planId, TotalPrice: match.TotalPrice, SelectedImageId: selectedImageId };
                            listings.push(listing);
                        }
                    }
                });
                var html = CKEDITOR.instances['descriptionEditor'].getData();

                var imagePath = $('#lotImagePath').val();
                return new Lot(self.block, self.size, self.id, self.phase, self.elevation, self.swing, self.description, self.address, self.status()[position], listings, self.premiumPrice, imagePath, self.contactLink, html, self.buttonText, self.isAmenity, self.displayName, self.externalReference, self.videoURL, self.reservationFee);
            };

        };
        var viewLots = function () {
            var self = this;
            self.lots = ko.observable();
            self.count = ko.observable();
            self.listings = [];
            self.addLots = function (lots, count) {
                self.lots(lots);
                self.count(count);
            };

            self.clear = function () {
                self.lots([]);
                self.listings = [];
                self.count(0);

            };
        };

    var color = function (id, value, hiddenId, name, communityId, configurationId, code, status, key, partnerID, category, holdALotStatus, includeDWStatus, suppressPriceStatus, HoldALotButtonText, HoldALotButtonTextPlaceHolder) {
            var self = this;
            self.ID = id;
            self.Status = ko.observable(status);
            self.Code = code;
            self.CommunityID = communityId;
            self.Name = name;
            self.Value = ko.observable(value);
            self.HiddenId = hiddenId;
            self.Configuration = { ID: configurationId };
            self.key = key;
            self.partnerID = partnerID;
            self.category = category;
            self.ConfigurationID = configurationId;
            self.HoldALotStatus = ko.observable(holdALotStatus);
            self.IncludeDWStatus = ko.observable(includeDWStatus);
            self.HoldALotButtonText = ko.observable(HoldALotButtonText);
            self.HoldALotButtonTextPlaceHolder = ko.observable(HoldALotButtonTextPlaceHolder);
            self.SuppressPriceStatus = ko.observable(suppressPriceStatus)
        };

        var manualValidation = {
            onlyInteger: function (e, i) {
                var charCode = (i.which) ? i.which : i.keyCode;
                if (charCode > 31 && (charCode < 48 || charCode > 57) && (charCode < 95 || charCode > 105) && charCode != 37 && charCode != 39 && charCode != 16 && charCode != 36 && charCode != 35 && charCode != 46 && (charCode != 189 && charCode != 109 && charCode != 190 && charCode != 110)) {
                    return false;
                }
                else {
                    return true;
                }
            },
            onlyIntegerReservation: function (e, i) {
                var charCode = (i.which) ? i.which : i.keyCode;
                if (charCode > 31 &&
                    (charCode < 48 || charCode > 57)
                    &&
                    (charCode < 95 || charCode > 105)
                    && charCode != 37
                    && charCode != 39
                    && charCode != 16
                    && charCode != 36
                    && charCode != 35
                    && charCode != 46
                    && (charCode != 189
                        && charCode != 109)
                    && charCode != 190
                    && charCode != 110) {
                    return false;
                }
                else {
                    return true;
                }
            }
            ,
            IntegerCheck: function (e, i) {
                var regexPattern = /^-?\d+$/;
                var isValid = regexPattern.test($('[name=premiumPrice]').val());
                if (isValid || $('[name=premiumPrice]').val() == null || typeof ($('[name=premiumPrice]').val()) == "undefined" || $('[name=premiumPrice]').val() == "") {
                    $('.validationMessage').css('display', 'none');
                } else {
                    $('.validationMessage').css('display', 'block');
                }
            }
        };

        function selectALlKeyDown (e, i) {
            if (e.keyCode == 65 && e.ctrlKey) {
                e.target.select()
            }
        }

        var changelotStatus = {
            event :function(e, a, b) {
                e.IncludeDWStatus(false);
            }
        }

        //    var CommunityDescription=function()
        //    {
        //      var self = this;
        //      self.customDescription = ko.observable("");
        //      self.getDescription = function(customdescription)
        //      {
        //        self.customDescription(customdescription);
        //      };
        //      self.clear = function()
        //      {
        //       self.customDescription("");
        //      };

        //    };

        var CommunityAsset = function (value, description, name, url, preferred, ID) {
            this.ID = ID;
            this.URL = url;
            this.Value = value;
            this.Description = ko.observable(description);
            this.Name = name;
            this.FileName = "";
            this.FileSize = "";
            this.ShowErrorMessage = ko.observable(false);
            this.Preferred = preferred;
        }
        var viewOverview = function () {
            var self = this;

            self.communityAssets = ko.observableArray();

            self.clearAsset = function (data, event) {
                self.communityAssets.remove(data);
            };
            self.changePreference = function (data, event) {
                var pref = data.Preferred;
                $.ajax({
                    url: '/Communities/ChangePreference',
                    type: 'POST',
                    data: { assetId: data.ID, communityId: currentRowId, preferred: data.Preferred },
                    success: function (data) {
                        if (data === true) {
                            if (pref) {
                                saveSuccessfulMessage("Welcome Image successfully changed!");
                                $('.chckbxAll').prop('checked', false);
                                $(event.target).prop('checked', true);
                            } else {
                                saveSuccessfulMessage("Welcome Image successfully removed!");
                            }
                            return true;
                        } else {
                            saveUnsuccessful();
                            return false;
                        }
                    },
                    error: function () {
                        saveUnsuccessful();
                        return false;
                    }
                })
                return true;
            }

            self.Uploaders = {};
            self.addAsset = function () {
                var name = self.communityAssets().length;
                var asset = new CommunityAsset("/content/images/upload-image.png", "", name, "/content/images/upload-image.png");
                self.communityAssets.push(asset);
                createFineUploader(name);
            };
            self.addAssetWithParams = function (value, description, name, url, preferred, ID) {
                var asset = new CommunityAsset(value, description, name, url, preferred, ID);
                self.communityAssets.push(asset);

            };
            self.recreateUploaders = function (arg) {
                createFineUploader(arg.item.Name);
                if (arg.item.FileName != "") {
                    $("#fineUploader" + arg.item.Name + " .qq-upload-list").append('<li class=" alert alert-success"><span class="qq-upload-file">' + arg.item.FileName +
                    '</span><span class="qq-upload-size" style="display: inline;">' + arg.item.FileSize + '</span></li>');
                }
            };
            self.clear = function () {
                self.communityAssets.removeAll();
                self.Uploaders = {};
            };
        };
        if ($("#communityOverview").length > 0) {
            var vc = new viewOverview();
            ko.bindingHandlers.sortable.afterMove = vc.recreateUploaders;
            ko.applyBindings(vc, $("#communityOverview")[0]);
        }

        var viewLotsObject = new viewLots();
        ko.applyBindings(viewLotsObject, $("#lotsObjectBinding")[0]);
        if ($(".delete-all-lots-div").length > 0) {
            ko.applyBindings(viewLotsObject, $(".delete-all-lots-div")[0]);
        }

        //    var viewCustomDescription=new CommunityDescription();
        //     ko.applyBindings(viewCustomDescription, $("#communityDescription")[0]);


        var viewStatusObject = new viewStatus();
        ko.applyBindings(viewStatusObject, $(".lot-options")[0]);

        var batchLotInstance = new batchLot();
        ko.applyBindings(batchLotInstance, $(".edit-multiple-lots-div")[0]);

        ko.applyBindings(batchLotInstance, $("#lot-delete-bind")[0]);

        //ko.cleanNode($("#lot-delete-bind")[0]);
        //  ko.applyBindings(batchLotInstance, $("#mySmallModalLabel")[0]);

 @*function siteOverview()
 {

             if (siteID != "-1") {
                    var partnerID = parseInt(@ViewBag.PartnerID);
                    var newIsp = $('#isp').val();
                    if (newIsp=="false") {
                        var link = "/SiteOverview?siteID=" + siteID + "&partnerID=" + partnerID;
                    }
                    else {
                        var link = "/SiteOverview/newisp?siteID=" + siteID + "&partnerID=" + partnerID;
                    }
                    //var link = 'http://salesarchitect.exsquared.com/SiteOverview?siteID=1&partnerID=1'
                    var left = (screen.width - 840) / 2;
                    var top = (screen.height - 600) / 2;

                  window.open(link + "','SiteOverview', 'widtapp h=840,height=600,top=" + top + ",left=" + left + ",resizable=yes'" );

                }
        }*@
        function CommunitiesLoadCompleted() {
            var firstId = jQuery('#@(COMMUNITIES_GRID) tr').eq(1).attr("id");
            var SelectedCommunity = $("#hdSelectedCommunity").val();
            if (SelectedCommunity != "") {
                jQuery('#@(COMMUNITIES_GRID)').jqGrid('setSelection', SelectedCommunity);
                //  currentRowId = SelectedCommunity;
            }
            else {
                if (firstId != undefined) {
                    setTimeout(function () {
                        jQuery('#@(COMMUNITIES_GRID)').jqGrid('setSelection', firstId);
                        //  currentRowId=firstId;
                    }, 1000);
                }
            }

            @*@if (ViewData["CommunityId"] != null)
            {

            <text>
                setTimeout(function(){
               // jQuery('#@(COMMUNITIES_GRID)').jqGrid('setSelection','@((int)ViewData["CommunityId"])');
               // currentRowId = @((int)ViewData["CommunityId"]);
                //  loadProspects();
                }, 1000);

            </text>
            }*@

        }

        /* COMMON EVENTS */

        $('.tabChange').click(function () {
            //if ($(this).attr('id') == "ProspectsTab" && !prospectsLoaded) {
            //    //Remove all label success error labels
            //    $(".save-result").hide();
            //    loadProspects();
            //}
            if ($(this).attr('id') == "LotsTab" && !lotsLoaded) {
                //Remove all label success error labels
                $(".save-result").hide();
                loadLots();
            }
            if ($(this).attr('id') == "ConfigTab" && !configLoaded) {
                //Remove all label success error labels
                $(".save-result").hide();
                loadConfig();
            }
            if ($(this).attr('id') == "OverviewTab" && !overviewLoaded) {
                //Remove all label success error labels
                $(".save-result").hide();
                loadOverview();
            }
            if ($(this).attr('id') == "DescriptionTab" && !descriptionLoaded) {
                //Remove all label success error labels
                $(".save-result").hide();
                loadDescription();
            }
            if ($(this).attr('id') == "LayersTab" && !layersLoaded) {
                //Remove all label success error labels
                $(".save-result").hide();
                loadLayers();
            }
            if ($(this).attr('id') == "commCustomContentTab") {
                //Remove all label success error labels
                $(".save-result").hide();
                loadCommTitle();
                loadCommunityCustomizedContent();
            }
        });

        var siteID;
        var bdxCommunityID;
        var hasjson;
        var isGeoSVG;
        var isMasterGeoSVG;
        var communityLabel;
        var syncStatus;
        function onRowSelected(rowid, status) {
            if (currentRowId != rowid) {
                $("#ActivevateCommunity").hide();
                $("#LockCommunity").hide();
                $("#PreviewSiteMap").hide();
                $("#pluginISPPreview").hide();
                $("#pluginGeospatialPreview").hide();
                $("#googleMapISPPreview").hide();
                $("#MasterMapPreview").hide();
                $("#GeoMasterMapPreview").hide();
                $("#GlobalCommunityMapPreview").hide();
                $("#PluginMasterMapPreview").hide();
                $("#ActiveCommunity").hide();
                $("#InactiveCommunity").hide();
                $("#UnlockedCommunity").hide();
                $("#LockedCommunity").hide();
                $("#OverViewSite").hide();

                $("#hdSelectedCommunity").val(rowid);
                //Remove all label success error labels
                $(".save-result").hide();
                currentRowId = rowid;
                $("#CommunityName").text(getColumnData("#@(COMMUNITIES_GRID)", rowid, "Community"));
                $("#CommunityAddress").text(getColumnData("#@(COMMUNITIES_GRID)", rowid, "Address"));
                $("#CommunityBuilderBrand").text(getColumnData("#@(COMMUNITIES_GRID)", rowid, "Brands"));
                $("#CommunityAdmin").text(getColumnData("#@(COMMUNITIES_GRID)", rowid, "Community Admin"));
                var status = getColumnData("#Communities", rowid, "cell.ActivityState");
                var locked = getColumnData("#@(COMMUNITIES_GRID)", rowid, "Locked");
                $("#ActivevateCommunity").show();
                $("#LockCommunity").show();
                siteID = getColumnData("#@(COMMUNITIES_GRID)", rowid, "SiteID");
                MasterPlanID = getColumnData("#@(COMMUNITIES_GRID)", rowid, "MasterPlanID");
                bdxCommunityID = getColumnData("#@(COMMUNITIES_GRID)", rowid, "BDXId");
                hasjson = getColumnData("#@(COMMUNITIES_GRID)", rowid, "HasGeoJson");
                hasSvg = getColumnData("#@(COMMUNITIES_GRID)", rowid, "HasSVG");
                isGeoSVG = getColumnData("#@(COMMUNITIES_GRID)", rowid, "IsGeoSVG");
                isMasterGeoSVG = getColumnData("#@(COMMUNITIES_GRID)", rowid, "IsMasterGeoSVG");
                var newIsp = getColumnData("#@(COMMUNITIES_GRID)", rowid, "NewIsp");
                syncStatus =  getColumnData("#@(COMMUNITIES_GRID)", rowid, "cell.Status");
                communityLabel =  getColumnData("#@(COMMUNITIES_GRID)", rowid, "cell.ISPName");

                var left = (screen.width - 840) / 2;
                var top = (screen.height - 600) / 2;
                if (newIsp == "True") {
                    $('.isp1-color').hide();
                    $('#homesiteFilter').show();
                } else {
                    $('.isp1-color').show();
                    $('#homesiteFilter').hide();
                }

                if (siteID != "-1" && isGeoSVG == "False" && hasSvg == "True") {
                    $("#PreviewSiteMap").show();

                    //var newurl = "/SiteMapPreview?siteID=";
                    var link = ((newIsp == "True" || newIsp==true) ? "/SiteMapPreview/newisp?siteID=" : "/SiteMapPreview?siteID=") + siteID + "&communityID=" + currentRowId;
                    //var link = 'http://salesarchitect.exsquared.com/SiteMapPreview?siteID=1&communityID=3'
                    $('#siteMapPreview').attr("onClick", "window.open('" + link + "','SiteMapPreview', 'width=840,height=600,top=" + top + ",left=" + left + ",resizable=yes' )");

                    $("#pluginISPPreview").show();
                    var pluginLink = '@System.Configuration.ConfigurationManager.AppSettings["PluginBaseURL"]' + bdxCommunityID + '&suppressMasterInfo=false';
                    $('#ispPluginPreview').attr("onClick", "window.open('" + pluginLink + "','_blank')");
                }

                if (hasjson == "True" || isGeoSVG == "True") {
                    $("#googleMapISPPreview").show();
                    var googleMapsLink = "/ISP-3?bdxCommunityID=" + bdxCommunityID + "&Listings=true&Amenities=true" + (bdxCommunityID == 0 ? ("&communityId=" + currentRowId) : "");
                    $('#googleMapsPreview').attr("onClick", "window.open('" + googleMapsLink + "','_blank')");
                    $("#pluginGeospatialPreview").show();
                    var geoPluginLink = '@System.Configuration.ConfigurationManager.AppSettings["PluginBaseURL"]' + bdxCommunityID + '&ispVersion=3&amenities=true&allowListings=true';
                    $('#geospatialPluginPreview').attr("onClick", "window.open('" + geoPluginLink + "','_blank')");
                }
                if (isGeoSVG == "False" && hasSvg == "True") {
                    SetNewIspLink(newIsp);
                }
                if (MasterPlanID != "" && MasterPlanID != null) {
                    if (isMasterGeoSVG == "True") {
                        $("#GeoMasterMapPreview").show();
                        var masterPlanLink = "/ISP-3?bdxCommunityID=" + bdxCommunityID + "&Listings=true&masterPlan=true" + (bdxCommunityID == 0 ? ("&communityId=" + currentRowId) : "");
                        $('#geoMasterMapPreview').attr("onClick", "window.open('" + masterPlanLink + "','_blank')");
                        $("#GlobalCommunityMapPreview").show();
                        var globalCommunityMapLink = "/ISP-3?bdxCommunityID=" + bdxCommunityID + "&Listings=true&globalCommunityMap=true" + (bdxCommunityID == 0 ? ("&communityId=" + currentRowId) : "");
                        $('#globalCommunityMapPreview').attr("onClick", "window.open('" + globalCommunityMapLink + "','_blank')");
                    } else {
                        $("#MasterMapPreview").show();
                        // var newurl = (newIsp) ? "/SiteMapPreview/newsip?communityID=" : "/SiteMapPreview?communityID=";
                        var link = ((newIsp == "True" || newIsp == true) ? "/SiteMapPreview/newisp?communityID=" : "/SiteMapPreview?communityID=") + currentRowId + "&masterSiteID=" + MasterPlanID;
                        //var link = 'http://salesarchitect.exsquared.com/SiteMapPreview?siteID=1&communityID=3'
                        $('#masterMapPreview').attr("onClick", "window.open('" + link + "','masterMapPreview', 'width=840,height=600,top=" + top + ",left=" + left + ",resizable=yes' )");
                        $("#PluginMasterMapPreview").show();
                        var masterPlanLink = '@System.Configuration.ConfigurationManager.AppSettings["PluginBaseURL"]' + bdxCommunityID + '&masterPlan=true';
                        $('#pluginMasterMapPreview').attr("onClick", "window.open('" + masterPlanLink + "','_blank')");
                    }
                }
               
                if (status == "Inactive") {
                    //Publish
                    $('#ActivevateCommunity').attr("onclick", "ActiveInactive(" + currentRowId + ", 1);");
                    $('#ActivevateCommunity').text("Activate Community");
                    // Show inactive
                    $("#InactiveCommunity").show();
                }
                else {
                    $('#ActivevateCommunity').text("Inactivate Community");
                    //Unpublish
                    $('#ActivevateCommunity').attr("onclick", "ActiveInactive(" + currentRowId + ", 2);");
                    //Show Active
                    $("#ActiveCommunity").show();
                }

                if (locked == "True") {
                    //Community is locked
                    //Set the onclick to unlock
                    $('#LockCommunity').attr("onclick", "$('#lockModal').modal('show');");
                    $('#LockCommunity').text("Unlock Community");
                    // Show locked
                    $("#LockedCommunity").show();
                }
                else {
                    //Unlocked community
                    //Set the onclick to lock community
                    $('#LockCommunity').attr("onclick", "LockUnlockCommunity(" + currentRowId + ", true);");

                    $('#LockCommunity').text("Lock Community");

                    //Show Active
                    $("#UnlockedCommunity").show();
                }

                $('#table-header-plans').addClass('hide');
                $('#table-header-spec').addClass('hide');
                $('#model-home-header').addClass('hide');

                lotsLoaded, configLoaded, overviewLoaded, descriptionLoaded, layersLoaded, commTitleLoaded = false;
                var currentTab = $(".outer.tab-pane.active").attr('id');
                switch (currentTab) {
                    case "viewProspects":
                        loadProspects();
                        break;
                    case "manageLots":
                        loadLots();
                        break;
                    case "configuration":
                        loadConfig();
                        break;
                    case "communityOverview":
                        loadOverview();
                        break;
                    case "communityDescription":
                        loadDescription();
                        break;
                    case "manageLayers":
                        loadLayers();
                        break;
                    case "manageCommContent":
                        loadCommTitle();
                        loadCommunityCustomizedContent();
                        break;
                }
            }
        }

        function loadCommunityDetailsInModal({ id, bdxCommunityID, syncStatus, communityLabel }) {
            syncStatus =  getColumnData("#@(COMMUNITIES_GRID)", currentRowId, "cell.Status") ?? syncStatus;
            communityLabel = getColumnData("#@(COMMUNITIES_GRID)", currentRowId, "cell.ISPName")?? communityLabel;
            bdxCommunityID = getColumnData("#@(COMMUNITIES_GRID)", currentRowId, "BDXId") ?? bdxCommunityID;

            $('#editCommunity-btn').attr('data-id', id);
            $('#editCommunityLabel').val(communityLabel ?? '');
            if (syncStatus?.toLowerCase() == "false") {
                $('#edit-community-inactive').prop("checked", true);
            }
            else {
                $('#edit-community-active').prop("checked", true);
            }
            if (bdxCommunityID != 0) {
                $('#editBDXLiveId').val(bdxCommunityID);
                $('#editBDXLiveId').prop("readonly", true);
                $('input[name=editCommunityStatus]').prop("disabled", false);
            }
            else {
                $('#editBDXLiveId').val('');
                $('#editBDXLiveId').prop("readonly", false);
                $('input[name=editCommunityStatus]').prop("disabled", true);
            }
            $("#editCommunityModal").find(".alert-error").remove();
        }

        function SetNewIspLink(newIsp)
        {
            if (siteID != "-1") {
                var left = (screen.width - 840) / 2;
                var top = (screen.height - 600) / 2;
                var partnerID = parseInt(@ViewBag.PartnerID);
                var communityID = currentRowId;
                $("#OverViewSite").show();

                    if (newIsp == "False" || newIsp == false) {
                        var link = "/SiteOverview?siteID=" + siteID + "&partnerID=" + partnerID;
                        var mapPreviewlink = "/SiteMapPreview?siteID=" + siteID + "&communityID=" + communityID;
                        if (MasterPlanID != "" && MasterPlanID != null) {
                            var masterMapPreviewLink = "/SiteMapPreview/?masterSiteID=" + MasterPlanID + "&communityID=" + communityID;
                        }
                    }
                    else {
                        var link = "/SiteOverview/newisp?siteID=" + siteID + "&partnerID=" + partnerID;
                        var mapPreviewlink = "/SiteMapPreview/newisp?siteID=" + siteID + "&communityID=" + communityID;
                        if (MasterPlanID != "" && MasterPlanID != null) {
                            var masterMapPreviewLink = "/SiteMapPreview/newisp?masterSiteID=" + MasterPlanID + "&communityID=" + communityID;
                        }
                    }
                    //var link = 'http://salesarchitect.exsquared.com/SiteOverview?siteID=1&partnerID=1'
                $('#siteOverView').attr("onClick", "window.open('" + link + "','SiteOverview', 'widtapp h=840,height=600,top=" + top + ",left=" + left + ",resizable=yes' )");
                $('#siteMapPreview').attr("onClick", "window.open('" + mapPreviewlink + "','SiteMapPreview', 'widtapp h=840,height=600,top=" + top + ",left=" + left + ",resizable=yes' )");
                if (MasterPlanID != "" && MasterPlanID != null) {
                    $('#masterMapPreview').attr("onClick", "window.open('" + masterMapPreviewLink + "','MasterMapPreview', 'widtapp h=840,height=600,top=" + top + ",left=" + left + ",resizable=yes' )");
                }
            }
        }

        function ActiveInactive(commId, stateId) {
            $.ajax({
                url: '@Url.Action("ActiveInactive")',
                type: "POST",
                data: {
                    comunityId: commId,
                    stateId: stateId
                },
                dataType: "json",
                success: function (data, textStatus, xhr) {
                   $("#ActiveCommunity").hide();
                    $("#InactiveCommunity").hide();
                    if (stateId == 1) {
                        //Publish
                        $('#ActivevateCommunity').attr("onclick", "ActiveInactive(" + currentRowId + ", 2);");
                        $('#ActivevateCommunity').text("Inactivate Community");

                        // Show inactive
                        $("#ActiveCommunity").show();
                        jQuery("#@(COMMUNITIES_GRID)").jqGrid('setCell', commId, 'cell.ActivityState', 'Active');

                    }
                    else {
                        $('#ActivevateCommunity').text("Activate Community");
                        //Unpublish
                        $('#ActivevateCommunity').attr("onclick", "ActiveInactive(" + currentRowId + ", 1);");
                        //Show Active
                        $("#InactiveCommunity").show();
                        jQuery("#@(COMMUNITIES_GRID)").jqGrid('setCell', commId, 'cell.ActivityState', 'Inactive');
                    }
                },
                error: function (xhr, textStatus, errorThrown) {
                }
            });
        }

        function LockUnlockCommunity(commId, status) {
            if (commId != -1) {
                $.ajax({
                    url: '@Url.Action("LockUnlockCommunity")',
                    type: "POST",
                    data: {
                        comunityId: commId,
                        status: status
                    },
                    dataType: "json",
                    success: function (data, textStatus, xhr) {
                        $("#UnlockedCommunity").hide();
                        $("#LockedCommunity").hide();
                        if (!status) {
                            //Unlocked
                            $('#LockCommunity').attr("onclick", "LockUnlockCommunity(" + currentRowId + ", true);");
                            $('#LockCommunity').text("Lock Community");

                            // Show inactive
                            $("#UnlockedCommunity").show();
                            jQuery("#@(COMMUNITIES_GRID)").jqGrid('setCell', commId, 'Locked', 'False');

                        }
                        else {
                            //Locked
                            $('#LockCommunity').attr("onclick", "$('#lockModal').modal('show');");
                            $('#LockCommunity').text("Unlock Community");

                            // Show inactive
                            $("#LockedCommunity").show();
                            jQuery("#@(COMMUNITIES_GRID)").jqGrid('setCell', commId, 'Locked', 'True');
                        }
                    },
                    error: function (xhr, textStatus, errorThrown) {

                    }
                });
            }
        }


        /* PROSPECT TAB OPERATIONS */
        @*function loadProspects() {
            var urlp = '@Url.Action("GetProspects")' + '/' + currentRowId;
            setTimeout(function () {
                var gridParentWidth = $('#gbox_' + 'Prospects').parent().width();
                $('#' + 'Prospects').setGridWidth(gridParentWidth - 1);
                jQuery("#@(PROSPECTS_GRID)").jqGrid("setGridParam", { url: urlp }).trigger('reloadGrid', [{ page: 1 }]);
            }, 1000);

            prospectsLoaded = true;

        }*@

        /* LOTS TAB OPERATIONS */
        function loadLots() {
            $.ajax({
                url: '@Url.Action("GetLotInformationByCommunity")' + "/" + currentRowId + "?siteId=" + siteID,
                type: "POST",
                dataType: "json",
                success: function (data, textStatus, xhr) {
                    var titles = data.popupTitles;
                    $("#size-heading-label").html(titles.find(x => x.Code == "ISP2_POPUP_LOTSIZE").ConfigValue);
                    $("#pp-heading-label").html(titles.find(x => x.Code == "ISP2_POPUP_PRMPRICE").ConfigValue);
                    $("#block-heading-label").html(titles.find(x => x.Code == "ISP2_POPUP_BLOCK").ConfigValue);
                    $("#phase-heading-label").html(titles.find(x => x.Code == "ISP2_POPUP_PHASE").ConfigValue);
                    $("#elevation-heading-label").html(titles.find(x => x.Code == "ISP2_POPUP_ELEVATION").ConfigValue);
                    $("#swing-heading-label").html(titles.find(x => x.Code == "ISP2_POPUP_SWING").ConfigValue);
                    $("#address-heading-label").html(titles.find(x => x.Code == "ISP2_POPUP_ADDRESS").ConfigValue);

                    partnerholdALotEnabled = data.partnerholdALotEnabled;
                    commHoldAlotEnabled = data.holdALotCommConfig;
                    ResetCTA();
                    var newIsp = getColumnData("#@(COMMUNITIES_GRID)", currentRowId, "NewIsp");
                    if (newIsp == 'True') {
                        $('.section_new').show();
                        $('.Amenity-checkbox').show();
                        $('.isp1-color').hide();
                        $('#homesiteFilter').show();
                    }
                    else {
                        $('.section_new').hide();
                        $('.Amenity-checkbox').hide();
                        $('.isp1-color').show();
                        $('#homesiteFilter').hide();
                    }

                    //$('textarea#froala-editor').froalaEditor({
                    //    toolbarButtons: ['bold', 'italic', 'paragraphFormat', 'align', 'formatOL', 'formatUL', 'insertLink',],
                    //});
                    viewLotsObject.clear();
                    batchLotInstance.reset();
                    viewLotsObject.addLots(data.lots, data.lotCount);

                    /*$.each(data.lots, function (intIndex, planObject) {
                          var listing = { ID: planObject.ID, Name: planObject.Name };
                          viewLotsObject.listings.push(listing);
                    });*/
                    viewStatusObject.clearAll();
                    viewStatusObject.AddStatusesAndPlans(data.plans, data.status);

                    $(".tooltipBootstrap").tooltip();
                    //Click Event for lots
                    $('#lotsTable tr').click(function (event) {
                        if (event.ctrlKey || event.metaKey) {

                            if (!$(this).hasClass('active')) {
                                $(this).addClass('active');
                                loadBatchLot($(this).attr('id'));
                                $(".multi-hide").hide();
                                $("#managePlans").width("99%");
                                $("#manageSpecs").width("99%");
                                $(".delete-listing-header").show();
                                $(".delete-listing-td").show();
                            }
                            if (batchLotInstance.LotIDs().length == 1) {
                                loadLot($(this).attr('id'));
                                $(".multi-hide").show();
                                $("#managePlans").width("130%");
                                $("#manageSpecs").width("130%");
                                $(".delete-listing-header").hide();
                                $(".delete-listing-td").hide();
                            }
                        }
                        else if (event.target.type !== 'checkbox') {
                            //$(".edit-multiple-lots-div").hide();
                            $(this).siblings().removeClass('active');
                            $(this).addClass('active');
                            if (batchLotInstance) {
                                batchLotInstance.reset();
                                loadBatchLot($(this).attr('id'));
                            }

                            $(".multi-hide").show();
                            $("#managePlans").width("130%");
                            $("#manageSpecs").width("130%");
                            $(".delete-listing-header").hide();
                            $(".delete-listing-td").hide();
                            loadLot($(this).attr('id'));
                        }
                    });

                    $(".select-all-div").click(function () {
                        batchLotInstance.LotIDs.removeAll();
                        $('#lotsTable tr').each(function () {
                            $(this).addClass('active');
                            loadBatchLot($(this).attr('id'));
                        });
                    });

                    $(".deselect-all-div").click(function () {
                        viewStatusObject.AddLotInfo("", "", "", "");
                        loadLot(-1);
                        batchLotInstance.reset();
                        $('#lotsTable tr').each(function () {
                            $(this).removeClass('active');
                        });
                    });

                    $("#SitemapPreviewAvailable").hide();
                    $("#SitemapPreviewUnavailable").show();

                    if (data.sitePreview != "" && isGeoSVG == "False") {
                        $("#SitemapPreviewUnavailable").hide();
                        $("#SitemapPreviewAvailable").show();
                        $('#SitemapPreviewAvailable').attr('src', data.sitePreview);
                    }
                    $("#managePlans").width("99%");
                    $("#manageSpecs").width("99%");

                    //                var showSitePlan = $("#PreviewSiteMap").is(":visible");
                    //                if(showSitePlan)
                    //                {
                    //                  $("#SitemapPreviewAvailable").show();
                    //                  $("#SitemapPreviewUnavailable").hide();
                    //                }
                    //                else{
                    //                  $("#SitemapPreviewAvailable").hide();
                    //                  $("#SitemapPreviewUnavailable").show();
                    //                }

                },
                error: function (xhr, textStatus, errorThrown) {

                }
            });
            // loadLot(-1);

        }

        function loadOnlyLots() {
            $.ajax({
                url: '@Url.Action("GetLotInformationByCommunity")' + "/" + currentRowId + "?siteId=" + siteID,
                type: "POST",
                dataType: "json",
                success: function (data, textStatus, xhr) {

                    viewLotsObject.clear();
                    viewLotsObject.addLots(data.lots, data.lotCount);

                    $(".tooltipBootstrap").tooltip();
                    //Click Event for lots
                    $('#lotsTable tr').click(function (event) {
                        if (event.ctrlKey || event.metaKey) {
                            if (!$(this).hasClass('active')) {
                                $(this).addClass('active');
                                loadBatchLot($(this).attr('id'));
                                $(".multi-hide").hide();
                                $("#managePlans").width("99%");
                                $("#manageSpecs").width("99%");
                                $(".delete-listing-header").show();
                                $(".delete-listing-td").show();
                            }
                            if (batchLotInstance.LotIDs().length == 1) {
                                loadLot($(this).attr('id'));
                                $(".multi-hide").show();
                                $("#managePlans").width("130%");
                                $("#manageSpecs").width("130%");
                                $(".delete-listing-header").hide();
                                $(".delete-listing-td").hide();
                            }
                        }
                        else if (event.target.type !== 'checkbox') {
                            //$(".edit-multiple-lots-div").hide();
                            $(this).siblings().removeClass('active');
                            $(this).addClass('active');
                            if (batchLotInstance) {
                                batchLotInstance.reset();
                                loadBatchLot($(this).attr('id'));
                            }

                            $(".multi-hide").show();
                            $("#managePlans").width("130%");
                            $("#manageSpecs").width("130%");
                            $(".delete-listing-header").hide();
                            $(".delete-listing-td").hide();
                            loadLot($(this).attr('id'));
                        }
                    });
                },
                error: function (xhr, textStatus, errorThrown) {

                }
            });
        }

        function loadLayers() {
            $.ajax({
                url: '@Url.Action("GetLayerByCommunity")' + "/" + currentRowId,
                type: "POST",
                dataType: "json",
                success: function (data, textStatus, xhr) {
                    var blockHtml = data.baseRowHtml;
                    var svgLayerData = JSON.parse(data.svgLayers);
                    var svgBlocks = Object.keys(svgLayerData);
                    if (svgBlocks.length > 0) {

                        $("#error-nolayers").hide();
                        $("#manageLayerDiv").show();
                        $("#save-layers").show();
                        $(".manage-layer-block").show();
                        $(".block-header").show();
                        $("#layer-data-div").html(null);

                        svgBlocks.forEach(function (block) {

                            var blockDiv = document.createElement('div');
                            blockDiv.id = block;
                            blockDiv.className = "manage-layers";
                            blockDiv.classList.add("flex");
                            blockDiv.innerHTML = blockHtml;

                            // Block
                            if (block != "NoBlockLots") {
                                var blockCheckbox = document.createElement('input');
                                blockCheckbox.type = "checkbox";
                                blockCheckbox.id = "checkbox_" + block;
                                blockCheckbox.className = "column-block";
                                blockCheckbox.checked = true;
                                blockCheckbox.onchange = function () {
                                    var blockNumber = this.id.split('_')[2];
                                    if ($(this).is(':checked')) {
                                        $('.BlockNumber_' + blockNumber).prop('disabled', false);
                                    } else {
                                        $('.BlockNumber_' + blockNumber).prop('disabled', true);
                                    }
                                }
                                blockDiv.querySelector('.manage-layer-block').appendChild(blockCheckbox);
                            }

                            var blockLots = svgLayerData[block];
                            blockLots.forEach(function (lot) {

                                var lotId = lot.split('_')[1];
                                // Lots
                                var lotDiv = document.createElement('div');
                                lotDiv.className = 'datacell';
                                lotDiv.innerHTML = lotId;
                                blockDiv.querySelector('.manage-layer-lots').appendChild(lotDiv);

                                // Footprint
                                var footprintDiv = document.createElement('div');
                                footprintDiv.className = 'datacell';
                                var fpCheckbox = document.createElement('input');
                                fpCheckbox.type = "checkbox";
                                fpCheckbox.id = "checkbox_fp_" + lotId;
                                fpCheckbox.className = "column-footprint";
                                fpCheckbox.classList.add(block);
                                fpCheckbox.checked = true;
                                footprintDiv.appendChild(fpCheckbox);
                                blockDiv.querySelector('.manage-layer-footprint').appendChild(footprintDiv);

                                // Lot number
                                var lotnumberDiv = document.createElement('div');
                                lotnumberDiv.className = 'datacell';
                                var lnCheckbox = document.createElement('input');
                                lnCheckbox.type = "checkbox";
                                lnCheckbox.id = "checkbox_ln_" + lotId;
                                lnCheckbox.className = "column-lotnumber";
                                lnCheckbox.classList.add(block);
                                lnCheckbox.checked = true;
                                lotnumberDiv.appendChild(lnCheckbox);
                                blockDiv.querySelector('.manage-layer-lotnumber').appendChild(lotnumberDiv);

                                // Plan name
                                var plannameDiv = document.createElement('div');
                                plannameDiv.className = 'datacell';
                                var pnCheckbox = document.createElement('input');
                                pnCheckbox.type = "checkbox";
                                pnCheckbox.id = "checkbox_pn_" + lotId;
                                pnCheckbox.className = "column-planname";
                                pnCheckbox.classList.add(block);
                                pnCheckbox.checked = true;
                                plannameDiv.appendChild(pnCheckbox);
                                blockDiv.querySelector('.manage-layer-planname').appendChild(plannameDiv);

                                // All
                                var allDiv = document.createElement('div');
                                allDiv.className = 'datacell';
                                var allAnchor = document.createElement('a');
                                allAnchor.innerHTML = 'all';
                                allAnchor.setAttribute('data-class', lotId);
                                allAnchor.className = "row-all";
                                allDiv.appendChild(allAnchor);
                                blockDiv.querySelector('.manage-layer-all').appendChild(allDiv);

                                // None
                                var noneDiv = document.createElement('div');
                                noneDiv.className = 'datacell';
                                var noneAnchor = document.createElement('a');
                                noneAnchor.innerHTML = 'none';
                                noneAnchor.setAttribute('data-class', lotId);
                                noneAnchor.className = "row-none";
                                noneDiv.appendChild(noneAnchor);
                                blockDiv.querySelector('.manage-layer-none').appendChild(noneDiv);
                            });

                            $("#layer-data-div").append(blockDiv);
                        });

                        $(".column-all").on('click', function (e) {
                            $('.' + this.getAttribute('data-class') + ':enabled').prop("checked", true);
                            $('.' + this.getAttribute('data-class') + ':enabled').trigger("change");
                        });

                        $(".column-none").on('click', function (e) {
                            $('.' + this.getAttribute('data-class') + ':enabled').prop("checked", false);
                            $('.' + this.getAttribute('data-class') + ':enabled').trigger("change");
                        });

                        $(".row-all").on('click', function (e) {
                            $('#checkbox_fp_' + this.getAttribute('data-class') + ':enabled').prop("checked", true);
                            $('#checkbox_ln_' + this.getAttribute('data-class') + ':enabled').prop("checked", true);
                            $('#checkbox_pn_' + this.getAttribute('data-class') + ':enabled').prop("checked", true);
                        });

                        $(".row-none").on('click', function (e) {
                            $('#checkbox_fp_' + this.getAttribute('data-class') + ':enabled').prop("checked", false);
                            $('#checkbox_ln_' + this.getAttribute('data-class') + ':enabled').prop("checked", false);
                            $('#checkbox_pn_' + this.getAttribute('data-class') + ':enabled').prop("checked", false);
                        });

                        var hiddenBlocks = data.svgHiddenBlocks;
                        hiddenBlocks.forEach(function (hiddenBlock) {
                            $('#checkbox_BlockNumber_' + hiddenBlock.BlockNumber).prop('checked', false);
                            $('#checkbox_BlockNumber_' + hiddenBlock.BlockNumber).trigger("change");
                        });

                        var hiddenConfigs = data.svgHiddenLotConfigs;
                        hiddenConfigs.forEach(function (hiddenConfig) {
                            if (hiddenConfig.ConfigName == "FootPrint") {
                                $('#checkbox_fp_' + hiddenConfig.LotInternalReference).prop('checked', false);
                            } else if (hiddenConfig.ConfigName == "LotNumber") {
                                $('#checkbox_ln_' + hiddenConfig.LotInternalReference).prop('checked', false);
                            } else if (hiddenConfig.ConfigName == "PlanName") {
                                $('#checkbox_pn_' + hiddenConfig.LotInternalReference).prop('checked', false);
                            }
                        });

                        if (svgBlocks.length == 1 && svgBlocks[0] == "NoBlockLots") {
                            $(".manage-layer-block").hide();
                            $(".block-header").hide();
                        }

                    } else {
                        $("#error-nolayers").show();
                        $("#manageLayerDiv").hide();
                        $("#save-layers").hide();
                    }
                },
                error: function (xhr, textStatus, errorThrown) {

                }
            });
        }

        function saveLayers() {

            var svgUncheckedBlocks = [];
            $(".column-block:not(:checked)").each(function () {
                svgUncheckedBlocks.push(this.getAttribute("id").split("_")[2]);
            });
            var svgUncheckFootPrints = [];
            $(".column-footprint:not(:checked)").each(function () {
                svgUncheckFootPrints.push(this.getAttribute("id").split("_")[2]);
            });
            var svgUncheckLotNumbers = [];
            $(".column-lotnumber:not(:checked)").each(function () {
                svgUncheckLotNumbers.push(this.getAttribute("id").split("_")[2]);
            });
            var svgUncheckPlanName = [];
            $(".column-planname:not(:checked)").each(function () {
                svgUncheckPlanName.push(this.getAttribute("id").split("_")[2]);
            });

            var siteId = getColumnData("#@(COMMUNITIES_GRID)", currentRowId, "SiteID");
            var json = "{siteId: " + siteId + ",blocks: " + JSON.stringify(svgUncheckedBlocks) + ", footprints: " + JSON.stringify(svgUncheckFootPrints) + ", lotnumbers: " + JSON.stringify(svgUncheckLotNumbers) + ", planname: " + JSON.stringify(svgUncheckPlanName) + "}";

            $.ajax('@Url.Action("UpdateLayers")', {
                data: json,
                type: "post",
                contentType: 'application/json',
                dataType: 'json',
                success: function (data, textStatus, xhr) {

                    if (data.Success == "true") {
                        loadLayers();
                        saveSuccessful();
                    }
                    else {
                        saveUnsuccessful();
                    }
                    saving = false;
                },
                error: function () {
                    saving = false;
                    saveUnsuccessful();
                }
            });

        }

        function loadCommunityCustomizedContent() {
            $.ajax({
                url: '@Url.Action("GetCustomizedContentByCommunity")' + "/" + currentRowId,
                type: "POST",
                dataType: "json",
                success: function (data, textStatus, xhr) {
                    $('#customizedContentTable').html("");
                    var customizedContent = data.CommunityCustomizedContent;
                    for (var i = 0; i < customizedContent.length; i++) {
                        var itemDiv = document.createElement('div');
                        itemDiv.classList.add('color-selection');
                        itemDiv.classList.add('clearfix');
                        itemDiv.classList.add('customizedItemDiv');
                        var locationLabel = document.createElement('label');
                        locationLabel.style.width = '33%';
                        locationLabel.style.marginLeft = '5px';
                        locationLabel.innerText = customizedContent[i].CustomizedContentType.CustomizedLocations.Description;
                        itemDiv.appendChild(locationLabel);
                        var typeLabel = document.createElement('label');
                        typeLabel.style.width = '35%';
                        typeLabel.innerText = customizedContent[i].CustomizedContentType.ContentType;
                        itemDiv.appendChild(typeLabel);
                        if (customizedContent[i].CustomizedContentType.ContentType == "InternalModalLink" && customizedContent[i].Value != null && customizedContent[i].Value.trim() != "") {
                            var responseObj = JSON.parse(customizedContent[i].Value);
                            var valueDiv = document.createElement('div');
                            valueDiv.style.width = '100%';
                            var linkTextDiv = document.createElement('div');
                            var linkTitle = document.createElement('span');
                            linkTitle.innerHTML = '<B>Link Text: </B>';
                            linkTextDiv.appendChild(linkTitle);
                            var linkText = document.createElement('span');
                            linkText.innerText = responseObj.LinkText;
                            linkTextDiv.appendChild(linkText);
                            valueDiv.appendChild(linkTextDiv);
                            var modalContentDiv = document.createElement('div');
                            var modalTitle = document.createElement('span');
                            modalTitle.innerHTML = '<B>Modal Content: </B>';
                            modalContentDiv.appendChild(modalTitle);
                            var modalText = document.createElement('span');
                            modalText.innerText = responseObj.ModalContent;
                            modalContentDiv.appendChild(modalText);
                            valueDiv.appendChild(modalContentDiv);
                            itemDiv.appendChild(valueDiv);
                        } else {
                            var valueLabel = document.createElement('label');
                            valueLabel.style.width = '100%';
                            valueLabel.innerText = customizedContent[i].Value;
                            valueLabel.style.marginRight = '10px';
                            valueLabel.style.wordBreak = 'break-all';
                            itemDiv.appendChild(valueLabel);
                        }
                        var editButton = document.createElement('button');
                        editButton.id = customizedContent[i].ID;
                        editButton.setAttribute('data-set-value', customizedContent[i].Value);
                        editButton.classList.add('btn');
                        editButton.classList.add('btn-primary');
                        editButton.classList.add('pull-right');
                        editButton.classList.add('editCustomContent');
                        editButton.style.marginRight = '10px';
                        editButton.innerText = 'Edit';
                        itemDiv.appendChild(editButton);
                        let locationCode = customizedContent[i].CustomizedContentType.CustomizedLocations.LocationCode;
                        if (locationCode == "PopupFooter" || locationCode == "LeadFormHeader" || locationCode == "LeadFormTnC" || locationCode == "LeadFormFooter") {
                            itemDiv.classList.add("no-holdalot");
                        }
                        $('#customizedContentTable').append(itemDiv);
                    }

                    $('.editCustomContent').click(function () {
                        showCommunityEditContentWindow('#communityCustomContentModal', this.id, this.getAttribute('data-set-value'));
                    });
                    var communityHoldALot = data.holdALotCommConfig;
                    if ('@ViewBag.HoldALotEnabled'.toLowerCase() == 'false' || communityHoldALot.toLowerCase() == 'false') {
                        $(".customizedItemDiv").not(".no-holdalot").hide();
                    } else {
                        $(".customizedItemDiv").not(".no-holdalot").show();
                    }
                },
                error: function (xhr, textStatus, errorThrown) {

                }
            });
        }

        function showCommunityEditContentWindow(modalSelector, recordID, currentValue) {

            var modalReference = $(modalSelector);
            var contentSelector = modalReference.find(".edit-content-modal-body");
            var remoteURL = modalReference.attr("data-remote-url");

            //jquery ajax code
            $.ajax({
                url: remoteURL,
                type: "POST",
                data: { recordID: recordID, isCommunityRecord: true, currentValue: escape(currentValue) },
                success: function (data, textStatus, xhr) {
                    contentSelector.html(data);
                    modalReference.modal("show");
                },
                error: function (xhr, textStatus, errorThrown) {

                },
                cache: false
            });
        }

        $(function () {
            $('.comm-title-input').on('keydown', function () {
                var _this = this;
                setTimeout(function () {
                    switch (_this.dataset.bind) {
                        case "COMM_POPUP_HOMESITE": $('#commHomesite').html($('#commlotHomesite').val() + " 31 / Available");
                            break;
                        case "COMM_POPUP_LOTSIZE": $('#commlotsize').html('<strong>' + $('#commlotSize').val() + ':' + '</strong>');
                            break;
                        case "COMM_POPUP_PRMPRICE": $('#commlotpremium').html('<strong>' + $('#commlotPremiumPrice').val() + ': ' + '</strong>' + '<span>$900.00</span>');
                            break;
                        case "COMM_POPUP_BLOCK": $('#commlotblock').html('<strong>' + $('#commlotBlock').val() + ':' + '</strong>');
                            break;
                        case "COMM_POPUP_PHASE": $('#commlotphase').html('<strong>' + $('#commlotPhase').val() + ':' + '</strong>');
                            break;
                        case "COMM_POPUP_SWING": $('#commlotswing').html('<strong>' + $('#commlotSwing').val() + ':' + '</strong>');
                            break;
                        case "COMM_POPUP_ELEVATION": $('#commlotelevation').html('<strong>' + $('#commlotElevation').val() + ':' + '</strong>');
                            break;
                        case "COMM_POPUP_ADDRESS": $('#commlotaddress').html('<strong>' + $('#commlotAddress').val() + ': ' + '</strong>' + '<span>6632 Starcross Drive</span>');
                            break;
                    }
                }, 0);
            });
        });

          function ResetCommTitleLabels() {
              $(".comm-title-input").each(function () {
                  this.value = '';
              });

              $('#commHomesite').html("Homesite 31 / Available");
              $('#commlotsize').html('<strong>Size:</strong>');
              $('#commlotpremium').html('<strong>Premium Price: </strong><span>$900</span>');
              $('#commlotblock').html('<strong>Block:</strong>');
              $('#commlotphase').html('<strong>Phase:</strong>');
              $('#commlotswing').html('<strong>Swing:</strong>');
              $('#commlotelevation').html('<strong>Elevation:</strong>');
              $('#commlotaddress').html('<strong>Address: </strong><span>6632 Starcross Drive</span>');
          }

          function loadCommTitle() {
              $.ajax({
                url: '@Url.Action("GetCommunityTitleSettings")' + "/" + currentRowId,
                type: "POST",
                dataType: "json",
                  success: function (data, textStatus, xhr) {
                      ResetCommTitleLabels();
                      var commTitles = data.commTitles;
                      commTitles.forEach(function (title) {
                          var inputField = $('*[data-bind="' + title.Code + '"]')[0];
                          inputField.value = title.Value;

                          switch (title.Code) {
                              case "COMM_POPUP_HOMESITE": $('#commHomesite').html((title.Value.trim() != '' ? title.Value : 'Homesite') + " 31 / Available");
                                  break;
                              case "COMM_POPUP_LOTSIZE": $('#commlotsize').html('<strong>' + (title.Value.trim() != '' ? title.Value : 'Size') + ':' + '</strong>');
                                  break;
                              case "COMM_POPUP_PRMPRICE": $('#commlotpremium').html('<strong>' + (title.Value.trim() != '' ? title.Value : 'Premium Price') + ': ' + '</strong>' + '<span>$900</span>');
                                  break;
                              case "COMM_POPUP_BLOCK": $('#commlotblock').html('<strong>' + (title.Value.trim() != '' ? title.Value : 'Block') + ':' + '</strong>');
                                  break;
                              case "COMM_POPUP_PHASE": $('#commlotphase').html('<strong>' + (title.Value.trim() != '' ? title.Value : 'Phase') + ':' + '</strong>');
                                  break;
                              case "COMM_POPUP_SWING": $('#commlotswing').html('<strong>' + (title.Value.trim() != '' ? title.Value : 'Swing') + ':' + '</strong>');
                                  break;
                              case "COMM_POPUP_ELEVATION": $('#commlotelevation').html('<strong>' + (title.Value.trim() != '' ? title.Value : 'Elevation') + ':' + '</strong>');
                                  break;
                              case "COMM_POPUP_ADDRESS": $('#commlotaddress').html('<strong>' + (title.Value.trim() != '' ? title.Value : 'Address') + ': ' + '</strong>' + '<span>6632 Starcross Drive</span>');
                                  break;
                          }
                      });
                },
                error: function (xhr, textStatus, errorThrown) {

                }
            });
          }

          var commTitleArray = {};
          function saveCommTitle() {
              $(".comm-title-input").each(function () {
                  commTitleArray[this.dataset.bind] = this.value;
              });
              var json = "{ communityId: " + JSON.stringify(currentRowId) + ", commTitleArray: " + JSON.stringify(commTitleArray) + " }";
              $.ajax('@Url.Action("UpdateCommunityTitleSettings")', {
                  data: json,
                  type: "post",
                  contentType: 'application/json',
                  dataType: 'json',
                  success: function (data, textStatus, xhr) {
                      if (data.Success == "true") {
                          loadCommTitle();
                          saveSuccessful();
                      }
                      else {
                          saveUnsuccessful();
                      }
                  },
                  error: function () {
                      saveUnsuccessful();
                  }
              });
          }

        function loadBatchLot(id) {
            viewStatusObject.clear();
            viewStatusObject.AddLotInfo("", "", "", "");
            batchLotInstance.addLotsToBatch(id);
        }

        function loadLot(id) {
            if (id != undefined) {
                $(".save-result").hide();
                selectedLot = id;
                $.ajax({
                    url: '@Url.Action("GetLotInformation")' + '/' + id,
                    type: "POST",
                    dataType: "json",
                    success: function (data, textStatus, xhr) {
                        $('.validationMessage').css('display', 'none');
                        $('.feevalidationMessage').css('display', 'none');

                        if (data.status > 0) {
                            viewStatusObject.AddSelectedValues(data.status);
                        }
                        console.log(jQuery('#Communities').jqGrid('getCell', currentRowId, 'NewIsp'));
                        viewStatusObject.clearAll();
                        viewStatusObject.AddPlans(data.planList);
                        viewStatusObject.AddSpecs(data.specList);
                        viewStatusObject.AddModels(data.modelList);
                        if (data.reservationFee == 0) {
                            data.reservationFee = '';
                        }
                        viewStatusObject.AddLotInfo(data.block, data.size, id, data.phase, data.elevation, data.swing, data.description, data.address, data.InternalReference, data.premiumPrice, jQuery('#Communities').jqGrid('getCell', currentRowId, 'NewIsp'), data.imagePath, data.contactLink, data.lotDescription, data.buttonText, data.isAmenity,data.displayName,data.externalReference, data.videoURL,data.reservationFee);
                        $.each(data.listings, function (intIndex, objValue) {
                            if (objValue != null)
                                viewStatusObject.AddSelectedPlan("" + objValue.ID);
                        });

                        if (partnerholdALotEnabled == false || commHoldAlotEnabled == 'FALSE') {
                            $('.reservationFee').css('display', 'none');
                        } else if (partnerholdALotEnabled == true || commHoldAlotEnabled == 'TRUE') {
                            $('.reservationFee').css('display', 'block');
                        }
                        if (data.status > 0) {
                            viewStatusObject.AddSelectedValues(data.status);
                        }
                        CKEDITOR.instances['descriptionEditor'].setData(data.lotDescription);
                        $('#lotImagePath').val(data.imagePath);

                        if (data.imagePath != null) {
                            $('.image_uploaded').show();
                            $('.lotimageremove').show();
                            $('#lot-image').attr('src', '/Communities/GetLotImage/' + id);
                        }
                        else {
                            $('#lot-image').attr('src', '#');
                            $('.image_uploaded').hide();
                            $('#loader').hide();
                            $('.lotimageremove').hide();
                            //$('.uploaded-image').hide();

                        }
                        //ko.applyBindings(viewStatus, $("#test45")[0]);
                        $('#table-header-plans').removeClass('hide');
                        $('#table-header-spec').removeClass('hide');
                        if (data.modelList.length > 0) {
                            $('#model-home-header').removeClass('hide');
                        }
                        $.each(data.planList, function (intIndex, plan) {
                            if (plan != null && plan.SelectedElevation != "") {
                                $("#elevationbutton_" + plan.ID).hide();
                                $("#elevationimage_" + plan.ID).show();
                                $("#elevationimage_" + plan.ID).attr('src', plan.SelectedElevation);
                                $("#elevationimage_" + plan.ID).attr('data-image-id', plan.SelectedElevationImageId);
                                $("#elevationTitle_" + plan.ID).show();
                                if (plan.SelectedElevationType != "Interior") {
                                    $("#elevationTitle_" + plan.ID).html("<strong>Title: </strong>" + plan.SelectedElevationTitle);
                                } else {
                                    $("#elevationTitle_" + plan.ID).html("");
                                }
                                $("#elevationImageId_" + plan.ID).show();
                                $("#elevationImageId_" + plan.ID).html("<strong>Elevation Image ID: </strong>" + plan.SelectedElevationImageId);
                            } else {
                                $("#elevationbutton_" + plan.ID).show();
                                $("#elevationimage_" + plan.ID).hide();
                                $("#elevationimage_" + plan.ID).attr('src', plan.SelectedElevation);
                                $("#elevationimage_" + plan.ID).attr('data-image-id', plan.SelectedElevationImageId);
                                $("#elevationTitle_" + plan.ID).hide();
                                $("#elevationImageId_" + plan.ID).hide();
                            }
                        });
                        $.each(data.specList, function (intIndex, spec) {
                            if (spec != null && spec.SelectedElevation != "") {
                                $("#elevationbutton_" + spec.ID).hide();
                                $("#elevationimage_" + spec.ID).show();
                                $("#elevationimage_" + spec.ID).attr('src', spec.SelectedElevation);
                                $("#elevationimage_" + spec.ID).attr('data-image-id', spec.SelectedElevationImageId);
                                $("#elevationTitle_" + spec.ID).show();
                                if (spec.SelectedElevationType != "Interior") {
                                    $("#elevationTitle_" + spec.ID).html("<strong>Title: </strong>" + spec.SelectedElevationTitle);
                                } else {
                                    $("#elevationTitle_" + spec.ID).html("");
                                }
                                $("#elevationImageId_" + spec.ID).show();
                                $("#elevationImageId_" + spec.ID).html("<strong>Elevation Image ID: </strong>" + spec.SelectedElevationImageId);

                            } else {
                                $("#elevationbutton_" + spec.ID).show();
                                $("#elevationimage_" + spec.ID).hide();
                                $("#elevationimage_" + spec.ID).attr('src', spec.SelectedElevation);
                                $("#elevationimage_" + spec.ID).attr('data-image-id', spec.SelectedElevationImageId);
                                $("#elevationTitle_" + spec.ID).hide();
                                $("#elevationImageId_" + spec.ID).hide();

                            }
                        });
                        $.each(data.modelList, function (intIndex, model) {
                            if (model != null && model.SelectedElevation != "") {
                                $("#elevationbutton_" + model.ID).hide();
                                $("#elevationimage_" + model.ID).show();
                                $("#elevationimage_" + model.ID).attr('src', model.SelectedElevation);
                                $("#elevationimage_" + model.ID).attr('data-image-id', model.SelectedElevationImageId);
                                $("#elevationTitle_" + model.ID).show();
                                if (model.SelectedElevationType != "Interior") {
                                    $("#elevationTitle_" + model.ID).html("<strong>Title: </strong>" + model.SelectedElevationTitle);
                                } else {
                                    $("#elevationTitle_" + model.ID).html("");
                                }
                                $("#elevationImageId_" + model.ID).show();
                                $("#elevationImageId_" + model.ID).html("<strong>Elevation Image ID: </strong>" + model.SelectedElevationImageId);

                            } else {
                                $("#elevationbutton_" + model.ID).show();
                                $("#elevationimage_" + model.ID).hide();
                                $("#elevationimage_" + model.ID).attr('src', model.SelectedElevation);
                                $("#elevationimage_" + model.ID).attr('data-image-id', model.SelectedElevationImageId);
                                $("#elevationTitle_" + model.ID).hide();
                                $("#elevationImageId_" + model.ID).hide();

                            }
                        });
                        $('.selectElevation').click(function () {
                            if($(":checkbox[value=" + $(this).attr('id').split("_")[1] + "]").is(':checked')) {
                                showElevationWindow('#SelectElevationModal', $(this).attr('id').split("_")[1], selectedLot, $('#elevationimage_' + $(this).attr('id').split("_")[1]).attr('data-image-id'))
                            }
                        });
                        $('.listing-checkbox').each(function (i, checkbox) {
                            toggleElevationButton(checkbox);
                        });
                        //Call-To-Action
                        ResetCTA();
                        $.each(data.callToAction, function (intIndex, cta) {
                            var ctaHtml = $.parseHTML('<div class="span10 form-inline section_new_cta lotStatusEditor" style="border:1px solid #00b0f0; position: relative;padding-top: 20px;"><button class="btn btn-primary isp-cta-remove"> X</button><div class="control-group"><label for="contact" style="width:36%;">Call-To-Action URL</label><input class="cta-url" type="text" name="contact" size="25" maxlength="500" style="vertical-align: top; width:60%;" /><span class="cta-url-error" style="color: red;font-size: 11px;margin-left: 37%;display:none;">Enter Call-To-Action URL</span></div><div class="control-group"><label for="description" style="width:36%;">Call-To-Action Button Text</label><input class="cta-text" type="text" name="buttonText" style="width:60%;" maxlength="100" /><span class="cta-text-error" style="color: red;font-size: 11px;margin-left: 37%;display:none;">Enter Call-To-Action Button Text</span></div></div>')[0];
                            ctaVisibilityCount += 1;
                            var ctaNumber = deletedCTA.shift();
                            ctaHtml.id = "isp-cta-" + ctaNumber;
                            var crossBtn = $(ctaHtml).find(".isp-cta-remove")[0];
                            crossBtn.id = "isp-cta-remove-" + + ctaNumber;
                            var ctaURL = $(ctaHtml).find(".cta-url")[0];
                            ctaURL.id = "isp-cta-url-" + + ctaNumber;
                            var ctaText = $(ctaHtml).find(".cta-text")[0];
                            ctaText.id = "isp-cta-text-" + + ctaNumber;
                            document.getElementById("isp-cta-div").appendChild(ctaHtml);

                            crossBtn.onclick = function () {
                                var ctaID = this.id.split("isp-cta-remove-")[1];
                                ctaVisibilityCount -= 1;
                                deletedCTA.push(ctaID);
                                deletedCTA.sort();
                                if (ctaVisibilityCount == 4) {
                                    $("#isp-add-cta-btn").attr("disabled", true);
                                } else {
                                    $("#isp-add-cta-btn").attr("disabled", false);
                                }
                                $(this).parent().remove();
                            };
                            $("#isp-cta-url-" + ctaNumber).val(cta.Value);
                            $("#isp-cta-text-" + ctaNumber).val(cta.Name);
                        });
                        if (ctaVisibilityCount == 4) {
                            $("#isp-add-cta-btn").attr("disabled", true);
                        } else {
                            $("#isp-add-cta-btn").attr("disabled", false);
                        }
                        $("#managePlans").width("130%");
                        $("#manageSpecs").width("130%");
                    },
                    error: function (xhr, textStatus, errorThrown) {

                    }
                });
            }
        }

        function ResetCTA() {
            $(".section_new_cta").remove();
            ctaVisibilityCount = 0;
            deletedCTA = [1, 2, 3, 4];
            $("#isp-add-cta-btn").attr("disabled", false);
        }

        function saveLotInfo() {
            if (batchLotInstance.LotIDs().length > 1) {
                var dataJson = viewStatusObject.ReturnLotObject();
                var dataObject = ko.toJS(dataJson);
                if (dataJson.LotState.ID == 0) {
                    saveUnsuccessful();
                    $("#confirmationMessage").text("Please select a value for Lot Status");
                }
                else
                    if (bdxCommunityID == 0 && !dataObject.contactLink?.trim() && dataObject.buttonText?.trim()) {
                    saveUnsuccessful();
                    $("#confirmationMessage").text("You cannot enable the request form until this Community has been linked to BDXLive.");
                }
                else {
                    batchLotInstance.populateFromLot(dataJson);
                    var data = ko.toJSON(batchLotInstance);
                    $.ajax('@Url.Action("UpdateLotBatch")', {
                        data: data,
                        type: "post",
                        contentType: 'application/json',
                        dataType: 'json',
                        success: function (data, textStatus, xhr) {
                            if (data.Success == "true") {
                                saveSuccessful();
                                loadLots();
                                CKEDITOR.instances['descriptionEditor'].setData();
                            }
                            else {
                                saveUnsuccessful();
                            }

                        }
                    });
                }
            }
            else if (viewStatusObject.id() != -1) {
                var dataJson = viewStatusObject.ReturnLotObject();
                var dataObject = ko.toJS(dataJson);
                if (dataObject.contactLink != null && dataObject.contactLink.length > 0 && !(dataObject.buttonText != null && dataObject.buttonText.length > 0))
                {
                    alert("Please enter contact button text.");
                    return;
                }                
                if (bdxCommunityID == 0 && !dataObject.contactLink?.trim() && dataObject.buttonText?.trim()) {
                    saveUnsuccessful();
                    $("#confirmationMessage").text("You cannot enable the request form until this Community has been linked to BDXLive.");
                    return;
                }
                var error = true;
                var regexPattern = /^\d+(\.\d{1,2})?$/;
                if (dataJson.Listings.length > 0) {
                    for (var a = 0; a < dataJson.Listings.length; a++) {
                        if (typeof (dataJson.Listings[a]) != "undefined" && typeof (dataJson.Listings[a].TotalPrice) != "undefined" && dataJson.Listings[a].TotalPrice != "")
                            error = regexPattern.test(dataJson.Listings[a].TotalPrice);
                        if (!error) {
                            saveUnsuccessfulMessage("Plan prices are not Valid. Please check the Plan Prices.");
                            return false;
                        }
                    }
                }
                var ctaError = false;
                dataJson.CallToAction = [];
                $(".section_new_cta:visible").each(function () {
                    var missingData = false;
                    var ctaUrl = $(this).find('[id*="isp-cta-url-"]')[0].value;
                    if (ctaUrl.trim() == '') {
                        $(this).find('.cta-url-error').show();
                        ctaError = true;
                        missingData = true;
                    } else {
                        $(this).find('.cta-url-error').hide();
                    }

                    var ctaText = $(this).find('[id*="isp-cta-text-"]')[0].value;
                    if (ctaText.trim() == '') {
                        $(this).find('.cta-text-error').show();
                        ctaError = true;
                        missingData = true;
                    } else {
                        $(this).find('.cta-text-error').hide();
                    }

                    if (!missingData) {
                        dataJson.CallToAction.push({ Name: ctaText, Value: ctaUrl });
                    }
                });
                if (ctaError) {
                    return false;
                }
                if (dataJson.LotState.ID == 0) {
                    saveUnsuccessful();
                    $("#confirmationMessage").text("Please select a value for Lot Status");
                }
                else {
                    var regexlpp = /^\d*[0-9]\d*$/;
                    var regexReservation = /^\d*[1-9.]\d*$/;
                    var isValid = regexlpp.test(viewStatusObject.premiumPrice())
                    var isreservationFeeValid = regexReservation.test(viewStatusObject.reservationFee());
                    if ((isValid || viewStatusObject.premiumPrice() == null || typeof (viewStatusObject.premiumPrice()) == "undefined" || viewStatusObject.premiumPrice() == "")
                        && ((isreservationFeeValid && viewStatusObject.reservationFee() >= 1) || viewStatusObject.reservationFee() == null || typeof (viewStatusObject.reservationFee()) == "undefined" || viewStatusObject.reservationFee() == "")) {
                        var updatedLot = dataJson.ID();
                        $.ajax('@Url.Action("UpdateLot")', {
                            data: ko.toJSON(dataJson),
                            type: "post",
                            contentType: 'application/json',
                            dataType: 'json',
                            success: function (data, textStatus, xhr) {
                                if (data.Success == "true") {
                                    saveSuccessful();
                                    loadOnlyLots();
                                    setTimeout(function () {
                                        $("#" + updatedLot).addClass('active');
                                    }, 2000);
                                }
                                else {
                                    $("#confirmationMessage").text(textStatus);
                                    saveUnsuccessful();
                                }

                            }
                        });
                    }
                    else {
                        if ((!isValid && (viewStatusObject.premiumPrice() != null && typeof (viewStatusObject.premiumPrice()) != "undefined" && viewStatusObject.premiumPrice() != ""))) {
                            $('.validationMessage').css('display', 'block');
                        }
                        if (!isreservationFeeValid && viewStatusObject.reservationFee() == null  && typeof (viewStatusObject.reservationFee()) == "undefined" && viewStatusObject.reservationFee() == "") {
                            $('.feevalidationMessage').css('display', 'block');
                        }
                        if (viewStatusObject.reservationFee() < 1) {
                            $('.feevalidationMessageNew').css('display', 'block');
                        }
                    }
                }
            }
        }


        function deleteAllLots() {
            if (currentRowId >= 0) {
                $('#pop-div').modal('show');
                var siteId = getColumnData("#@(COMMUNITIES_GRID)", currentRowId, "SiteID");
                var communityId = getColumnData("#@(COMMUNITIES_GRID)", currentRowId, "ID");
                var hasgeojson = getColumnData("#@(COMMUNITIES_GRID)", currentRowId, "HasGeoJson");
                if (siteId >= 0 || hasgeojson == "True") {
                    var siteInstance = new Object();
                    siteInstance.siteId = siteId;
                    siteInstance.communityId = communityId;
                    var data = JSON.stringify(siteInstance);
                    $.ajax('@Url.Action("DeleteAllLots")', {
                        data: data,
                        type: "post",
                        contentType: 'application/json',
                        dataType: 'json',
                        success: function (data, textStatus, xhr) {
                            if (data.Success == "true") {
                                jQuery("#@(COMMUNITIES_GRID)").jqGrid().setGridParam({ datatype: 'json' });
                                jQuery("#@(COMMUNITIES_GRID)").jqGrid().trigger('reloadGrid');
                                $("#OverViewSite").hide();
                                $("#PreviewSiteMap").hide();
                                $("#pluginISPPreview").hide();
                                $("#pluginGeospatialPreview").hide();
                                $("#googleMapISPPreview").hide();
                                //$("#MasterMapPreview").hide();
                                loadLots();
                                saveSuccessful();
                                $("#SitemapPreviewAvailable").hide();
                                $("#SitemapPreviewUnavailable").show();
                            }
                            else {
                                saveUnsuccessful();
                            }
                        }
                    });
                }
            }
        }



        function deleteLotInfo() {
            if (batchLotInstance.LotIDs().length > 0) {
                var p = batchLotInstance.populateFromLot(viewStatusObject.ReturnLotObject());
                var data = ko.toJSON(batchLotInstance);

                $.ajax('@Url.Action("DeleteLotBatch")', {
                    data: data,
                    type: "post",
                    contentType: 'application/json',
                    dataType: 'json',
                    success: function (data, textStatus, xhr) {
                        if (data.Success == "true") {
                            jQuery("#@(COMMUNITIES_GRID)").jqGrid().setGridParam({ datatype: 'json' });
                            jQuery("#@(COMMUNITIES_GRID)").jqGrid().trigger('reloadGrid');
                            loadLots();
                            saveSuccessful();
                        }
                        else {
                            saveUnsuccessful();
                        }

                    }
                });
            }
        }

        function getLotState(arrayStatus, selectedValue) {
            var i = 0;
            var length = arrayStatus.length;
            for (var i = 0; i < length; i++) {
                if (arrayStatus[i].ID == selectedValue)
                    break;
            }
            return i;
        }

        /* CONFIG TAB OPERATIONS */
        function newLotStatus() {
            if (currentRowId != -1 && $("#newLotStatusText").val() != "") {
                var json = "{ id: " + JSON.stringify(currentRowId) + ", color: " + JSON.stringify($("#newLotStatusColor").val()) + ", status: " + JSON.stringify($("#newLotStatusText").val()) + ", configurations: " + ko.toJSON(viewConfiguration.communityConfiguration()) + " }";
                $.ajax('@Url.Action("NewLotStatus")', {
                    data: json,
                    type: "post",
                    contentType: 'application/json',
                    dataType: 'json',
                    success: function (data, textStatus, xhr) {
                        if (data.Success == "true") {
                            saveSuccessful();
                            loadConfig();
                        }
                        else if (data.Success == "false") {
                            saveUnsuccessful();
                            $("#confirmationMessage").text("Status name already exist..");
                            loadConfig();
                        }
                        else {
                            saveUnsuccessful();
                        }
                    }
                });
            }
        }

        function EditLotStatusName(element) {
            var data = $(element).closest('.color-selection').find('.configId').attr('id');

            var modalReference = $("#editLotStatusNameModal");
            var contentSelector = modalReference.find(".edit-lot-status-name-body");
            var remoteURL = modalReference.attr("data-remote-url");

            //jquery ajax code
            $.ajax({
                url: remoteURL,
                type: "POST",
                data: { configId: data },
                success: function (data, textStatus, xhr) {
                    contentSelector.html(data);
                    modalReference.modal("show");
                },
                error: function (xhr, textStatus, errorThrown) {

                },
                cache: false
            });
        }

        function deleteLotStatusColorScheme(element) {

            var data = $(element).closest('.color-selection').find('.configId').attr('id');
            if (confirm("Are you sure, you want to delete?"))
            {
                $.ajax('@Url.Action("DeleteLotStatusColorScheme")', {
                    data: "{ configId: " + JSON.stringify(data) + " }",
                    type: "post",
                    contentType: 'application/json',
                    dataType: 'json',
                    success: function (data, textStatus, xhr) {

                        if (data.Success == "true") {
                            loadConfig();
                            saveSuccessful();
                        }
                        else {
                            if (data.Confirm == "true") {
                                if (confirm(data.Message)) {
                                    deleteCommunityAssignedStatus(element);
                                }
                            } else {
                                alert(data.Message);
                            }
                        }
                        saving = false;
                    },
                    error: function () {
                        saving = false;
                    }
                });
            }
        }

        function deleteCommunityAssignedStatus(element) {
            var data = $(element).closest('.color-selection').find('.configId').attr('id');
            $.ajax('@Url.Action("DeleteCommunityAssignedLotStatus")', {
                data: "{ configId: " + JSON.stringify(data) + " }",
                type: "post",
                contentType: 'application/json',
                dataType: 'json',
                success: function (data, textStatus, xhr) {
                    if (data.Success == "true") {
                        loadConfig();
                        saveSuccessful();
                    }
                    saving = false;
                },
                error: function () {
                    saving = false;
                }
            });
        }

        var Sequence = 1;
        var showDreamweaverConfig;
        var isCommDWConfig;
        var partnerHoldALotConfig;
        var isBHIAdmin = '@Roles.IsUserInRole("BHIADMIN")';
        function loadConfig() {

            if (currentRowId != -1) {
                $.ajax({
                    url: '@Url.Action("GetConfiguration")' + '/' + currentRowId,
                    type: "POST",
                    dataType: "json",
                    success: function (data, textStatus, xhr) {
                        console.log(data);
                        viewStatusObject.AddPaymentAccountInformation(data.accountListing);
                        viewStatusObject.AddReservedAndPendingLotStatusInformation(data.status, data.holdALotConfig);
                        //viewStatusObject.AddSelectedPaymentAccountValues(data.accountListing.length> 0? data.accountListing[0].selectedPartnerAccountId:0)
                        $('#geospatialDefaultZoom').val(data.geospatialDefaultZoom);
                        $('#modelTextOpacity').val(data.modelHomeOpacity);
                        $('#modelTextTitle').val(data.modelHomeText);
                        $('#modelTextBackgroundColor').val(data.modelHomeBackgroundColor);
                        $('#modelTextFontColor').val(data.modelHomeFontColor);
                        $('#specTextOpacity').val(data.specOpacity);
                        $('#specTextTitle').val(data.specText);
                        $('#specTextBackgroundColor').val(data.specBackgroundColor);
                        $('#specTextFontColor').val(data.specFontColor);
                        showDreamweaverConfig = data.showDreamweaver;
                        partnerHoldALotConfig = data.partnerholdALotEnabled;
                        isCommDWConfig = data.isCommDW;
                        $("#newLotStatusColor").val("#000000");
                        $("#newLotStatusText").val("");
                        //if (jQuery('#Communities').jqGrid('getCell', currentRowId, 'NewIsp')=="True") {
                        //    $('#IspOn').prop('checked', true);
                        //}
                        //else {
                        //    $('#IspOff').prop('checked', true);
                        //}
                        if (data.showHomesiteFilter == false) {
                            $('#showFilter').prop('disabled', true);
                            $('#hideFilter').prop('disabled', true);
                        }
                        else {
                            if (data.showFilterForCommunity == "TRUE") {
                                $('#showFilter').prop('checked', true);
                            }
                            else {
                                $('#hideFilter').prop('checked', true);
                            }
                        }
                        if (data.unReleasedLotConfig == "FALSE") {
                            $('#disableClickHover').prop('checked', true);
                        } else {
                            $('#enableClickHover').prop('checked', true);
                        }
                        if (data.suppressPriceConfig == "FALSE") {
                            $('#suppressPricingCheckbox').prop('checked', false);
                        } else {
                            $('#suppressPricingCheckbox').prop('checked', true);
                        }
                        if (data.suppressPriceConfig == "FALSE") {
                            $('#suppressPricingCheckbox').prop('checked', false);
                        } else {
                            $('#suppressPricingCheckbox').prop('checked', true);
                        }
                        if (data.suppressLotStatusConfig == "FALSE") {
                            $('#disableSuppressLotStatus').prop('checked', true);
                        } else {
                            $('#enableSuppressLotStatus').prop('checked', true);
                        }
                        if (data.defaultSatViewConfig == "FALSE") {
                            $('#disableDefaultSatView').prop('checked', true);
                        } else {
                            $('#enableDefaultSatView').prop('checked', true);
                        }
                        if (data.displayLotListConfig == "FALSE") {
                            $('#disableLotListPlans').prop('checked', true);
                        } else {
                            $('#enableLotListPlans').prop('checked', true);
                        }
                        if (data.commShowAllPlans == "FALSE") {
                            $('#disableAvailablePlans').prop('checked', true);
                        } else {
                            $('#enableAvailablePlans').prop('checked', true);
                        }
                        if (data.commShowAllSpecs == "FALSE") {
                            $('#disableAvailableSpecs').prop('checked', true);
                        } else {
                            $('#enableAvailableSpecs').prop('checked', true);
                        }
                        if (data.commHideAssignedPlans == "FALSE") {
                            $('#hideAllPlansCheckbox').prop('checked', false);
                        } else {
                            $('#hideAllPlansCheckbox').prop('checked', true);
                        }
                        if (data.commHideAssignedSpecs == "FALSE") {
                            $('#hideAllSpecsCheckbox').prop('checked', false);
                        } else {
                            $('#hideAllSpecsCheckbox').prop('checked', true);
                        }
                        if (data.partnerShowAllPlans == false) {
                            $('#enableAvailablePlans').prop('disabled', true);
                            $('#disableAvailablePlans').prop('disabled', true);
                        }
                        if (data.partnerShowAllSpecs == false) {
                            $('#enableAvailableSpecs').prop('disabled', true);
                            $('#disableAvailableSpecs').prop('disabled', true);
                        }
                        $("#communityIntegrationKey").val(data.commIntegrationKey);
                        $("#communitySubCategoryNumber").val(data.commSubCategoryNumber);
                        $("#communityOptionName").val(data.commOptionName);
                        if (data.commShowColorScheme == "FALSE") {
                            $('#disableCommShowColorScheme').prop('checked', true);
                        } else {
                            $('#enableCommShowColorScheme').prop('checked', true);
                        }
                        var commHoldAlotEnabled = data.holdALotConfig.holdALotConfig == "FALSE" ? false : true;
                        console.log('hold a lot defined');
                        if (data.holdALotConfig.holdALotConfig == "FALSE") {
                            $('#holdALotCheckbox').prop('checked', false);
                            $('#holdALotEmail').val(data.holdALotConfig.holdALotEmail);
                            $('#holdALotPhoneNumber').val(data.holdALotConfig.holdALotPhoneNumber);
                            $('#holdAlotDiv').hide();
                        } else {
                            $('#holdALotCheckbox').prop('checked', true);
                            $('#holdALotEmail').val(data.holdALotConfig.holdALotEmail);
                            $('#holdALotPhoneNumber').val(data.holdALotConfig.holdALotPhoneNumber);
                            $('#holdAlotDiv').show();
                        }
                        if (data.communityLabelChecked == true) {
                            $("#commLabelCheckbox").prop("checked", true);
                            $("#communityMapLabel").css("opacity", "100%");
                        }
                        else {
                            $("#commLabelCheckbox").prop("checked", false);
                            $("#communityMapLabel").css("opacity", "50%");
                        }
                        $("#communityMapLabel").val(data.communityLabel);
                        viewConfiguration.CommunityID = currentRowId;
                        console.log(viewConfiguration.CommunityID +' - '+ currentRowId)
                        pointsOfInterest = data.points;
                        viewConfiguration.communityConfiguration([]);
                        viewConfiguration.partnerSettings([]);

                        viewConfiguration.geoPointsAll([]);
                        viewConfiguration.geoPointsAll(data.pointsAll);
                        viewConfiguration.geoPointsSelected([]);
                        $.each(data.pointsSelected, function (intIndex, objValue) {
                            if (objValue != null)
                                viewConfiguration.geoPointsSelected.push("" + objValue.ID);
                        });

                        $.each(data.configuration, function (intIndex, value) {
                            if (value.ConfigurationID == 536) {
                                console.log(value);
                            }
                            if (value.Code.indexOf('SPSTSCLR') != -1) {
                                viewConfiguration.communityConfiguration.push(new color(data.configuration[intIndex].ID, data.configuration[intIndex].Value,
                                    data.configuration[intIndex].HiddenId, data.configuration[intIndex].Name, data.configuration[intIndex].CommunityID,
                                    data.configuration[intIndex].ConfigurationID, data.configuration[intIndex].Code, data.configuration[intIndex].Status, "", data.configuration[intIndex].PartnerID, "", data.configuration[intIndex].HoldALotStatus, data.configuration[intIndex].IncludeDWStatus, data.configuration[intIndex].SuppressPriceStatus, data.configuration[intIndex].HoldALotButtonText, data.configuration[intIndex].HoldALotButtonTextPlaceHolder));
                            }
                        });
                        $.each(data.partnerSettings, function (intIndex) {
                            viewConfiguration.partnerSettings.push(new color(data.partnerSettings[intIndex].ID, data.partnerSettings[intIndex].Value,
                            data.partnerSettings[intIndex].Key, data.partnerSettings[intIndex].Name, data.partnerSettings[intIndex].CommunityID,
                                data.partnerSettings[intIndex].ConfigurationID, data.partnerSettings[intIndex].Code, data.partnerSettings[intIndex].Status, data.partnerSettings[intIndex].Key, data.partnerSettings[intIndex].partnerID, data.partnerSettings[intIndex].Category));

                        });

                        $('#resetModelTextBackgroundColor').on('click', function () {
                            var $colorPicker = $(document).find('.colorpicker-input#modelTextBgColor');
                            var $colorInput = $(document).find('.colorpicker-text#modelTextBackgroundColor');
                            $colorPicker.find('div').css('backgroundColor', "#808080");
                            $colorInput.val("#808080");
                            $colorPicker.ColorPickerSetColor("#808080");
                        });

                        $('#resetModelTextFontColor').on('click', function () {
                            var $colorPicker = $(document).find('.colorpicker-input#modelTextFontColorSelector');
                            var $colorInput = $(document).find('.colorpicker-text#modelTextFontColor');
                            $colorPicker.find('div').css('backgroundColor', "#ffffff");
                            $colorInput.val("#ffffff");
                            $colorPicker.ColorPickerSetColor("#ffffff");
                        });

                        $('#resetSpecTextBackgroundColor').on('click', function () {
                            var $colorPicker = $(document).find('.colorpicker-input#specTextBgColor');
                            var $colorInput = $(document).find('.colorpicker-text#specTextBackgroundColor');
                            $colorPicker.find('div').css('backgroundColor', "#808080");
                            $colorInput.val("#808080");
                            $colorPicker.ColorPickerSetColor("#808080");
                        });

                        $('#resetSpecTextFontColor').on('click', function () {
                            var $colorPicker = $(document).find('.colorpicker-input#specTextFontColorSelector');
                            var $colorInput = $(document).find('.colorpicker-text#specTextFontColor');
                            $colorPicker.find('div').css('backgroundColor', "#ffffff");
                            $colorInput.val("#ffffff");
                            $colorPicker.ColorPickerSetColor("#ffffff");
                        });

                        ko.cleanNode($("#lotColorScheme")[0]);
                     //   ko.cleanNode($("#appColorScheme")[0]);

                        $("#lotColorScheme").empty();
                      //  $("#appColorScheme").empty();

                        ko.bindingHandlers.sortableList = {
                            init: function (element, valueAccessor) {
                                var sortScrollInterval = null;
                                var scrollDelta = 0;
                                $(element).sortable({
                                    update: function (event, ui) {
                                        var item = ko.utils.arrayFirst(viewConfiguration.communityConfiguration(), function (config) {
                                            return config.Configuration.ID == ui.item[0].getAttribute("configid");
                                        });
                                        var position = ko.utils.arrayIndexOf(ui.item.parent().children(), ui.item[0]);
                                        if (position >= 0) {
                                            viewConfiguration.communityConfiguration.remove(function (status) {
                                                return status.Configuration.ID == ui.item[0].getAttribute("configid");
                                            });
                                            viewConfiguration.communityConfiguration.splice(position, 0, item);
                                        }
                                        var data = viewConfiguration.communityConfiguration().slice(0);
                                        viewConfiguration.communityConfiguration([]);
                                        viewConfiguration.communityConfiguration(data);
                                        $('.color-selection').each(function () {
                                            var $colorPicker = $(this).find('.colorpicker-input');
                                            var $colorInput = $(this).find('.colorpicker-text');
                                            var $colorValue = $colorInput.val();
                                            $colorPicker.find('div').css('backgroundColor', $colorValue);

                                            $colorPicker.ColorPicker({
                                                color: $colorValue,
                                                sequence: Sequence,
                                                onShow: function (colpkr) {
                                                    $(colpkr).fadeIn(500);
                                                    return false;
                                                },
                                                onHide: function (colpkr) {
                                                    $(colpkr).fadeOut(500);
                                                    return false;
                                                },
                                                onChange: function (hsb, hex, rgb, el) {
                                                    $colorPicker.find('div').css('backgroundColor', '#' + hex);
                                                    $colorValue = '#' + hex;
                                                    $colorInput.val($colorValue);
                                                    console.log($colorInput);
                                                    console.log($colorInput.attr('id'));
                                                    $("#" + $colorInput.attr('id')).trigger("change");

                                                }
                                            });
                                            Sequence++;
                                        });

                                        if (showDreamweaverConfig && isCommDWConfig) {
                                            $("#includeDWDiv").show();
                                            $(".dw-include").show();

                                        } else {
                                            $("#includeDWDiv").hide();
                                            $(".dw-include").hide();
                                        }
                                    }
                                });
                                $(element).disableSelection();
                                var scroll = '';
                                var $scrollable = $(element);
                                function scrolling() {
                                    if (scroll == 'up') {
                                        $scrollable.scrollTop($scrollable.scrollTop() - 20);
                                        setTimeout(scrolling, 50);
                                    }
                                    else if (scroll == 'down') {
                                        $scrollable.scrollTop($scrollable.scrollTop() + 20);
                                        setTimeout(scrolling, 50);
                                    }
                                }
                            }
                        };



                        ko.applyBindings(viewConfiguration, $("#lotColorScheme")[0]);
                      //  ko.applyBindings(viewConfiguration, $("#appColorScheme")[0]);

                        if (@ViewBag.IspPartnerType == 3 || @ViewBag.IspPartnerType == 4) {
                            ko.cleanNode($("#geospatialPointsOfInterest")[0]);
                            //ko.cleanNode($("#siteMapColorScheme")[0]);
                            //ko.cleanNode($("#siteMapCommunityColorScheme")[0]);
                            $("#geospatialPointsOfInterest").empty();
                            //$("#siteMapCommunityColorScheme").empty();
                            //$("#siteMapColorScheme").empty();
                            ko.applyBindings(viewConfiguration, $("#geospatialPointsOfInterest")[0]);
                            //ko.applyBindings(viewConfiguration, $("#siteMapColorScheme")[0]);
                            //ko.applyBindings(viewConfiguration, $("#siteMapCommunityColorScheme")[0]);
                        }

                        $('.color-selection').each(function () {
                            var $colorPicker = $(this).find('.colorpicker-input');
                            var $colorInput = $(this).find('.colorpicker-text');
                            var $colorValue = $colorInput.val();
                            $colorPicker.find('div').css('backgroundColor', $colorValue);

                            $colorPicker.ColorPicker({
                                color: $colorValue,
                                sequence: Sequence,
                                onShow: function (colpkr) {
                                    $(colpkr).fadeIn(500);
                                    return false;
                                },
                                onHide: function (colpkr) {
                                    $(colpkr).fadeOut(500);
                                    return false;
                                },
                                onChange: function (hsb, hex, rgb, el) {
                                    $colorPicker.find('div').css('backgroundColor', '#' + hex);
                                    $colorValue = '#' + hex;
                                    $colorInput.val($colorValue);
                                    console.log($colorInput);
                                    console.log($colorInput.attr('id'));
                                    $("#" + $colorInput.attr('id')).trigger("change");

                                }
                            });
                            Sequence++;
                        });
                        // Testing   ko.applyBindings(viewConfiguration, $("#test46")[0]);
                        //if (data.showDreamweaver.toString().toLowerCase() === 'true') {
                        //    $('.includeDWclass').show();
                        //    $('.includeDWclass').show();
                        //    $('includeDWDiv').show();
                        //} else {
                        //    $('includeDWDiv').hide();
                        //    $('.includeDWclass').hide();
                        //    $('.includeDWclass').hide();
                        //}
                        if (data.showDreamweaver && data.isCommDW) {
                            $("#includeDWDiv").show();
                            $(".dw-include").show();
                        } else {
                            $("#includeDWDiv").hide();
                            $(".dw-include").hide();
                        }
                    },
                    error: function (xhr, textStatus, errorThrown) {

                    }
                });
            }
            else {
                viewConfiguration.communityConfiguration([]);
                viewConfiguration.geoPointsAll([]);
                viewConfiguration.geoPointsSelected([]);
                ko.applyBindings(viewConfiguration, $("#colorScheme")[0]);
                if (@ViewBag.IspPartnerType == 3 || @ViewBag.IspPartnerType == 4) {
                    ko.applyBindings(viewConfiguration, $("#geospatialPointsOfInterest")[0]);
                }
            }
        }
        var saving = false;
        function saveConfiguration() {
            if (!saving) {
                saving = true;
                if (viewConfiguration.CommunityID > 0) {
                    var geospatialPointsOfInterest = [];
                    $.each(viewConfiguration.geoPointsSelected(), function (intIndex, objectValue) {
                        var listing = { PointOfInterestID: objectValue, CommunityID: viewConfiguration.CommunityID, IsGeospatial: true };
                        geospatialPointsOfInterest.push(listing);
                    });
                    var newIsp = true;
                    //if ($('#IspOn').prop('checked')) {
                    //    newIsp = true;
                    //}
                    var showFilter = "TRUE";
                    if ($('#hideFilter').prop('checked')) {
                        showFilter = "FALSE";
                    }

                    var enableUnreleased = "FALSE";
                    if ($('#enableClickHover').prop('checked')) {
                        enableUnreleased = "TRUE";
                    }

                    var suppressPrice = "FALSE";
                    if ($('#suppressPricingCheckbox').prop('checked')) {
                        suppressPrice = "TRUE";
                    }
                    if (document.getElementById('holdALotCheckbox')) {
                        var holdALotCheckBox = "TRUE";
                        if ($('#holdALotCheckbox').prop('checked')) {
                            holdALotCheckBox = "TRUE";
                        } else {
                            holdALotCheckBox = "FALSE";
                        }
                        var holdAlotEmail = $('#holdALotEmail').val();
                        var holdAlotPhoneNumber = $('#holdALotPhoneNumber').val();
                        var holdAlotPayment = $('#paymentAccountList option:selected').val();
                        if (typeof (holdAlotPayment) === 'undefined') {
                            holdAlotPayment = 0;
                        }
                        var reservationPendingStatus = $('#reservationPendingLotStatus option:selected').val();
                        if (typeof (reservationPendingStatus) === 'undefined' || reservationPendingStatus == 0) {
                            reservationPendingStatus = '';
                        }
                        var reservedStatus = $('#reservedLotStatus option:selected').val();
                        if (typeof (reservedStatus) === 'undefined' || reservedStatus == 0) {
                            reservedStatus = '';
                        }
                        if (holdAlotPayment != 0 && reservationPendingStatus === reservedStatus && reservedStatus != '' && reservedStatus != 0) {
                            alert("Reservation Pending Status and Reserved Status cannot be same.")
                            saving = false;
                            return false;
                        }
                        if (!verifyHoldALotDetails(holdAlotEmail, holdAlotPhoneNumber, holdALotCheckBox.toLowerCase())) {
                            saving = false;
                            return false;
                        }
                    } else {
                        var holdALotCheckBox = "";
                        var holdAlotEmail = "";
                        var holdAlotPhoneNumber = "";
                        var holdAlotPayment = "0";
                        var reservedStatus = '';
                        var reservationPendingStatus = '';
                    }
                    var commMapLabelText = $("#communityMapLabel").val().trim();
                    var overwriteName = $("#commLabelCheckbox").prop("checked");
                    var zoomLevel;
                    if ($("#geospatialDefaultZoom").val()) {
                        zoomLevel = $("#geospatialDefaultZoom").val();
                    } else {
                        zoomLevel = null;
                    }
                    var commShowAllPlans = null;
                    if ($('#disableAvailablePlans').prop('checked')) {
                        commShowAllPlans = "FALSE";
                    } else if ($('#enableAvailablePlans').prop('checked')) {
                        commShowAllPlans = "TRUE";
                    }
                    var commShowAllSpecs = null;
                    if ($('#disableAvailableSpecs').prop('checked')) {
                        commShowAllSpecs = "FALSE";
                    } else if ($('#enableAvailableSpecs').prop('checked')) {
                        commShowAllSpecs = "TRUE";
                    }
                    var commHideAssignedPlans = null;
                    if ($('#hideAllPlansCheckbox').prop('checked')) {
                        commHideAssignedPlans = "TRUE";
                    } else {
                        commHideAssignedPlans = "FALSE";
                    }
                    var commHideAssignedSpecs = null;
                    if ($('#hideAllSpecsCheckbox').prop('checked')) {
                        commHideAssignedSpecs = "TRUE";
                    } else {
                        commHideAssignedSpecs = "FALSE";
                    }

                    var commSuppressLotStatus = null;
                    if ($('#disableSuppressLotStatus').prop('checked')) {
                        commSuppressLotStatus = "FALSE";
                    } else if ($('#enableSuppressLotStatus').prop('checked')) {
                        commSuppressLotStatus = "TRUE";
                    }

                    var commDefaultSatView = null;
                    if ($('#disableDefaultSatView').prop('checked')) {
                        commDefaultSatView = "FALSE";
                    } else if ($('#enableDefaultSatView').prop('checked')) {
                        commDefaultSatView = "TRUE";
                    }

                    var commDisplayLotList = null;
                    if ($('#disableLotListPlans').prop('checked')) {
                        commDisplayLotList = "FALSE";
                    } else if ($('#enableLotListPlans').prop('checked')) {
                        commDisplayLotList = "TRUE";
                    }

                    //Model Homes Text Logic
                    var modelHomesText;
                    if ($("#modelTextTitle").val()) {
                        modelHomesText = $("#modelTextTitle").val().trim();
                    } else {
                        modelHomesText = null;
                    }
                    var modelHomesBackgroundColor;
                    if ($("#modelTextTitle").val()) {
                        modelHomesBackgroundColor = $("#modelTextBackgroundColor").val().trim();
                    } else {
                        modelHomesBackgroundColor = null;
                    }
                    var modelHomesFontColor;
                    if ($("#modelTextTitle").val()) {
                        modelHomesFontColor = $("#modelTextFontColor").val().trim();
                    } else {
                        modelHomesFontColor = null;
                    }
                    var modelHomesTextOpacity;
                    if ($("#modelTextOpacity").val()) {
                        modelHomesTextOpacity = $("#modelTextOpacity").val();
                    } else {
                        modelHomesTextOpacity = null;
                    }

                    //Spec Text Logic
                    var specText;
                    if ($("#specTextTitle").val()) {
                        specText = $("#specTextTitle").val().trim();
                    } else {
                        specText = null;
                    }
                    var specBackgroundColor;
                    if ($("#specTextBackgroundColor").val()) {
                        specBackgroundColor = $("#specTextBackgroundColor").val().trim();
                    } else {
                        specBackgroundColor = null;
                    }
                    var specFontColor;
                    if ($("#specTextFontColor").val()) {
                        specFontColor = $("#specTextFontColor").val().trim();
                    } else {
                        specFontColor = null;
                    }
                    var specTextOpacity;
                    if ($("#specTextOpacity").val()) {
                        specTextOpacity = $("#specTextOpacity").val();
                    } else {
                        specTextOpacity = null;
                    }

                    //Envision Community Configurations
                    var commShowColorScheme = null;
                    if ($('#disableCommShowColorScheme').prop('checked')) {
                        commShowColorScheme = "FALSE";
                    } else if ($('#enableCommShowColorScheme').prop('checked')) {
                        commShowColorScheme = "TRUE";
                    }
                    var commIntegrationKey;
                    if ($("#communityIntegrationKey").val()) {
                        commIntegrationKey = $("#communityIntegrationKey").val().trim();
                    } else {
                        commIntegrationKey = "";
                    }
                    var commSubCategoryNumber;
                    if ($("#communitySubCategoryNumber").val()) {
                        commSubCategoryNumber = $("#communitySubCategoryNumber").val().trim();
                    } else {
                        commSubCategoryNumber = "";
                    }
                    var commOptionName;
                    if ($("#communityOptionName").val()) {
                        commOptionName = $("#communityOptionName").val().trim();
                    } else {
                        commOptionName = "";
                    }

                    var json = "{ configurations: " + ko.toJSON(viewConfiguration.communityConfiguration()) + ", geospatialPointOfInterests: " + ko.toJSON(geospatialPointsOfInterest) + ", communityId: " + viewConfiguration.CommunityID + ", partnerSettings: " + ko.toJSON(viewConfiguration.partnerSettings()) + ",newIsp:" + newIsp + ",showFilterForCommunity:" + JSON.stringify(showFilter) + ",communityMapLabel:" + JSON.stringify(commMapLabelText) + ",overwriteName:" + overwriteName + ",enableUnreleasedLot:" + JSON.stringify(enableUnreleased) + ",suppressPrice:" + JSON.stringify(suppressPrice) + ",holdAlot:" + JSON.stringify(holdALotCheckBox) + ",holdALotEmail:" + JSON.stringify(holdAlotEmail) + ",holdALotPhoneNumber:" + JSON.stringify(holdAlotPhoneNumber) + ",geospatialZoomLevel:" + zoomLevel + ",commShowAllPlans:" + JSON.stringify(commShowAllPlans) + ",commSuppressLotStatus:" + JSON.stringify(commSuppressLotStatus) + ",commDisplayLotList:" + JSON.stringify(commDisplayLotList) + ",modelHomesTextOpacity:" + modelHomesTextOpacity + ",modelHomesText:" + JSON.stringify(modelHomesText) + ",modelHomesBackgroundColor:" + JSON.stringify(modelHomesBackgroundColor) + ",modelHomesFontColor:" + JSON.stringify(modelHomesFontColor) + ",commDefaultSatView:" + JSON.stringify(commDefaultSatView) + ",specTextOpacity:" + specTextOpacity + ",specText:" + JSON.stringify(specText) + ",specBackgroundColor:" + JSON.stringify(specBackgroundColor) + ",specFontColor:" + JSON.stringify(specFontColor) + ",commShowAllSpecs:" + JSON.stringify(commShowAllSpecs) + ",commHideAssignedPlans:" + JSON.stringify(commHideAssignedPlans) + ",commHideAssignedSpecs:" + JSON.stringify(commHideAssignedSpecs) + ",partnerAccountId:" + JSON.stringify(holdAlotPayment) + ",reservationPendingStatus:" + JSON.stringify(reservationPendingStatus) + " ,reservedStatus:" + JSON.stringify(reservedStatus)
                        + ",commShowColorScheme: " + JSON.stringify(commShowColorScheme) + ",commIntegrationKey: " + JSON.stringify(commIntegrationKey) + ",commSubCategoryNumber: " + JSON.stringify(commSubCategoryNumber) + ",commOptionName: " + JSON.stringify(commOptionName) + " }";

                    $.ajax('@Url.Action("UpdateConfiguration")', {
                        data: json,
                        type: "post",
                        contentType: 'application/json',
                        dataType: 'json',
                        success: function (data, textStatus, xhr) {
                            hasgeojson = getColumnData("#@(COMMUNITIES_GRID)", currentRowId, "HasGeoJson");
                            isGeoSVG = getColumnData("#@(COMMUNITIES_GRID)", currentRowId, "IsGeoSVG");
                            var hasSvg = getColumnData("#@(COMMUNITIES_GRID)", currentRowId, "HasSVG");
                            if (newIsp) {
                                jQuery('#Communities').jqGrid('setCell', currentRowId, 'NewIsp', 'True');
                                //if (hasgeojson == 'True' || hasgeojson == 'true') {
                                //    jQuery('#Communities').jqGrid('setCell', currentRowId, 'cell.ISPVersion', '3.0, 2.0');
                                //} else {
                                //    jQuery('#Communities').jqGrid('setCell', currentRowId, 'cell.ISPVersion', '2.0');
                                //}
                                $('.isp1-color').hide();
                                $('#homesiteFilter').show();
                            }
                            else {
                                jQuery('#Communities').jqGrid('setCell', currentRowId, 'NewIsp', 'False');
                                //if (hasgeojson == 'True' || hasgeojson == 'true') {
                                //    jQuery('#Communities').jqGrid('setCell', currentRowId, 'cell.ISPVersion', '3.0, 1.0');
                                //} else {
                                //    jQuery('#Communities').jqGrid('setCell', currentRowId, 'cell.ISPVersion', '1.0');
                                //}
                                $('.isp1-color').show();
                                $('#homesiteFilter').hide();
                            }
                            jQuery("#@(COMMUNITIES_GRID)").jqGrid().setGridParam({ datatype: 'json' });
                            jQuery("#@(COMMUNITIES_GRID)").jqGrid().trigger('reloadGrid');
                            if (isGeoSVG == "False" && hasSvg == "True") {
                                SetNewIspLink(newIsp);
                            }
                            //$('#isp').val($('#IspOn').prop('checked'));
                            if (data.Success == "true") {
                                loadConfig();
                                saveSuccessful();

                            }
                            else {
                                saveUnsuccessfulMessage(data?.Error, 3500);
                            }
                            saving = false;
                        },
                        error: function () {
                            saving = false;
                            saveUnsuccessful();
                        }
                    });

                }
            }
        }
        function verifyHoldALotDetails(email, phonenumber, holdalot) {
            $('#EmailValidation').css('display', 'none');
            $('#PhoneValidation').css('display', 'none');
            var error = false;
            if (email.trim() == '') {

            }else if (holdalot == "true" && !validateEmail(email.trim())) {
                    $('#EmailValidation').css('display', 'block');
                error = true;
            }
            if (phonenumber.trim() == '') {

            }else if (holdalot == "true" && !validatePhone(phonenumber)) {
                $('#PhoneValidation').css('display', 'block');
                error = true;
            }
            if (error) {
                return false;
            } else {
                return true;
            }
        }
        function validateEmail(email) {
            var regex = /^[a-z0-9\.\_%+-]+@@[a-z0-9\.\-]+\.[a-z]{2,4}$/i;
            return regex.test(email);
        }
        function validatePhone(phone) {
            var regex = /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im;
            return regex.test(phone);
        }

        function loadDescription() {
            $("#communitydescriptiontext").val("");
            if (currentRowId != -1) {
                $.ajax({
                    url: '@Url.Action("GetCommunityDescription")' + '/' + currentRowId,
                    type: "POST",
                    dataType: "json",
                    success: function (data, textStatus, xhr) {
                        viewConfiguration.CommunityID = currentRowId;
                        viewConfiguration.pointsAll([]);
                        viewConfiguration.pointsAll(data.pointsAll);
                        viewConfiguration.pointsSelected([]);
                        $.each(data.pointsSelected, function (intIndex, objValue) {
                            if (objValue != null)
                                viewConfiguration.pointsSelected.push("" + objValue.ID);
                        });

                        if (@ViewBag.IspPartnerType == 1 || @ViewBag.IspPartnerType == 4) {
                            ko.cleanNode($("#pointsOfInterest")[0]);
                            $("#pointsOfInterest").empty();
                            ko.applyBindings(viewConfiguration, $("#pointsOfInterest")[0]);
                        }

                        getDescription = data.description;
                        $("#communitydescriptiontext").val(getDescription);
                        var max = parseInt(2000);

                        var x = $("#communitydescriptiontext").val();
                        var charLength = x.length;
                        var count = (x.match(/\n/g) || []).length;
                        // var linelength = Math.floor(x.split(/\r*\n/).length / 2);
                        if (count > 0) {
                            charLength = charLength + count;
                        }
                        //charLength = charLength - 1;
                        var charleft = max - charLength;

                        if (charleft < 0) {
                            x = x.substring(0, 2000);
                            $("#communitydescriptiontext").val(x)
                            $('#charLeft').text('0');
                            return false;
                        }
                        else {
                            $('#charLeft').text(charleft);
                            return true;

                        }

                        //$('#charLeft').text(max - $("#communitydescriptiontext").val().length);
                        //viewCustomDescription.getDescription(data);
                    }
                });
            } else {
                viewConfiguration.pointsAll([]);
                viewConfiguration.pointsSelected([]);
                ko.applyBindings(viewConfiguration, $("#pointsOfInterest")[0]);
            }
        }

        function updateDescription() {
            var data = $("#communitydescriptiontext").val().trim();
            saveDescription(data);
            //var valid = validate(data);
            //if (valid) {
            //    saveDescription(data);
            //}
        }

        function validate(data) {
            var descriptionValue = getDescription;
            if (data != "" && data != null) {
                return true;
            }
            else if (data == "" && descriptionValue == "" && data.length <= 0) {
                resetSaveLabel();
                $("#confirmationMessage").addClass("unsucessfully-alert");
                $("#confirmationMessage").fadeIn("1000").delay(2000).fadeOut('1500').hide(0);
                $("#confirmationMessage").text("Please Enter Community Description");
                $("#confirmationMessage").show();
                loadDescription();
                return false;
            }
            else {
                return true;
            }
        }

        function saveDescription(data) {
            if (currentRowId != -1) {

                var pointsOfInterest = [];
                $.each(viewConfiguration.pointsSelected(), function (intIndex, objectValue) {
                    var listing = { PointOfInterestID: objectValue, CommunityID: viewConfiguration.CommunityID };
                    pointsOfInterest.push(listing);
                });
                data = JSON.stringify(data)
                // var data =   ko.toJSON(viewCustomDescription.customDescription());
                {
                    $.ajax('@Url.Action("UpdateDescription")', {
                        data: "{ id: " + currentRowId + ", description: " + data + ", pointOfInterests: " + ko.toJSON(pointsOfInterest) + " }",
                        type: "post",
                        contentType: 'application/json',
                        dataType: 'json',
                        success: function (data, textStatus, xhr) {
                            if (data.Success == "True") {
                                loadDescription();
                                saveSuccessful();
                            }
                            else {
                                saveUnsuccessful();
                            }
                        },
                        error: function (xhr, textStatus, errorThrown) {

                        }

                    });
                }
            }
        }

        /* OVERVIEW TAB OPERATIONS*/

        function loadOverview() {
            if (currentRowId != -1) {
                vc.clear();
                $.ajax({
                    url: '@Url.Action("GetCommunityOverview")' + '/' + currentRowId,
                    type: "POST",
                    dataType: "json",
                    success: function (data, textStatus, xhr) {

                        vc.clear();
                        $.each(data.assets, function (intIndex) {
                            var assetURL = "";
                            if (data.assets[intIndex].Value != "" && data.assets[intIndex].Value.lastIndexOf("http", 0) === 0) {
                                assetURL = data.assets[intIndex].Value;
                            }
                            else {
                                if (data.assets[intIndex].ID != -1) {
                                    assetURL = '@Url.Action("GetImage")' + '/' + data.assets[intIndex].ID;
                                }
                                else {

                                    assetURL = "/content/images/upload-image.png";
                                }
                            }

                            vc.addAssetWithParams(data.assets[intIndex].Value, data.assets[intIndex].Description, intIndex, assetURL, data.assets[intIndex].Preferred, data.assets[intIndex].ID);
                        });

                        $.each(data.assets, function (intIndex) {
                            createFineUploader(intIndex);
                        });

                    },
                    error: function (xhr, textStatus, errorThrown) {

                    }
                });
            }
        }

        function saveOverview() {
            if (currentRowId != -1) {
                var locked = getColumnData("#@(COMMUNITIES_GRID)", currentRowId, "Locked");

                var hasErrors = false;
                var emptyAssetArray = [];

                for (var index = 0; index < vc.communityAssets().length; index++) {
                    var assetInstance = vc.communityAssets()[index];
                    assetInstance.ShowErrorMessage(false);
                    if (assetInstance.Value == "/content/images/upload-image.png") {
                        if (assetInstance.Description() == null || assetInstance.Description() == "") {
                            emptyAssetArray.push(assetInstance);
                        } else {
                            assetInstance.ShowErrorMessage(true);
                            hasErrors = true;
                        }
                    }
                }
                if (emptyAssetArray.length > 0) {
                    for (var index = 0; index < emptyAssetArray.length; index++) {
                        vc.communityAssets.remove(emptyAssetArray[index])
                    }
                    emptyAssetArray.length = 0;
                }

                if (!hasErrors) {
                    $.ajax('@Url.Action("UpdateOverview")', {
                        data: "{ id: " + currentRowId + ", assets: " + ko.toJSON(vc.communityAssets()) + " }",
                        type: "post",
                        contentType: 'application/json',
                        dataType: 'json',
                        success: function (data, textStatus, xhr) {
                            if (data.Success == "True") {
                                saveSuccessful();
                                if (locked = "False") {
                                    LockUnlockCommunity(currentRowId, true);
                                }
                                loadOverview();

                            }
                            else {
                                saveUnsuccessful();
                            }
                        },
                        error: function (xhr, textStatus, errorThrown) {

                        }

                    });
                }
            }
        }

        function LotImageUploader()
            {
            var allowedFiles = [".jpeg",'.jpg', ".gif"];
            var fileUpload = document.getElementById("lotImage");
            var lblError = document.getElementById("lblError");
            var regex = new RegExp("([a-zA-Z0-9\s_\\.\-:])+(" + allowedFiles.join('|') + ")$");    //([a-zA-Z0-9\s_\\.\-:])+(.png|.jpg|.gif)
            if (fileUpload.value == "") {
                return false;
            }
            var fileName = fileUpload.value.replace('(', '');
            fileName =  fileName.replace(')', '');
            if (!regex.test(fileName.toLowerCase())) {
                //jyouti.svg has an invalid extension. Valid extension(s): jpeg, jpg, gif.
                alert("File has an invalid extension. Valid extension(s): jpeg", 'jpg', "gif.");
                return false;
            }

            if (window.FormData !== undefined) {

                var fileUpload = $("#lotImage").get(0);
                var files = fileUpload.files;
                if ((files[0].size)/1024>500)
                {
                    alert("Image size should not be more than 500KB.");
                    return false;
                }
                // Create FormData object
                var fileData = new FormData();

                // Looping over all files and add it to FormData object
                for (var i = 0; i < files.length; i++) {
                    fileData.append(files[i].name, files[i]);
                }

                $('#loader').css('display', "block");

                $.ajax({
                    url: '/Communities/LotImageUpload',
                    type: "POST",
                    contentType: false, // Not to set any content header
                    processData: false, // Not to process data
                    data: fileData,
                    success: function (result) {
                        result = JSON.parse(result);
                        $('#lot-image-loader').hide();
                        $('.lotimageremove').show();
                        $('#lotImagePath').val(result.path);
                        $('#lot-image-name').text(result.fileName);
                        var lotId = ko.toJS(viewStatusObject.ReturnLotObject().ID);
                        $('#lot-image').attr('src', '');
                        $('#lot-image').hide();
                    },
                    error: function (err) {

                    }
                });
            } else {
                alert("FormData is not supported.");
            }
        };

        function toggleElevationButton(checkbox) {
            var id = $(checkbox).attr('value');
            if ($(checkbox).is(':checked')) {
                $("#elevationbutton_" + id).prop('disabled', false);
                $("#elevationimage_" + id).css('opacity', '1');
            } else {
                $("#elevationbutton_" + id).prop('disabled', true);
                $("#elevationimage_" + id).css('opacity', '0.8');
            }
        }

    $(document).on('click', '#imgDelete', function () {

        $('#lotImagePath').val('');
        $('#lot-image').hide();
        $('.lotimageremove').hide();
        $('.image-details').hide();
    });

        $(document).on('submit', '#SubmitGeoJson', function (e) {
        var form = e.target;
        if (form.getAttribute("enctype") === "multipart/form-data") {
            if (form.getAttribute('data-ajax') == 'True' || form.getAttribute('data-ajax') == 'true') {
                e.preventDefault();
                e.stopImmediatePropagation();

                if ($("#geojsonfiles")[0].files.length == 0) {
                    showErrorMessage('Please Upload a File');
                    return false;
                }
                else if ($('#geojsonfiles')[0].files[0].name.indexOf('.geojson') == -1) {
                    showErrorMessage('Please choose a GeoJson file');
                    return false;
                }

                $('#file-upload').attr("disabled", true);
                $('#file-upload').attr("value", "Uploading...");

                var xhr = new XMLHttpRequest();
                xhr.open(form.method, form.action);
                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4 && xhr.status == 200) {
                        var res = JSON.parse(xhr.responseText);
                        var message = res.responseText;
                        if (message != '') {
                            if (message == "GeoJson Uploaded Successfully") {
                                resetSaveLabel();
                                $("#confirmationMessage").addClass("sucessfully-alert");
                                $("#confirmationMessage").text(message);
                                $("#confirmationMessage").fadeIn().delay(2000).fadeOut();
                                var commBDXID = getColumnData("#Communities", currentRowId, "BDXId");
                                var communityId = getColumnData("#Communities", currentRowId, "ID");
                                jQuery("#@(COMMUNITIES_GRID)").jqGrid().setGridParam({ datatype: 'json' });
                                jQuery("#@(COMMUNITIES_GRID)").jqGrid().trigger('reloadGrid');
                                loadLots();
                                if (res.type == "Parcels") {
                                    $("#googleMapISPPreview").show();
                                    var googleMapsLink = "/ISP-3?bdxCommunityID=" + commBDXID + "&Listings=true&Amenities=true" + (commBDXID == 0 ? ("&communityId=" + communityId) : "");
                                    $('#googleMapsPreview').attr("onClick", "window.open('" + googleMapsLink + "','_blank')");
                                    $("#pluginGeospatialPreview").show();
                                    var geoPluginLink = '@System.Configuration.ConfigurationManager.AppSettings["PluginBaseURL"]' + commBDXID + '&ispVersion=3&amenities=true&allowListings=true';
                                    $('#geospatialPluginPreview').attr("onClick", "window.open('" + geoPluginLink + "','_blank')");
                                }
                                $('#fileNameLabel').css("display", "block");
                                $('#fileNameLabel').text("Last Uploaded: " + res.filename);
                            }
                            else {
                                resetSaveLabel();
                                $("#confirmationMessage").addClass("unsucessfully-alert");
                                $("#confirmationMessage").text(message);
                                $("#confirmationMessage").fadeIn().delay(2000).fadeOut();
                            }
                        }
                        $('#file-upload').attr("disabled", false);
                        $('#file-upload').attr("value", "Upload");
                    }
                };
                xhr.send(new FormData(form));
            }
        }
    });

        function createFineUploader(intIndex) {
            vc.Uploaders[intIndex] = new qq.FineUploader({
                element: $('#fineUploader' + intIndex)[0],
                request: {
                    endpoint: '/Communities/FileUpload'
                },
                autoUpload: true,
                sizeLimit: 4000000, // max size
                validation: {
                    allowedExtensions: ['jpeg', 'jpg', 'gif']
                },
                text: {
                    uploadButton: '<i class="icon-upload icon-white"></i> Upload a file'
                },
                multiple: false,
                template: '<div class="qq-uploader ">' +
                        '<pre class="qq-upload-drop-area "><span>{dragZoneText}</span></pre>' +
                        '<div class="qq-upload-button btn btn-success" style="width: auto;">{uploadButtonText}</div>' +
                        '<ul class="qq-upload-list" style="margin-top: 10px; text-align: center;"></ul>' +
                    '</div>',
                classes: {
                    success: 'alert alert-success',
                    fail: 'alert alert-error'
                },
                callbacks: {
                    onComplete: function (id, name, response) {
                        if (response.success) {
                            var asset = ko.utils.arrayFirst(vc.communityAssets(), function (currentAsset) {
                                return currentAsset.Name == intIndex; // <-- is this the desired seat?
                            });

                            if (asset) {
                                var number = response.size;
                                var size = "";
                                if (number >= 1048576) {
                                    number = number / 1048576;
                                    size = "MB";
                                }
                                else {
                                    number = number / 1024;
                                    size = "kB";

                                }
                                asset.FileSize = number.toFixed(1) + "" + size;
                                asset.FileName = response.fileName;
                                asset.Value = response.path;
                                asset.ShowErrorMessage(false);
                            }
                        }
                    }
                },
                debug: true
            });
        }


        /* GUI FUNCTION */
        function resetSaveLabel() {
            $("#confirmationMessage").removeClass("sucessfully-alert");
            $("#confirmationMessage").removeClass("unsucessfully-alert");
            $("#confirmationMessage").text("");
        }
        function saveSuccessful() {
            resetSaveLabel();
            $("#confirmationMessage").addClass("sucessfully-alert");
            $("#confirmationMessage").text("Changes saved");
            $("#confirmationMessage").show();
            $("#confirmationMessage").fadeIn("1000").delay(2000).fadeOut('1500').hide(0);
        }
        function saveSuccessfulMessage(message) {
            resetSaveLabel();
            $("#confirmationMessage").addClass("sucessfully-alert");
            $("#confirmationMessage").text(message);
            $("#confirmationMessage").show();
            $("#confirmationMessage").fadeIn("1000").delay(2000).fadeOut('1500').hide(0);
        }
        function saveUnsuccessful() {
            resetSaveLabel();
            $("#confirmationMessage").addClass("unsucessfully-alert");
            $("#confirmationMessage").fadeIn("1000").delay(2000).fadeOut('1500').hide(0);
            $("#confirmationMessage").text("Save operation not completed");
            $("#confirmationMessage").show();
        }
        function saveUnsuccessfulMessage(msg, duration) {
            resetSaveLabel();
            $("#confirmationMessage").addClass("unsucessfully-alert");
            $("#confirmationMessage").fadeIn("1000").delay(duration ?? 2000).fadeOut('1500').hide(0);
            $("#confirmationMessage").text(msg);
            $("#confirmationMessage").show();
        }

        function uploadFileButtonClick(targetForm) {
            //$("span.help-inline").hide();
            clearValidation(document.getElementById(targetForm));
        }

        function clearValidation(formElement) {
            //Internal $.validator is exposed through $(form).validate()
            if (formElement != null) {
                var validator = $(formElement).validate();
                //Iterate through named elements inside of the form, and mark them as error free
                $('[name]', formElement).each(function () {
                    validator.successList.push(this);//mark as error free
                    validator.showErrors();//remove error messages if present
                });
                validator.resetForm();//remove error class on name elements and clear history
                validator.reset();//remove all error and success data
            }
        }
</script>
<script type="text/javascript">

        $(document).ready(function () {

            $("#searchBox").keyup(function (e) {
                if (e.keyCode === 13) {
                    e.preventDefault();
                    $("#searchButton").click();
                }
            });

            $("#hdSelectedCommunity").val("");
            $(".btn-danger").click(function () {
                $("#myModal").modal("toggle");
            });

            $("#delete-lots-info").click(function () {
                $("#hdDeleteLots").val('delete-info');

            });

            $("#delete-selected-lots").click(function () {

                $("#hdDeleteLots").val('delete-lots');
            });

            $(".btn-confirm").click(function () {
                var deleteLots = $("#hdDeleteLots").val();
                $("#myModal").modal("toggle");
                if (deleteLots == 'delete-info') {
                    deleteAllLots();
                }
                else {
                    deleteLotInfo();
                }
            });
            $('#newCommunity-btn').on('click', function () {
                clearAddCommunityModal();
            })
            $('#addCommunity-btn').on('click', function () {
                createCommunity();
            });
            $('#editCommunity-btn').on('click', function (event) {
                updateCommunity(event.target?.dataset?.id);
            });

            $('#editBDXLiveId, #addBDXLiveId').on("keydown", function (e) {
                const invalidChars = ["-", "+", "e", "E", "."];
                if (invalidChars.includes(e.key)) {
                    e.preventDefault();
                }
            });
            $('#editBDXLiveId, #addBDXLiveId').on('paste', function (event) {
                var pastedText = event.originalEvent?.clipboardData?.getData('text/plain') || "";
                const invalidChars = ["-", "+", "e", "E", "."];
                var containsElement = invalidChars.some(function (element) {
                    return pastedText.includes(element);
                });
                if (containsElement)
                    event.preventDefault();
            });
            $('#addBDXLiveId').on("keyup", function (e) {
                var val = $('#addBDXLiveId').val();
                if (val.length > 0)
                    $('input[name=addCommunityStatus]').prop("disabled", false);
                else {
                    $('input[name=addCommunityStatus]').prop("disabled", true);
                    $('#add-partner-inactive').prop("checked", true);
                }
            });
            $('#editBDXLiveId').on("keyup", function () {
                var val = $('#editBDXLiveId').val();
                if (val.length > 0)
                    $('input[name=editCommunityStatus]').prop("disabled", false);
                else
                    $('input[name=editCommunityStatus]').prop("disabled", true);
            });
            $('#editCommunity-modal-close').on('click', function () {
                $("#editCommunityModal").find(".alert-error").remove();
            });
            var HideMessage = null;
            var message = '@ViewBag.message';
            if (message != '') {
                if (message == 'Siteplan Uploaded Successfully' || message == "MasterMap Uploaded Successfully" || message == "Lot data uploaded successfully." || message == "GeoJson Uploaded Successfully") {
                    resetSaveLabel();
                    $("#confirmationuploadMessage").addClass("sucessfully-alert");
                    $("#confirmationuploadMessage").text(message);
                    //$("#confirmationMessage").show();
                    $("#confirmationuploadMessage").fadeIn().delay(2000).fadeOut();
                }
                else {
                    resetSaveLabel();
                    $("#confirmationuploadMessage").addClass("unsucessfully-alert");
                    $("#confirmationuploadMessage").text(message);
                    //$("#confirmationMessage").show();
                    $("#confirmationuploadMessage").fadeIn().delay(2000).fadeOut();
                }
            }
            $('#communitydescriptiontext').keyup(function (e) {
                var max = parseInt(2000);
                console.log($(this).val());
                var x = $(this).val().replace(/\n/g, "\r\n").replace(/\r\r/g, "\r");
                var charLength = x.length;
                var count = (x.match(/\n/g) || []).length;
                // var linelength = Math.floor(x.split(/\r*\n/).length / 2);
                if (count > 0) {
                    // charLength = charLength + count;
                }
                //charLength = charLength - 1;
                var charleft = max - charLength;
                if (charleft < 0) {

                    //x = x.substring(0, 2000);
                    //$(this).val(x)
                    $('#charLeft').text('0');
                    return false;
                }
                else {
                    if (charleft < 0) {
                        return false;
                    } else {
                        $('#charLeft').text(charleft);
                        return true;
                    }
                }
            });

            $('#communitydescriptiontext').keypress(function (e) {
                //alert(String.fromCharCode(e.keyCode));
                var max = parseInt(2000);
                console.log($(this).val());
                var x = $(this).val().replace(/\n/g, "\r\n").replace(/\r\r/g, "\r");
                var charLength = x.length;
                var count = (x.match(/\n/g) || []).length;
                // var linelength = Math.floor(x.split(/\r*\n/).length / 2);
                if (count > 0) {
                    // charLength = charLength + count;
                }
                //charLength = charLength - 1;
                var charleft = max - charLength;
                if (e.keyCode == 8 || e.keyCode == 46) {
                    if (charleft < 2000) {
                        charleft = charleft + 1;
                    }
                } else {
                    // if (charleft > 0) {
                    charleft = charleft - 1;
                    //  }
                }

                if (charleft < 0) {

                    //x = x.substring(0, 2000);
                    //$(this).val(x)
                    $('#charLeft').text('0');
                    return false;
                }
                else {
                    if (charleft < 0) {
                        return false;
                    } else {
                        $('#charLeft').text(charleft);
                        return true;
                    }
                }
            });

            var test = document.getElementById("communitydescriptiontext");

            if (test != undefined) {
                test.onpaste = function (e) {
                    //do some IE browser checking for e
                    var max = parseInt(2000);
                    console.log($(this).val());
                    var x = $(this).val().replace(/\n/g, "\r\n").replace(/\r\r/g, "\r");
                    var charLength = x.length;
                    var count = (x.match(/\n/g) || []).length;
                    // var linelength = Math.floor(x.split(/\r*\n/).length / 2);
                    if (count > 0) {
                        charLength = charLength + count;
                    }
                    //charLength = charLength - 1;
                    var charleft = max - charLength;
                    e.clipboardData.getData('text/plain').slice(0, charleft)
                };
            }
            //$("#partnerUpdateFileModal, #partnerUpdateMasterPlanModal, #siteMapModal").click(function () {
            //    $("span.help-inline").hide();
            //});
        });

        function createCommunity() {
            let data = {};
            data.CommunityLabel = $('#addCommunityLabel').val().trim();
            data.BDXLiveCommunityID = $('#addBDXLiveId').val();
            data.CommunityStatus = $("input[type='radio'][name='addCommunityStatus']:checked").val();
            $("#addCommunityModal").find(".alert-error").remove();
            $.ajax('@Url.Action("CreateCommunity")', {
                data: JSON.stringify(data),
                type: "post",
                contentType: 'application/json',
                dataType: 'json',
                success: function (data, textStatus, xhr) {
                    if (data.Success == "true") {
                        saveSuccessful();
                        jQuery("#@(COMMUNITIES_GRID)").jqGrid().trigger('reloadGrid');
                        $('#addCommunityModal').modal('hide');
                    }
                    else {
                        $("#addCommunityModal").find(".alert-error").remove();
                        $('#addCommunity-modal-body').prepend(`<div class="alert alert-error">${data.Error}</div>`);
                    }
                }
            });
        }

        function updateCommunity(id) {
            let data = {};
            data.CommunityLabel = $('#editCommunityLabel').val().trim();
            data.BDXLiveCommunityID = $('#editBDXLiveId').val();
            data.CommunityStatus = $("input[type='radio'][name='editCommunityStatus']:checked").val();
            $("#editCommunityModal").find(".alert-error").remove();
            $.ajax('@Url.Action("UpdateCommunity")', {
                data: JSON.stringify({ model: data, id }),
                type: "post",
                contentType: 'application/json',
                dataType: 'json',
                success: function (data, textStatus, xhr) {
                    if (data.Success == "true") {
                        saveSuccessful();
                        jQuery("#@(COMMUNITIES_GRID)").jqGrid().trigger('reloadGrid');
                        $('#editCommunityModal').modal('hide');         
                    }
                    else {
                        $("#editCommunityModal").find(".alert-error").remove();
                        $('#editCommunity-modal-body').prepend(`<div class="alert alert-error">${data.Error}</div>`);
                    }
                }
            });
        }

        function clearAddCommunityModal() {
            $("#addCommunityModal").find(".alert-error").remove();
            $('#addCommunityLabel').val('');
            $('#addBDXLiveId').val('');
            $('input[name=addCommunityStatus]').prop("disabled", true);
            $('#add-community-inactive').prop("checked", true);
        }

        function limitNumberLength(input) {
            input.value = input.value.slice(0, 9);
        }

        function showEditCommunityModal() {
            loadCommunityDetailsInModal({ id: currentRowId, bdxCommunityID, syncStatus, communityLabel });
            $('#editCommunityModal').modal('show');
        }

        function formatCost(cost) {
            var result = "";

            if (cost != undefined && cost !== null && cost != 0) {
                var i = parseInt(cost = Math.abs(+cost || 0).toFixed(2)) + "",
                    j = (j = i.length) > 3 ? j % 3 : 0;
                result += "$" + (j ? i.substr(0, j) + "," : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + ",");
            }

            return result;
        }

        function ToggleCommLabel() {

            var checkBox = document.getElementById("commLabelCheckbox");

            if (checkBox.checked == true) {
                $("#communityMapLabel").css("opacity","100%");
            } else {
                $("#communityMapLabel").css("opacity", "50%");
            }
        }

        function ToggleHoldALot() {

            var checkBox = document.getElementById("holdALotCheckbox");

            if (checkBox.checked == true) {
                $("#holdAlotDiv").show();
            } else {
                $("#holdAlotDiv").hide();

            }
        }

        function paymentAccountListChanged() {
            var holdAlotPayment = $('#paymentAccountList option:selected').val();
            if (typeof (holdAlotPayment) === 'undefined' || holdAlotPayment === '0') {
                $('#paymentReservedStatuses').css('display', 'none');
            } else {
                $('#paymentReservedStatuses').css('display', 'block');
            }
        }

</script>
}
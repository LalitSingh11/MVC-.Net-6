@using BHI.SalesArchitect.Model.DB
@model CustomizedContent
@using Microsoft.AspNetCore.Mvc.TagHelpers;
@{
    Layout = null;
}
@section header {
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/jqueryui/jquery-ui.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="~/lib/jqueryui/themes/base/all.css" />
}
<script src="~/Content/ckeditor_4.16.2/ckeditor.js"></script>
<script type="text/javascript">

    function resetSaveLabel() {
        $("#confirmationMessage").removeClass("sucessfully-alert");
        $("#confirmationMessage").removeClass("unsucessfully-alert");
        $("#confirmationMessage").text("");
    }

    function showErrorMessage(msg) {
        var errorLabel = document.getElementById('errorMessage');
        errorLabel.style.display = 'block';
        errorLabel.innerText = msg;
    }

    function hideErrorMessage() {
        var errorLabel = document.getElementById('errorMessage');
        errorLabel.style.display = 'none';
    }

    $(document).ready(function () {
    @if (Model.Value == null)
    {
        Model.Value = "";
    }

            if ("@Model.CustomizedContentType.ContentType" == "Content" || "@Model.CustomizedContentType.ContentType" == "Headline") {
            CKEDITOR.replace('contentEditor', {
                on: {
                    instanceReady: function (ev) {
                        this.dataProcessor.writer.setRules('p', {
                            indent: false,
                            breakBeforeOpen: false,
                            breakAfterOpen: false,
                            breakBeforeClose: false,
                            breakAfterClose: false
                        });
                    }
                },
                extraPlugins: 'wordcount',
                autoParagraph: false,
                wordcount: {
                    showCharCount: false,
                    maxCharCount: -1,
                    showParagraphs: false,
                    showWordCount: false
                },
                toolbar: [['Source', 'PasteText', 'PasteFromWord', 'Bold', 'Italic', '-', 'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', 'Blockquote', 'Link', 'Unlink', 'Table', 'HorizontalRule', 'SpecialChar']],
                height: 150
            });

            CKEDITOR.instances['contentEditor'].setData(unescape("@Html.Raw(Model.Value.Replace("\n", "<br/>"))"));
        } else if ("@Model.CustomizedContentType.ContentType" == "MustAccept") {
            if ('@Html.Raw(Model.Value.Replace("\n", "<br/>"))' != "") {
                if ('@Html.Raw(Model.Value.Replace("\n", "<br/>").ToLower())' == 'true') {
                    $('#mustAcceptCheckbox').prop('checked', true);
                } else {
                    $('#mustAcceptCheckbox').prop('checked', false);
                }
            }
        } else if ("@Model.CustomizedContentType.ContentType" == "Error") {
            $('#errorContentBox').val(unescape("@Html.Raw(Model.Value.Replace("\n", "<br/>"))"));
        } else if ("@Model.CustomizedContentType.ContentType" == "InternalModalLink") {
            CKEDITOR.replace('modalContentEditor', {
                on: {
                    instanceReady: function (ev) {
                        this.dataProcessor.writer.setRules('p', {
                            indent: false,
                            breakBeforeOpen: false,
                            breakAfterOpen: false,
                            breakBeforeClose: false,
                            breakAfterClose: false
                        });
                    }
                },
                extraPlugins: 'wordcount',
                autoParagraph: false,
                wordcount: {
                    showCharCount: false,
                    maxCharCount: -1,
                    showParagraphs: false,
                    showWordCount: false
                },
                toolbar: [['Source', 'PasteText', 'PasteFromWord', 'Bold', 'Italic', '-', 'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', 'Blockquote', 'Link', 'Unlink', 'Table', 'HorizontalRule', 'SpecialChar']],
                height: 150
            });
            if ('@Html.Raw(Model.Value.Replace("\n", "<br/>"))' != "") {
                var responseObj = JSON.parse(unescape("@Html.Raw(Model.Value.Replace("\n", "<br/>"))"));
                $('#modalLinkText').val(responseObj.LinkText);
                CKEDITOR.instances['modalContentEditor'].setData(responseObj.ModalContent);
            }
        }
    });

    $('#updateChanges').click(function () {
        var contentValue = "";
        if ("@Model.CustomizedContentType.ContentType" == "Content" || "@Model.CustomizedContentType.ContentType" == "Headline") {
            contentValue = CKEDITOR.instances['contentEditor'].getData();
        } else if ("@Model.CustomizedContentType.ContentType" == "MustAccept") {
            contentValue = $('#mustAcceptCheckbox').is(':checked') ? 'true' : 'false';
        } else if ("@Model.CustomizedContentType.ContentType" == "Error") {
            contentValue = $('#errorContentBox').val();
        } else if ("@Model.CustomizedContentType.ContentType" == "InternalModalLink") {
            var linkText = $('#modalLinkText').val();
            var modalContent = CKEDITOR.instances['modalContentEditor'].getData();
            contentValue = JSON.stringify({ LinkText: linkText, ModalContent: modalContent });
        }

        var jsonModel = { contentTypeId: @Model.CustomizedContentTypeId, contentValue: escape(contentValue), isCommunityLevel: @Json.Serialize(Model.isCommunityContent), recordId: @Model.Id };

        $.ajax({
            type: "POST",
            url: '/Admin/UpdateCustomizedContent',
            data: jsonModel,
            success: function (data) {

                if ('@Model.isCommunityContent'.ToLower() != 'true') {
                    getHoldALotConfiguration();
                    $("#cc-close").click();
                } else {
                    loadCommunityCustomizedContent();
                    $("#cc-close").click();
                }

                resetSaveLabel();
                $("#confirmationMessage").addClass("sucessfully-alert");
                $("#confirmationMessage").text("Content updated successfully.");
                $("#confirmationMessage").fadeIn().delay(2000).fadeOut();
            }
        });
    });

    $('#cc-close').click(function () {
        $("#customContentModal").addClass("hide");
        $("#customContentModal").removeClass("in");
        $("#customContentModal").hide();
        $("#cc-backdrop").hide();
    });

</script>
<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true" id="cc-close">×</button>
    <h3 id="modalLabel">Edit Customized Content</h3>
</div>
<div class="modal-body" style="max-height: 430px;">
    <form method="post">
        <div class="form-horizontal">
            <div>
                <div class="control-group">
                    <label for="name" class="control-label" style="width: 118px !important">
                        Location:
                    </label>
                    <div class="controls" style="text-align:left;">
                        @Model.CustomizedContentType.CustomizedLocation.Description
                    </div>
                </div>
                <div class="control-group">
                    <label for="name" class="control-label" style="width: 118px !important">
                        Content Type:
                    </label>
                    <div class="controls" style="text-align:left;">
                        @Model.CustomizedContentType.ContentType
                    </div>
                </div>
            </div>
            @if (Model.CustomizedContentType.ContentType == "Content" || Model.CustomizedContentType.ContentType == "Headline")
            {
                <div class="control-group" id="richtext-cotent">
                    <label for="name" class="control-label" style="width: 118px !important">
                        Content:
                    </label>
                    <div class="controls" style="text-align:left;">
                        <textarea id="contentEditor"></textarea>
                    </div>
                </div>
            }
            @if (Model.CustomizedContentType.ContentType == "MustAccept")
            {
                <div class="control-group">
                    <label for="name" class="control-label" style="width: 118px !important">
                        Must Be Accepted:
                    </label>
                    <div class="controls" style="text-align:left;">
                        <input type="checkbox" style="margin-right: 10px;" id="mustAcceptCheckbox">
                    </div>
                </div>
            }
            @if (Model.CustomizedContentType.ContentType == "Error")
            {
                <div class="control-group">
                    <label for="name" class="control-label" style="width: 118px !important">
                        Content:
                    </label>
                    <div class="controls" style="text-align:left;">
                        <input type="text" id="errorContentBox" style="width:450px;"></input>
                    </div>
                </div>
            }
            @if (Model.CustomizedContentType.ContentType == "InternalModalLink")
            {
                <div class="control-group">
                    <label for="name" class="control-label" style="width: 118px !important">
                        Link Text:
                    </label>
                    <div class="controls" style="text-align:left;">
                        <input type="text" id="modalLinkText" style="width:250px;"></input>
                    </div>
                </div>
                <div class="control-group" id="richtext-cotent">
                    <label for="name" class="control-label" style="width: 118px !important">
                        Modal Content:
                    </label>
                    <div class="controls" style="text-align:left;">
                        <textarea id="modalContentEditor"></textarea>
                    </div>
                </div>
            }
            <input type="button" class="btn btn-primary" style="float:right;" value="Update" id="updateChanges">
        </div>
    </form>
</div>
